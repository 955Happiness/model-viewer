{"version":3,"file":"gltf-viewer.module.js","sources":["../source/gltf/utils.js","../source/gltf/gltf_object.js","../source/gltf/camera.js","../source/gltf/gltf_utils.js","../source/gltf/user_camera.js","../source/gltf/math_utils.js","../source/ResourceLoader/async_file_reader.js","../source/gltf/image_mime_type.js","../source/Renderer/webgl.js","../source/gltf/image.js","../source/Renderer/rendering_parameters.js","../source/GltfState/gltf_state.js","../source/Renderer/shader.js","../source/Renderer/shader_cache.js","../source/Renderer/renderer.js","../source/GltfView/gltf_view.js","../source/gltf/accessor.js","../source/gltf/buffer.js","../source/gltf/buffer_view.js","../source/gltf/light.js","../source/gltf/image_based_light.js","../source/gltf/texture.js","../source/gltf/material.js","../source/ResourceLoader/draco.js","../source/gltf/primitive.js","../source/gltf/mesh.js","../source/gltf/node.js","../source/gltf/sampler.js","../source/gltf/scene.js","../source/gltf/asset.js","../source/gltf/channel.js","../source/gltf/animation_sampler.js","../source/gltf/interpolator.js","../source/gltf/animation.js","../source/gltf/skin.js","../source/gltf/variant.js","../source/gltf/gltf.js","../source/ResourceLoader/glb_parser.js","../source/ResourceLoader/loader.js","../source/ibl_sampler.js","../source/ResourceLoader/ktx.js","../source/libs/hdrpng.js","../source/ResourceLoader/resource_loader.js"],"sourcesContent":["import { glMatrix } from 'gl-matrix';\n\nfunction jsToGl(array)\n{\n    let tensor = new glMatrix.ARRAY_TYPE(array.length);\n\n    for (let i = 0; i < array.length; ++i)\n    {\n        tensor[i] = array[i];\n    }\n\n    return tensor;\n}\n\nfunction jsToGlSlice(array, offset, stride)\n{\n    let tensor = new glMatrix.ARRAY_TYPE(stride);\n\n    for (let i = 0; i < stride; ++i)\n    {\n        tensor[i] = array[offset + i];\n    }\n\n    return tensor;\n}\n\nfunction initGlForMembers(gltfObj, gltf, webGlContext)\n{\n    for (const name of Object.keys(gltfObj))\n    {\n        const member = gltfObj[name];\n\n        if (member === undefined)\n        {\n            continue;\n        }\n        if (member.initGl !== undefined)\n        {\n            member.initGl(gltf, webGlContext);\n        }\n        if (Array.isArray(member))\n        {\n            for (const element of member)\n            {\n                if (element !== null && element !== undefined && element.initGl !== undefined)\n                {\n                    element.initGl(gltf, webGlContext);\n                }\n            }\n        }\n    }\n}\n\nfunction objectsFromJsons(jsonObjects, GltfType)\n{\n    if (jsonObjects === undefined)\n    {\n        return [];\n    }\n\n    const objects = [];\n    for (const jsonObject of jsonObjects)\n    {\n        objects.push(objectFromJson(jsonObject, GltfType));\n    }\n    return objects;\n}\n\nfunction objectFromJson(jsonObject, GltfType)\n{\n    const object = new GltfType();\n    object.fromJson(jsonObject);\n    return object;\n}\n\nfunction fromKeys(target, jsonObj, ignore = [])\n{\n    for(let k of Object.keys(target))\n    {\n        if (ignore && ignore.find(function(elem){return elem == k;}) !== undefined)\n        {\n            continue; // skip\n        }\n        if (jsonObj[k] !== undefined)\n        {\n            let normalizedK = k.replace(\"^@\", \"\");\n            target[normalizedK] = jsonObj[k];\n        }\n    }\n}\n\nfunction fromParams(parameters, target, jsonObj)\n{\n    for (let p of parameters)\n    {\n        if(jsonObj[p] !== undefined)\n        {\n            target[p] = jsonObj[p];\n        }\n    }\n}\n\nfunction stringHash(str, seed = 0)\n{\n    for(var i = 0; i < str.length; ++i)\n    {\n        seed = Math.imul(31, seed) + str.charCodeAt(i) | 0;\n    }\n\n    return seed;\n}\n\nfunction combineHashes(hash1, hash2)\n{\n    return hash1 ^ (hash1 + 0x9e3779b9 + (hash2 << 6) + (hash2 >> 2));\n}\n\nfunction clamp(number, min, max)\n{\n    return Math.min(Math.max(number, min), max);\n}\n\nfunction getIsGlb(filename)\n{\n    return getExtension(filename) == \"glb\";\n}\n\nfunction getIsGltf(filename)\n{\n    return getExtension(filename) == \"gltf\";\n}\n\nfunction getIsHdr(filename)\n{\n    return getExtension(filename) == \"hdr\";\n}\n\nfunction getExtension(filename)\n{\n    const split = filename.toLowerCase().split(\".\");\n    if (split.length == 1)\n    {\n        return undefined;\n    }\n    return split[split.length - 1];\n}\n\nfunction getFileName(filePath)\n{\n    const split = filePath.split(\"/\");\n    return split[split.length - 1];\n}\n\nfunction getFileNameWithoutExtension(filePath)\n{\n    const filename = getFileName(filePath);\n    const index = filename.lastIndexOf(\".\");\n    return filename.slice(0, index);\n}\n\nfunction getContainingFolder(filePath)\n{\n    return filePath.substring(0, filePath.lastIndexOf(\"/\") + 1);\n}\n\nfunction combinePaths()\n{\n    const parts = Array.from(arguments);\n    return parts.join(\"/\");\n}\n\n// marker interface used to for parsing the uniforms\nclass UniformStruct { }\n\nclass Timer\n{\n    constructor()\n    {\n        this.startTime = undefined;\n        this.endTime = undefined;\n        this.seconds = undefined;\n    }\n\n    start()\n    {\n        this.startTime = new Date().getTime() / 1000;\n        this.endTime = undefined;\n        this.seconds = undefined;\n    }\n\n    stop()\n    {\n        this.endTime = new Date().getTime() / 1000;\n        this.seconds = this.endTime - this.startTime;\n    }\n}\n\nclass AnimationTimer\n{\n    constructor()\n    {\n        this.startTime = 0;\n        this.paused = true;\n        this.fixedTime = null;\n        this.pausedTime = 0;\n    }\n\n    elapsedSec()\n    {\n        if(this.paused)\n        {\n            return this.pausedTime / 1000;\n        }\n        else\n        {\n            return this.fixedTime || (new Date().getTime() - this.startTime) / 1000;\n        }\n    }\n\n    toggle()\n    {\n        if(this.paused)\n        {\n            this.unpause();\n        }\n        else\n        {\n            this.pause();\n        }\n    }\n\n    start()\n    {\n        this.startTime = new Date().getTime();\n        this.paused = false;\n    }\n\n    pause()\n    {\n        this.pausedTime = new Date().getTime() - this.startTime;\n        this.paused = true;\n    }\n\n    unpause()\n    {\n        this.startTime += new Date().getTime() - this.startTime - this.pausedTime;\n        this.paused = false;\n    }\n\n    reset()\n    {\n        if(!this.paused) {\n            // Animation is running.\n            this.startTime = new Date().getTime();\n        }\n        else {\n            this.startTime = 0;\n        }\n        this.pausedTime = 0;\n    }\n\n    setFixedTime(timeInSec)\n    {\n        this.paused = false;\n        this.fixedTime = timeInSec;\n    }\n}\n\nexport {\n    jsToGl,\n    jsToGlSlice,\n    objectsFromJsons,\n    objectFromJson,\n    fromKeys,\n    fromParams,\n    stringHash,\n    combineHashes,\n    clamp,\n    getIsGlb,\n    getIsGltf,\n    getIsHdr,\n    getExtension,\n    getFileName,\n    getFileNameWithoutExtension,\n    getContainingFolder,\n    combinePaths,\n    UniformStruct,\n    Timer,\n    AnimationTimer,\n    initGlForMembers\n};\n","import { initGlForMembers, fromKeys } from \"./utils\";\n\n// base class for all gltf objects\nclass GltfObject\n{\n    constructor()\n    {\n        this.extensions = undefined;\n        this.extras = undefined;\n    }\n\n    fromJson(json)\n    {\n        fromKeys(this, json);\n    }\n\n    initGl(gltf, webGlContext)\n    {\n        initGlForMembers(this, gltf, webGlContext);\n    }\n}\n\nexport { GltfObject };\n","import { mat4, vec3, quat } from 'gl-matrix';\nimport { fromKeys } from './utils.js';\nimport { GltfObject } from './gltf_object.js';\n\nclass gltfCamera extends GltfObject\n{\n    constructor(\n        type = \"perspective\",\n        znear = 0.01,\n        zfar = Infinity,\n        yfov = 45.0 * Math.PI / 180.0,\n        aspectRatio = undefined,\n        xmag = 1.0,\n        ymag = 1.0,\n        name = undefined,\n        nodeIndex = undefined)\n    {\n        super();\n        this.type = type;\n        this.znear = znear;\n        this.zfar = zfar;\n        this.yfov = yfov; // radians\n        this.xmag = xmag;\n        this.ymag = ymag;\n        this.aspectRatio = aspectRatio;\n        this.name = name;\n        this.node = nodeIndex;\n    }\n\n    initGl(gltf, webGlContext)\n    {\n        super.initGl(gltf, webGlContext);\n\n        let cameraIndex = undefined;\n        for (let i = 0; i < gltf.nodes.length; i++)\n        {\n            cameraIndex = gltf.nodes[i].camera;\n            if (cameraIndex === undefined)\n            {\n                continue;\n            }\n\n            if (gltf.cameras[cameraIndex] === this)\n            {\n                this.node = i;\n                break;\n            }\n        }\n\n        // cameraIndex stays undefined if camera is not assigned to any node\n        if(this.node === undefined && cameraIndex !== undefined)\n        {\n            console.error(\"Invalid node for camera \" + cameraIndex);\n        }\n    }\n\n    fromJson(jsonCamera)\n    {\n        this.name = name;\n        if(jsonCamera.perspective !== undefined)\n        {\n            this.type = \"perspective\";\n            fromKeys(this, jsonCamera.perspective);\n        }\n        else if(jsonCamera.orthographic !== undefined)\n        {\n            this.type = \"orthographic\";\n            fromKeys(this, jsonCamera.orthographic);\n        }\n    }\n\n    sortPrimitivesByDepth(gltf, drawables)\n    {\n        // Precompute the distances to avoid their computation during sorting.\n        for (const drawable of drawables)\n        {\n            const modelView = mat4.create();\n            mat4.multiply(modelView, this.getViewMatrix(gltf), drawable.node.worldTransform);\n\n            // Transform primitive centroid to find the primitive's depth.\n            const pos = vec3.transformMat4(vec3.create(), vec3.clone(drawable.primitive.centroid), modelView);\n\n            drawable.depth = pos[2];\n        }\n\n        // 1. Remove primitives that are behind the camera.\n        //    --> They will never be visible and it is cheap to discard them here.\n        // 2. Sort primitives so that the furthest nodes are rendered first.\n        //    This is required for correct transparency rendering.\n        return drawables\n            .filter((a) => a.depth <= 0)\n            .sort((a, b) => a.depth - b.depth);\n    }\n\n    getProjectionMatrix()\n    {\n        const projection = mat4.create();\n\n        if (this.type === \"perspective\")\n        {\n            mat4.perspective(projection, this.yfov, this.aspectRatio, this.znear, this.zfar);\n        }\n        else if (this.type === \"orthographic\")\n        {\n            projection[0]  = 1.0 / this.xmag;\n            projection[5]  = 1.0 / this.ymag;\n            projection[10] = 2.0 / (this.znear - this.zfar);\n            projection[14] = (this.zfar + this.znear) / (this.znear - this.zfar);\n        }\n\n        return projection;\n    }\n\n    getViewMatrix(gltf)\n    {\n        const view = mat4.create();\n        const position = this.getPosition(gltf);\n        const target = this.getTarget(gltf);\n        mat4.lookAt(view, position, target, vec3.fromValues(0, 1, 0));\n        return view;\n    }\n\n    getTarget(gltf)\n    {\n        const target = vec3.create();\n        const position = this.getPosition(gltf);\n        const lookDirection = this.getLookDirection(gltf);\n        vec3.add(target, lookDirection, position);\n        return target;\n    }\n\n    getPosition(gltf)\n    {\n        const position = vec3.create();\n        const node = this.getNode(gltf);\n        mat4.getTranslation(position, node.worldTransform);\n        return position;\n    }\n\n    getLookDirection(gltf)\n    {\n        const direction = vec3.create();\n        const rotation = this.getRotation(gltf);\n        vec3.transformQuat(direction, vec3.fromValues(0, 0, -1), rotation);\n        return direction;\n    }\n\n    getRotation(gltf)\n    {\n        const rotation = quat.create();\n        const node = this.getNode(gltf);\n        mat4.getRotation(rotation, node.worldTransform);\n        return rotation;\n    }\n\n    clone()\n    {\n        return new gltfCamera(\n            this.type,\n            this.znear,\n            this.zfar,\n            this.yfov,\n            this.aspectRatio,\n            this.xmag,\n            this.ymag,\n            this.name,\n            this.node);\n    }\n\n    getNode(gltf)\n    {\n        return gltf.nodes[this.node];\n    }\n\n    // Returns a JSON object describing the user camera's current values.\n    getDescription(gltf)\n    {\n        const camera = {\n            \"type\": this.type\n        };\n\n        if (this.name != undefined)\n        {\n            camera[\"name\"] = this.name;\n        }\n\n        if (this.type === \"perspective\")\n        {\n            if (this.aspectRatio != undefined)\n            {\n                camera[\"perspective\"][\"aspectRatio\"] = this.aspectRatio;\n            }\n            camera[\"perspective\"][\"yfov\"] = this.yfov;\n            if (this.zfar != Infinity)\n            {\n                camera[\"perspective\"][\"zfar\"] = this.zfar;\n            }\n            camera[\"perspective\"][\"ynear\"] = this.ynear;\n        }\n        else if (this.type === \"orthographic\")\n        {\n            camera[\"orthographic\"][\"xmag\"] = this.xmag;\n            camera[\"orthographic\"][\"ymag\"] = this.ymag;\n            camera[\"orthographic\"][\"zfar\"] = this.zfar;\n            camera[\"orthographic\"][\"ynear\"] = this.ynear;\n        }\n\n        const mat = this.getViewMatrix(gltf);\n\n        const node = {\n            \"camera\": 0,\n            \"matrix\": [mat[0], mat[1], mat[2], mat[3],\n                       mat[4], mat[5], mat[6], mat[7],\n                       mat[8], mat[9], mat[10], mat[11],\n                       mat[12], mat[13], mat[14], mat[15]]\n        };\n\n        if (this.nodeIndex != undefined && gltf.nodes[this.nodeIndex].name != undefined)\n        {\n            node[\"name\"] = gltf.nodes[this.nodeIndex].name;\n        }\n\n        return {\n            \"node\": node,\n            \"camera\": camera\n        }\n    }\n}\n\nexport { gltfCamera };\n","import { vec3 } from 'gl-matrix';\nimport { jsToGl } from './utils.js';\n\nfunction getSceneExtents(gltf, sceneIndex, outMin, outMax)\n{\n    for (const i of [0, 1, 2])\n    {\n        outMin[i] = Number.POSITIVE_INFINITY;\n        outMax[i] = Number.NEGATIVE_INFINITY;\n    }\n\n    const scene = gltf.scenes[sceneIndex];\n\n    let nodeIndices = scene.nodes.slice();\n    while(nodeIndices.length > 0)\n    {\n        const node = gltf.nodes[nodeIndices.pop()];\n        nodeIndices = nodeIndices.concat(node.children);\n\n        if (node.mesh === undefined)\n        {\n            continue;\n        }\n\n        const mesh = gltf.meshes[node.mesh];\n        if (mesh.primitives === undefined)\n        {\n            continue;\n        }\n\n        for (const primitive of mesh.primitives)\n        {\n            const attribute = primitive.glAttributes.find(a => a.attribute == \"POSITION\");\n            if (attribute === undefined)\n            {\n                continue;\n            }\n\n            const accessor = gltf.accessors[attribute.accessor];\n            const assetMin = vec3.create();\n            const assetMax = vec3.create();\n            getExtentsFromAccessor(accessor, node.worldTransform, assetMin, assetMax);\n\n            for (const i of [0, 1, 2])\n            {\n                outMin[i] = Math.min(outMin[i], assetMin[i]);\n                outMax[i] = Math.max(outMax[i], assetMax[i]);\n            }\n        }\n    }\n}\n\nfunction getExtentsFromAccessor(accessor, worldTransform, outMin, outMax)\n{\n    const boxMin = vec3.create();\n    vec3.transformMat4(boxMin, jsToGl(accessor.min), worldTransform);\n\n    const boxMax = vec3.create();\n    vec3.transformMat4(boxMax, jsToGl(accessor.max), worldTransform);\n\n    const center = vec3.create();\n    vec3.add(center, boxMax, boxMin);\n    vec3.scale(center, center, 0.5);\n\n    const centerToSurface = vec3.create();\n    vec3.sub(centerToSurface, boxMax, center);\n\n    const radius = vec3.length(centerToSurface);\n\n    for (const i of [0, 1, 2])\n    {\n        outMin[i] = center[i] - radius;\n        outMax[i] = center[i] + radius;\n    }\n}\n\nfunction computePrimitiveCentroids(gltf)\n{\n    const meshes = gltf.nodes.filter(node => node.mesh !== undefined).map(node => gltf.meshes[node.mesh]);\n    const primitives = meshes.reduce((acc, mesh) => acc.concat(mesh.primitives), []);\n    for(const primitive of primitives) {\n\n        const positionsAccessor = gltf.accessors[primitive.attributes.POSITION];\n        const positions = positionsAccessor.getTypedView(gltf);\n\n        if(primitive.indices !== undefined)\n        {\n            // Primitive has indices.\n\n            const indicesAccessor = gltf.accessors[primitive.indices];\n\n            const indices = indicesAccessor.getTypedView(gltf);\n\n            const acc = new Float32Array(3);\n\n            for(let i = 0; i < indices.length; i++) {\n                const offset = 3 * indices[i];\n                acc[0] += positions[offset];\n                acc[1] += positions[offset + 1];\n                acc[2] += positions[offset + 2];\n            }\n\n            const centroid = new Float32Array([\n                acc[0] / indices.length,\n                acc[1] / indices.length,\n                acc[2] / indices.length,\n            ]);\n\n            primitive.setCentroid(centroid);\n        }\n        else\n        {\n            // Primitive does not have indices.\n\n            const acc = new Float32Array(3);\n\n            for(let i = 0; i < positions.length; i += 3) {\n                acc[0] += positions[i];\n                acc[1] += positions[i + 1];\n                acc[2] += positions[i + 2];\n            }\n\n            const positionVectors = positions.length / 3;\n\n            const centroid = new Float32Array([\n                acc[0] / positionVectors,\n                acc[1] / positionVectors,\n                acc[2] / positionVectors,\n            ]);\n\n            primitive.setCentroid(centroid);\n        }\n\n    }\n}\n\nexport { getSceneExtents, computePrimitiveCentroids };\n","import { vec3 } from 'gl-matrix';\nimport { gltfCamera } from './camera.js';\nimport { jsToGl, clamp } from './utils.js';\nimport { getSceneExtents } from './gltf_utils.js';\n\nconst VecZero = vec3.create();\nconst PanSpeedDenominator = 1200;\nconst MaxNearFarRatio = 10000;\n\nclass UserCamera extends gltfCamera\n{\n    constructor(\n        target = [0, 0, 0],\n        yaw = 0,\n        pitch = 0,\n        distance = 1)\n    {\n        super();\n\n        this.target = jsToGl(target);\n        this.yaw = yaw;\n        this.pitch = pitch;\n        this.distance = distance;\n        this.zoomFactor = 1.04;\n        this.orbitSpeed = 1 / 180;\n        this.panSpeed = 1;\n        this.sceneExtents = {\n            min: vec3.create(),\n            max: vec3.create()\n        };\n    }\n\n    setVerticalFoV(yfov)\n    {\n        this.yfov = yfov;\n    }\n\n    getPosition()\n    {\n        // calculate direction from focus to camera (assuming camera is at positive z)\n        // pitch rotates *around* x-axis, yaw rotates *around* y-axis\n        const direction = vec3.fromValues(0, 0, this.distance);\n        this.toGlobalOrientation(direction);\n\n        const position = vec3.create();\n        vec3.add(position, this.target, direction);\n        return position;\n    }\n\n    getTarget()\n    {\n        return this.target;\n    }\n\n    lookAt(from, to)\n    {\n        // up is implicitly (0, 1, 0)\n        this.target = to;\n\n        const difference = vec3.create();\n        vec3.subtract(difference, from, to);\n        const projectedDifference = vec3.fromValues(from[0] - to[0], 0, from[2] - to[2]);\n\n        this.pitch = vec3.angle(difference, projectedDifference);\n        this.yaw = vec3.angle(projectedDifference, vec3.fromValues(1.0, 0.0, 0.0));\n        this.distance = vec3.length(difference);\n    }\n\n    setPosition(position)\n    {\n        this.lookAt(position, this.target);\n    }\n\n    setTarget(target)\n    {\n        this.target = target;\n    }\n\n    setRotation(yaw, pitch)\n    {\n        this.yaw = yaw;\n        this.pitch = pitch;\n    }\n\n    setZoom(distance)\n    {\n        this.distance = distance;\n    }\n\n    zoomBy(value)\n    {\n        if (value > 0)\n        {\n            this.distance *= this.zoomFactor;\n        }\n        else\n        {\n            this.distance /= this.zoomFactor;\n        }\n        this.fitCameraPlanesToExtents(this.sceneExtents.min, this.sceneExtents.max);\n    }\n\n    orbit(x, y)\n    {\n        const yMax = Math.PI / 2 - 0.01;\n        this.yaw += (x * this.orbitSpeed);\n        this.pitch += (y * this.orbitSpeed);\n        this.pitch = clamp(this.pitch, -yMax, yMax);\n    }\n\n    pan(x, y)\n    {\n        const left = vec3.fromValues(-1, 0, 0);\n        this.toGlobalOrientation(left);\n        vec3.scale(left, left, x * this.panSpeed);\n\n        const up = vec3.fromValues(0, 1, 0);\n        this.toGlobalOrientation(up);\n        vec3.scale(up, up, y * this.panSpeed);\n\n        vec3.add(this.target, this.target, up);\n        vec3.add(this.target, this.target, left);\n    }\n\n    fitPanSpeedToScene(min, max)\n    {\n        const longestDistance = vec3.distance(min, max);\n        this.panSpeed = longestDistance / PanSpeedDenominator;\n    }\n\n    reset()\n    {\n        this.yaw = 0;\n        this.pitch = 0;\n        fitDistanceToExtents(this.sceneExtents.min, this.sceneExtents.max);\n        fitCameraTargetToExtents(this.sceneExtents.min, this.sceneExtents.max);\n    }\n\n    fitViewToScene(gltf, sceneIndex)\n    {\n        getSceneExtents(gltf, sceneIndex, this.sceneExtents.min, this.sceneExtents.max);\n        this.fitCameraTargetToExtents(this.sceneExtents.min, this.sceneExtents.max);\n        this.fitDistanceToExtents(this.sceneExtents.min, this.sceneExtents.max);\n\n        const direction = vec3.fromValues(0, 0, this.distance);\n        vec3.add(this.getPosition(), this.target, direction);\n\n        this.fitPanSpeedToScene(this.sceneExtents.min, this.sceneExtents.max);\n        this.fitCameraPlanesToExtents(this.sceneExtents.min, this.sceneExtents.max);\n\n        this.yaw = 0;\n        this.pitch = 0;\n    }\n\n    // Converts orientation from camera space to global space\n    toGlobalOrientation(vector)\n    {\n        vec3.rotateX(vector, vector, VecZero, -this.pitch);\n        vec3.rotateY(vector, vector, VecZero, -this.yaw);\n    }\n\n    fitDistanceToExtents(min, max)\n    {\n        const maxAxisLength = Math.max(max[0] - min[0], max[1] - min[1]);\n        const yfov = this.yfov;\n        const xfov = this.yfov * this.aspectRatio;\n\n        const yZoom = maxAxisLength / 2 / Math.tan(yfov / 2);\n        const xZoom = maxAxisLength / 2 / Math.tan(xfov / 2);\n\n        this.distance = Math.max(xZoom, yZoom);\n    }\n\n    fitCameraTargetToExtents(min, max)\n    {\n        for (const i of [0, 1, 2])\n        {\n            this.target[i] = (max[i] + min[i]) / 2;\n        }\n    }\n\n    fitCameraPlanesToExtents(min, max)\n    {\n        // depends only on scene min/max and the camera distance\n\n        // Manually increase scene extent just for the camera planes to avoid camera clipping in most situations.\n        const longestDistance = 10 * vec3.distance(min, max);\n        let zNear = this.distance - (longestDistance * 0.6);\n        let zFar = this.distance + (longestDistance * 0.6);\n\n        // minimum near plane value needs to depend on far plane value to avoid z fighting or too large near planes\n        zNear = Math.max(zNear, zFar / MaxNearFarRatio);\n\n        this.znear = zNear;\n        this.zfar = zFar;\n    }\n}\n\nexport { UserCamera };\n","function nearestPowerOf2(n)\n{\n    if (isPowerOf2(n))\n    {\n        return n;\n    }\n    return Math.pow(2.0, Math.round(Math.log(n) / Math.log(2.0)));\n}\n\nfunction isPowerOf2(n)\n{\n    return n && (n & (n - 1)) === 0;\n}\n\nfunction makeEven(n)\n{\n    if (n % 2 === 1)\n    {\n        return n + 1;\n    }\n    return n;\n}\n\nexport { nearestPowerOf2, isPowerOf2, makeEven };\n","class AsyncFileReader\n{\n    static async readAsArrayBuffer(path) {\n        return new Promise( (resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = () => resolve(reader.result);\n            reader.onerror = reject;\n            reader.readAsArrayBuffer(path);\n        });\n    }\n\n    static async readAsText(path) {\n        return new Promise( (resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = () => resolve(reader.result);\n            reader.onerror = reject;\n            reader.readAsText(path);\n        });\n    }\n\n    static async readAsDataURL(path) {\n        return new Promise( (resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = () => resolve(reader.result);\n            reader.onerror = reject;\n            reader.readAsDataURL(path);\n        });\n    }\n}\n\nexport { AsyncFileReader };\n","const ImageMimeType = {JPEG: \"image/jpeg\", PNG: \"image/png\", HDR: \"image/vnd.radiance\", KTX2: \"image/ktx2\", GLTEXTURE: \"image/texture\"};\n\nexport { ImageMimeType };\n","import { ImageMimeType } from \"../gltf/image_mime_type.js\";\n\nlet GL = undefined;\n\nclass gltfWebGl\n{\n    constructor(context)\n    {\n        this.context = context;\n        if(GL === undefined)\n        {\n            GL = context;\n        }\n    }\n\n    loadWebGlExtensions(webglExtensions)\n    {\n        for (let extension of webglExtensions)\n        {\n            if (this.context.getExtension(extension) === null)\n            {\n                console.warn(\"Extension \" + extension + \" not supported!\");\n            }\n        }\n\n        // let EXT_texture_filter_anisotropic = this.context.getExtension(\"EXT_texture_filter_anisotropic\");\n\n        // if (EXT_texture_filter_anisotropic)\n        // {\n        //     this.context.anisotropy = EXT_texture_filter_anisotropic.TEXTURE_MAX_ANISOTROPY_EXT;\n        //     this.context.maxAnisotropy = this.context.getParameter(EXT_texture_filter_anisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n        //     this.context.supports_EXT_texture_filter_anisotropic = true;\n        // }\n        // else\n        // {\n        //     this.context.supports_EXT_texture_filter_anisotropic = false;\n        // }\n    }\n\n    setTexture(loc, gltf, textureInfo, texSlot)\n    {\n        if (loc === -1)\n        {\n            return false;\n        }\n\n        let gltfTex = gltf.textures[textureInfo.index];\n\n        if (gltfTex === undefined)\n        {\n            console.warn(\"Texture is undefined: \" + textureInfo.index);\n            return false;\n        }\n\n        const image = gltf.images[gltfTex.source];\n        if (image.mimeType === ImageMimeType.KTX2 ||\n            image.mimeType === ImageMimeType.GLTEXTURE)\n        {\n            gltfTex.glTexture = image.image;\n            gltfTex.initialized = true;\n        }\n\n        if (gltfTex.glTexture === undefined)\n        {\n            gltfTex.glTexture = this.context.createTexture();\n        }\n\n        this.context.activeTexture(GL.TEXTURE0 + texSlot);\n        this.context.bindTexture(gltfTex.type, gltfTex.glTexture);\n\n        this.context.uniform1i(loc, texSlot);\n\n        if (!gltfTex.initialized)\n        {\n            const gltfSampler = gltf.samplers[gltfTex.sampler];\n\n            if (gltfSampler === undefined)\n            {\n                console.warn(\"Sampler is undefined for texture: \" + textureInfo.index);\n                return false;\n            }\n\n            this.context.pixelStorei(GL.UNPACK_FLIP_Y_WEBGL, false);\n\n            if (image === undefined)\n            {\n                console.warn(\"Image is undefined for texture: \" + gltfTex.source);\n                return false;\n            }\n            const internalformat = (textureInfo.linear || GL.SRGB8_ALPHA8 === undefined) ? GL.RGBA : GL.SRGB8_ALPHA8;\n            this.context.texImage2D(image.type, image.miplevel, internalformat, GL.RGBA, GL.UNSIGNED_BYTE, image.image);\n            const generateMips = image.shouldGenerateMips();\n\n            this.setSampler(gltfSampler, gltfTex.type, generateMips);\n\n            if (textureInfo.generateMips && generateMips)\n            {\n                // Until this point, images can be assumed to be power of two.\n                switch (gltfSampler.minFilter)\n                {\n                case GL.NEAREST_MIPMAP_NEAREST:\n                case GL.NEAREST_MIPMAP_LINEAR:\n                case GL.LINEAR_MIPMAP_NEAREST:\n                case GL.LINEAR_MIPMAP_LINEAR:\n                    this.context.generateMipmap(gltfTex.type);\n                    break;\n                default:\n                    break;\n                }\n            }\n\n            gltfTex.initialized = true;\n        }\n\n        return gltfTex.initialized;\n    }\n\n    setIndices(gltf, accessorIndex)\n    {\n        let gltfAccessor = gltf.accessors[accessorIndex];\n\n        if (gltfAccessor.glBuffer === undefined)\n        {\n            gltfAccessor.glBuffer = this.context.createBuffer();\n\n            let data = gltfAccessor.getTypedView(gltf);\n\n            if (data === undefined)\n            {\n                return false;\n            }\n\n            this.context.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, gltfAccessor.glBuffer);\n            this.context.bufferData(GL.ELEMENT_ARRAY_BUFFER, data, GL.STATIC_DRAW);\n        }\n        else\n        {\n            this.context.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, gltfAccessor.glBuffer);\n        }\n\n        return true;\n    }\n\n    enableAttribute(gltf, attributeLocation, gltfAccessor)\n    {\n        if (attributeLocation === -1)\n        {\n            console.warn(\"Tried to access unknown attribute\");\n            return false;\n        }\n\n        if(gltfAccessor.bufferView === undefined)\n        {\n            console.warn(\"Tried to access undefined bufferview\");\n            return true;\n        }\n\n        let gltfBufferView = gltf.bufferViews[gltfAccessor.bufferView];\n\n        if (gltfAccessor.glBuffer === undefined)\n        {\n            gltfAccessor.glBuffer = this.context.createBuffer();\n\n            let data = gltfAccessor.getTypedView(gltf);\n\n            if (data === undefined)\n            {\n                return false;\n            }\n\n            this.context.bindBuffer(GL.ARRAY_BUFFER, gltfAccessor.glBuffer);\n            this.context.bufferData(GL.ARRAY_BUFFER, data, GL.STATIC_DRAW);\n        }\n        else\n        {\n            this.context.bindBuffer(GL.ARRAY_BUFFER, gltfAccessor.glBuffer);\n        }\n\n        this.context.vertexAttribPointer(attributeLocation, gltfAccessor.getComponentCount(gltfAccessor.type), gltfAccessor.componentType, gltfAccessor.normalized, gltfBufferView.byteStride, 0);\n        this.context.enableVertexAttribArray(attributeLocation);\n\n        return true;\n    }\n\n    compileShader(shaderIdentifier, isVert, shaderSource)\n    {\n        const shader = this.context.createShader(isVert ? GL.VERTEX_SHADER : GL.FRAGMENT_SHADER);\n        this.context.shaderSource(shader, shaderSource);\n        this.context.compileShader(shader);\n        const compiled = this.context.getShaderParameter(shader, GL.COMPILE_STATUS);\n\n        if (!compiled)\n        {\n            // output surrounding source code\n            let info = \"\";\n            const messages = this.context.getShaderInfoLog(shader).split(\"\\n\");\n            for(const message of messages)\n            {\n                info += message + \"\\n\";\n                const matches = message.match(/(?:(?:WARNING)|(?:ERROR)): [0-9]*:([0-9]*).*/i);\n                if (matches && matches.length > 1)\n                {\n                    const lineNumber = parseInt(matches[1]) - 1;\n                    const lines = shaderSource.split(\"\\n\");\n\n                    for(let i = Math.max(0, lineNumber - 2); i < Math.min(lines.length, lineNumber + 3); i++)\n                    {\n                        if (lineNumber === i)\n                        {\n                            info += \"->\";\n                        }\n                        info += \"\\t\" + lines[i] + \"\\n\";\n                    }\n                }\n            }\n\n            throw new Error(\"Could not compile WebGL program '\" + shaderIdentifier + \"'. \\n\\n\" + info);\n        }\n\n        return shader;\n    }\n\n    linkProgram(vertex, fragment)\n    {\n        let program = this.context.createProgram();\n        this.context.attachShader(program, vertex);\n        this.context.attachShader(program, fragment);\n        this.context.linkProgram(program);\n\n        if (!this.context.getProgramParameter(program, GL.LINK_STATUS))\n        {\n            var info = this.context.getProgramInfoLog(program);\n            throw new Error('Could not link WebGL program. \\n\\n' + info);\n        }\n\n        return program;\n    }\n\n    //https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants\n    setSampler(gltfSamplerObj, type, generateMipmaps) // TEXTURE_2D\n    {\n        if (generateMipmaps)\n        {\n            this.context.texParameteri(type, GL.TEXTURE_WRAP_S, gltfSamplerObj.wrapS);\n            this.context.texParameteri(type, GL.TEXTURE_WRAP_T, gltfSamplerObj.wrapT);\n        }\n        else\n        {\n            this.context.texParameteri(type, GL.TEXTURE_WRAP_S, GL.CLAMP_TO_EDGE);\n            this.context.texParameteri(type, GL.TEXTURE_WRAP_T, GL.CLAMP_TO_EDGE);\n        }\n\n        // If not mip-mapped, force to non-mip-mapped sampler.\n        if (!generateMipmaps && (gltfSamplerObj.minFilter != GL.NEAREST) && (gltfSamplerObj.minFilter != GL.LINEAR))\n        {\n            if ((gltfSamplerObj.minFilter == GL.NEAREST_MIPMAP_NEAREST) || (gltfSamplerObj.minFilter == GL.NEAREST_MIPMAP_LINEAR))\n            {\n                this.context.texParameteri(type, GL.TEXTURE_MIN_FILTER, GL.NEAREST);\n            }\n            else\n            {\n                this.context.texParameteri(type, GL.TEXTURE_MIN_FILTER, GL.LINEAR);\n            }\n        }\n        else\n        {\n            this.context.texParameteri(type, GL.TEXTURE_MIN_FILTER, gltfSamplerObj.minFilter);\n        }\n        this.context.texParameteri(type, GL.TEXTURE_MAG_FILTER, gltfSamplerObj.magFilter);\n\n        if (this.context.supports_EXT_texture_filter_anisotropic)\n        {\n            this.context.texParameterf(type, this.context.anisotropy, this.context.maxAnisotropy); // => 16xAF\n        }\n    }\n}\n\nexport { gltfWebGl, GL };\n","import { GltfObject } from './gltf_object.js';\nimport { isPowerOf2 } from './math_utils.js';\nimport { AsyncFileReader } from '../ResourceLoader/async_file_reader.js';\nimport { GL } from \"../Renderer/webgl\";\nimport { ImageMimeType } from \"./image_mime_type.js\";\nimport * as jpeg  from \"jpeg-js\";\nimport * as png from 'fast-png';\n\nclass gltfImage extends GltfObject\n{\n    constructor(\n        uri = undefined,\n        type = GL.TEXTURE_2D,\n        miplevel = 0,\n        bufferView = undefined,\n        name = undefined,\n        mimeType = ImageMimeType.JPEG,\n        image = undefined)\n    {\n        super();\n        this.uri = uri;\n        this.bufferView = bufferView;\n        this.mimeType = mimeType;\n        this.image = image; // javascript image\n        this.name = name;\n        this.type = type; // nonstandard\n        this.miplevel = miplevel; // nonstandard\n    }\n\n    resolveRelativePath(basePath)\n    {\n        if (typeof this.uri === 'string' || this.uri instanceof String)\n        {\n            if (this.uri.startsWith('./'))\n            {\n                // Remove preceding './' from URI.\n                this.uri = this.uri.substr(2);\n            }\n            this.uri = basePath + this.uri;\n        }\n    }\n\n    async load(gltf, additionalFiles = undefined)\n    {\n        if (this.image !== undefined)\n        {\n            if (this.mimeType !== ImageMimeType.GLTEXTURE)\n            {\n                console.error(\"image has already been loaded\");\n            }\n            return;\n        }\n\n        if (!await this.setImageFromBufferView(gltf) &&\n            !await this.setImageFromFiles(additionalFiles, gltf) &&\n            !await this.setImageFromUri(gltf))\n        {\n            console.error(\"Was not able to resolve image with uri '%s'\", this.uri);\n            return;\n        }\n\n        return;\n    }\n\n    static loadHTMLImage(url)\n    {\n        return new Promise( (resolve, reject) => {\n            const image = new Image();\n            image.addEventListener('load', () => resolve(image) );\n            image.addEventListener('error', reject);\n            image.src = url;\n            image.crossOrigin = \"\";\n        });\n    }\n\n    async setImageFromUri(gltf)\n    {\n        if (this.uri === undefined)\n        {\n            return false;\n        }\n\n        if(this.mimeType === ImageMimeType.KTX2)\n        {\n            if (gltf.ktxDecoder !== undefined)\n            {\n                this.image = await gltf.ktxDecoder.loadKtxFromUri(this.uri);\n            }\n            else\n            {\n                console.warn('Loading of ktx images failed: KtxDecoder not initalized');\n            }\n        }\n        else if (typeof(Image) !== 'undefined' && (this.mimeType === ImageMimeType.JPEG || this.mimeType === ImageMimeType.PNG))\n        {\n            this.image = await gltfImage.loadHTMLImage(this.uri).catch( (error) => {\n                console.error(error);\n            });\n        }\n        else if(this.mimeType === ImageMimeType.JPEG && this.uri instanceof ArrayBuffer)\n        {\n            this.image = jpeg.decode(this.uri, {useTArray: true});\n        }\n        else if(this.mimeType === ImageMimeType.PNG && this.uri instanceof ArrayBuffer)\n        {\n            this.image = png.decode(this.uri);\n        }\n        else\n        {\n            console.error(\"Unsupported image type \" + this.mimeType);\n            return false;\n        }\n\n        return true;\n    }\n\n    async setImageFromBufferView(gltf)\n    {\n        const view = gltf.bufferViews[this.bufferView];\n        if (view === undefined)\n        {\n            return false;\n        }\n\n        const buffer = gltf.buffers[view.buffer].buffer;\n        const array = new Uint8Array(buffer, view.byteOffset, view.byteLength);\n        if (this.mimeType === ImageMimeType.KTX2)\n        {\n            if (gltf.ktxDecoder !== undefined)\n            {\n                this.image = await gltf.ktxDecoder.loadKtxFromBuffer(array);\n            }\n            else\n            {\n                console.warn('Loading of ktx images failed: KtxDecoder not initalized');\n            }\n        }\n        else if(typeof(Image) !== 'undefined' && (this.mimeType === ImageMimeType.JPEG || this.mimeType === ImageMimeType.PNG))\n        {\n            const blob = new Blob([array], { \"type\": this.mimeType });\n            const objectURL = URL.createObjectURL(blob);\n            this.image = await gltfImage.loadHTMLImage(objectURL).catch( () => {\n                console.error(\"Could not load image from buffer view\");\n            });\n        }\n        else if(this.mimeType === ImageMimeType.JPEG)\n        {\n            this.image = jpeg.decode(array, {useTArray: true});\n        }\n        else if(this.mimeType === ImageMimeType.PNG)\n        {\n            this.image = png.decode(array);\n        }\n        else\n        {\n            console.error(\"Unsupported image type \" + this.mimeType);\n            return false;\n        }\n\n        return true;\n    }\n\n    async setImageFromFiles(files, gltf)\n    {\n        if (this.uri === undefined || files === undefined)\n        {\n            return false;\n        }\n\n        let foundFile = files.find(function(file)\n        {\n            if (file.name === this.uri || file.fullPath === this.uri)\n            {\n                return true;\n            }\n        }, this);\n\n        if (foundFile === undefined)\n        {\n            return false;\n        }\n\n        if(this.mimeType === ImageMimeType.KTX2)\n        {\n            if (gltf.ktxDecoder !== undefined)\n            {\n                const data = new Uint8Array(await foundFile.arrayBuffer());\n                this.image = await gltf.ktxDecoder.loadKtxFromBuffer(data);\n            }\n            else\n            {\n                console.warn('Loading of ktx images failed: KtxDecoder not initalized');\n            }\n        }\n        else if (typeof(Image) !== 'undefined' && (this.mimeType === ImageMimeType.JPEG || this.mimeType === ImageMimeType.PNG))\n        {\n            const imageData = await AsyncFileReader.readAsDataURL(foundFile).catch( () => {\n                console.error(\"Could not load image with FileReader\");\n            });\n            this.image = await gltfImage.loadHTMLImage(imageData).catch( () => {\n                console.error(\"Could not create image from FileReader image data\");\n            });\n        }\n        else\n        {\n            console.error(\"Unsupported image type \" + this.mimeType);\n            return false;\n        }\n\n\n        return true;\n    }\n\n    shouldGenerateMips()\n    {\n        return (isPowerOf2(this.image.width) && isPowerOf2(this.image.height));\n    }\n}\n\nexport { gltfImage, ImageMimeType };\n\n","import { ImageMimeType } from \"../gltf/image\";\nimport { AnimationTimer } from \"../gltf/utils\";\n\nconst UserCameraIndex = \"orbit camera\";\n\nclass gltfRenderingParameters\n{\n    constructor(\n        environmentName = Object.keys(Environments)[0],\n        useIBL = true,\n        usePunctual = false,\n        exposure = 1.0,\n        clearColor = [50, 50, 50],\n        toneMap = ToneMaps.NONE,\n        debugOutput = DebugOutput.NONE)\n    {\n        this.environmentName = environmentName;\n        this.useIBL = useIBL;\n        this.usePunctual = usePunctual;\n        this.exposure = exposure;\n        this.clearColor = clearColor;\n        this.toneMap = toneMap;\n        this.debugOutput = debugOutput;\n        this.sceneIndex = 0;\n        this.cameraIndex = UserCameraIndex;\n        this.animationTimer = new AnimationTimer();\n        this.animationIndex = \"all\";\n        this.skinning = true;\n        this.morphing = true;\n    }\n\n    userCameraActive()\n    {\n        return this.cameraIndex === UserCameraIndex;\n    }\n}\n\nconst ToneMaps =\n{\n    NONE: \"None\",\n    ACES_FAST: \"ACES fast\",\n    ACES: \"ACES\"\n};\n\nconst DebugOutput =\n{\n    NONE: \"None\",\n    METALLIC: \"Metallic\",\n    ROUGHNESS: \"Roughness\",\n    NORMAL: \"Normal\",\n    WORLDSPACENORMAL: \"Worldspace Normal\",\n    GEOMETRYNORMAL: \"Geometry Normal\",\n    TANGENT: \"Tangent\",\n    BITANGENT: \"Bitangent\",\n    BASECOLOR: \"Base Color\",\n    OCCLUSION: \"Occlusion\",\n    EMISSIVE: \"Emissive\",\n    DIFFUSE: \"Diffuse\",\n    SPECULAR: \"Specular\",\n    CLEARCOAT: \"ClearCoat\",\n    SHEEN: \"Sheen\",\n    TRANSMISSION: \"Transmission\",\n    ALPHA: \"Alpha\",\n    F0: \"F0\"\n};\n\nconst Environments =\n{\n    \"Papermill Ruins E\": { folder: \"papermill\", mipLevel: 11, type: ImageMimeType.KTX2 },\n    \"Field\": { folder: \"field\", mipLevel: 11, type: ImageMimeType.KTX2 },\n    \"Courtyard of the Doge's palace\": { folder: \"doge2\", mipLevel: 11, type: ImageMimeType.KTX2 },\n    \"Pisa courtyard nearing sunset\": { folder: \"pisa\", mipLevel: 11, type: ImageMimeType.KTX2 },\n    \"Footprint Court\": { folder: \"footprint_court\", mipLevel: 11, type: ImageMimeType.KTX2 },\n    \"Helipad GoldenHour\": { folder: \"helipad\", mipLevel: 11, type: ImageMimeType.KTX2 },\n    \"Dining room of the Ennis-Brown House\": { folder: \"ennis\", mipLevel: 11, type: ImageMimeType.KTX2 },\n    \"Neutral\": { folder: \"neutral\", mipLevel: 11, type: ImageMimeType.KTX2 },\n    \"Directional\": { folder: \"directional\", mipLevel: 11, type: ImageMimeType.KTX2 },\n    \"Chromatic\": { folder: \"chromatic\", mipLevel: 11, type: ImageMimeType.KTX2 }\n};\n\nexport { UserCameraIndex, gltfRenderingParameters, Environments, ToneMaps, DebugOutput };\n","import { UserCamera } from '../gltf/user_camera.js';\nimport { ToneMaps, DebugOutput } from '../Renderer/rendering_parameters.js';\nimport { AnimationTimer } from '../gltf/utils.js';\n\nclass GltfState\n{\n    constructor()\n    {\n        this.gltf = undefined;\n        this.environment = undefined;\n        this.renderingParameters = {\n            morphing: true,\n            skinning: true,\n            clearColor: [58, 64, 74],\n            exposure: 1.0,\n            usePunctual: true,\n            useIBL: true,\n            toneMap: ToneMaps.LINEAR,\n            debugOutput: DebugOutput.NONE,\n            environmentBackground: false,\n            environmentRotation: 90.0 //+X = 0 +Z = 90 -X = 180 -Z = 270\n        };\n        this.userCamera = new UserCamera();\n        this.sceneIndex = 0;\n        this.cameraIndex = undefined;\n        this.animationIndices = [];\n        this.animationTimer = new AnimationTimer();\n        this.variant = undefined;\n    }\n}\n\nexport { GltfState };\n","import { UniformStruct } from '../gltf/utils.js';\nimport { GL } from './webgl.js';\n\nclass gltfShader\n{\n    constructor(program, hash, gl)\n    {\n        this.program = program;\n        this.hash = hash;\n        this.uniforms = new Map();\n        this.attributes = new Map();\n        this.unknownAttributes = [];\n        this.unknownUniforms = [];\n        this.gl = gl;\n\n        if(this.program !== undefined)\n        {\n            const uniformCount = this.gl.context.getProgramParameter(this.program, GL.ACTIVE_UNIFORMS);\n            for(let i = 0; i < uniformCount; ++i)\n            {\n                const info = this.gl.context.getActiveUniform(this.program, i);\n                const loc = this.gl.context.getUniformLocation(this.program, info.name);\n                this.uniforms.set(info.name, {type: info.type, loc: loc});\n            }\n\n            const attribCount = this.gl.context.getProgramParameter(this.program, GL.ACTIVE_ATTRIBUTES);\n            for(let i = 0; i < attribCount; ++i)\n            {\n                const info = this.gl.context.getActiveAttrib(this.program, i);\n                const loc = this.gl.context.getAttribLocation(this.program, info.name);\n                this.attributes.set(info.name, loc);\n            }\n        }\n    }\n\n    destroy()\n    {\n        if (this.program !== undefined)\n        {\n            this.deleteProgram(this.program);\n        }\n\n        this.program = undefined;\n    }\n\n    getAttributeLocation(name)\n    {\n        const loc = this.attributes.get(name);\n        if (loc === undefined)\n        {\n            if (this.unknownAttributes.find(n => n === name) === undefined)\n            {\n                console.log(\"Attribute '%s' does not exist\", name);\n                this.unknownAttributes.push(name);\n            }\n            return -1;\n        }\n        return loc;\n    }\n\n    getUniformLocation(name)\n    {\n        const uniform = this.uniforms.get(name);\n        if (uniform === undefined)\n        {\n            if (this.unknownUniforms.find(n => n === name) === undefined)\n            {\n                this.unknownUniforms.push(name);\n            }\n            return -1;\n        }\n        return uniform.loc;\n    }\n\n    updateUniform(objectName, object, log = true)\n    {\n        if (object instanceof UniformStruct)\n        {\n            this.updateUniformStruct(objectName, object, log);\n        }\n        else if (Array.isArray(object))\n        {\n            this.updateUniformArray(objectName, object, log);\n        }\n        else\n        {\n            this.updateUniformValue(objectName, object, log);\n        }\n    }\n\n    updateUniformArray(arrayName, array, log)\n    {\n        if(array[0] instanceof UniformStruct)\n        {\n            for (let i = 0; i < array.length; ++i)\n            {\n                let element = array[i];\n                let uniformName = arrayName + \"[\" + i + \"]\";\n                this.updateUniform(uniformName, element, log);\n            }\n        }else{\n            let uniformName = arrayName + \"[0]\";\n\n            let flat = [];\n\n            if(Array.isArray(array[0]) || array[0].length !== undefined)\n            {\n                for (let i = 0; i < array.length; ++i)\n                {\n                    flat.push.apply(flat, Array.from(array[i]));\n                }\n            }\n            else\n            {\n                flat = array;\n            }\n\n            if(flat.length === 0)\n            {\n                console.error(\"Failed to flatten uniform array \" + uniformName);\n                return;\n            }\n\n            this.updateUniformValue(uniformName, flat, log);\n        }\n    }\n\n    updateUniformStruct(structName, object, log)\n    {\n        let memberNames = Object.keys(object);\n        for (let memberName of memberNames)\n        {\n            let uniformName = structName + \".\" + memberName;\n            this.updateUniform(uniformName, object[memberName], log);\n        }\n    }\n\n    // upload the values of a uniform with the given name using type resolve to get correct function call\n    updateUniformValue(uniformName, value, log)\n    {\n        const uniform = this.uniforms.get(uniformName);\n\n        if(uniform !== undefined)\n        {\n            switch (uniform.type) {\n            case GL.FLOAT:\n            {\n                if(Array.isArray(value) || value instanceof Float32Array)\n                {\n                    this.gl.context.uniform1fv(uniform.loc, value);\n                }else{\n                    this.gl.context.uniform1f(uniform.loc, value);\n                }\n                break;\n            }\n            case GL.FLOAT_VEC2: this.gl.context.uniform2fv(uniform.loc, value); break;\n            case GL.FLOAT_VEC3: this.gl.context.uniform3fv(uniform.loc, value); break;\n            case GL.FLOAT_VEC4: this.gl.context.uniform4fv(uniform.loc, value); break;\n\n            case GL.INT:\n            {\n                if(Array.isArray(value) || value instanceof Uint32Array || value instanceof Int32Array)\n                {\n                    this.gl.context.uniform1iv(uniform.loc, value);\n                }else{\n                    this.gl.context.uniform1i(uniform.loc, value);\n                }\n                break;\n            }\n            case GL.INT_VEC2: this.gl.context.uniform2iv(uniform.loc, value); break;\n            case GL.INT_VEC3: this.gl.context.uniform3iv(uniform.loc, value); break;\n            case GL.INT_VEC4: this.gl.context.uniform4iv(uniform.loc, value); break;\n\n            case GL.FLOAT_MAT2: this.gl.context.uniformMatrix2fv(uniform.loc, false, value); break;\n            case GL.FLOAT_MAT3: this.gl.context.uniformMatrix3fv(uniform.loc, false, value); break;\n            case GL.FLOAT_MAT4: this.gl.context.uniformMatrix4fv(uniform.loc, false, value); break;\n            }\n        }\n        else if(log)\n        {\n            console.warn(\"Unkown uniform: \" + uniformName);\n        }\n    }\n}\n\nexport { gltfShader };\n","import { gltfShader } from './shader.js';\nimport { stringHash, combineHashes } from '../gltf/utils.js';\n\n// THis class generates and caches the shader source text for a given permutation\nclass ShaderCache\n{\n    constructor(sources, gl)\n    {\n        this.sources  = sources; // shader name -> source code\n        this.shaders  = new Map(); // name & permutations hashed -> compiled shader\n        this.programs = new Map(); // (vertex shader, fragment shader) -> program\n        this.gl = gl;\n\n        // resovle / expande sources (TODO: break include cycles)\n        for (let [key, src] of this.sources)\n        {\n            let changed = false;\n            for (let [includeName, includeSource] of this.sources)\n            {\n                //var pattern = RegExp(/#include</ + includeName + />/);\n                const pattern = \"#include <\" + includeName + \">\";\n\n                if(src.includes(pattern))\n                {\n                    // only replace the first occurance\n                    src = src.replace(pattern, includeSource);\n\n                    // remove the others\n                    while (src.includes(pattern))\n                    {\n                        src = src.replace(pattern, \"\");\n                    }\n\n                    changed = true;\n                }\n            }\n\n            if(changed)\n            {\n                this.sources.set(key, src);\n            }\n        }\n    }\n\n    destroy()\n    {\n        for (let [, shader] of this.shaders.entries())\n        {\n            this.gl.context.deleteShader(shader);\n            shader = undefined;\n        }\n\n        this.shaders.clear();\n\n        for (let [, program] of this.programs)\n        {\n            program.destroy();\n        }\n\n        this.programs.clear();\n    }\n\n    // example args: \"pbr.vert\", [\"NORMALS\", \"TANGENTS\"]\n    selectShader(shaderIdentifier, permutationDefines)\n    {\n        // first check shaders for the exact permutation\n        // if not present, check sources and compile it\n        // if not present, return null object\n\n        const src = this.sources.get(shaderIdentifier);\n        if(src === undefined)\n        {\n            console.log(\"Shader source for \" + shaderIdentifier + \" not found\");\n            return null;\n        }\n\n        const isVert = shaderIdentifier.endsWith(\".vert\");\n        let hash = stringHash(shaderIdentifier);\n\n        // console.log(shaderIdentifier);\n\n        let defines = \"#version 300 es\\n\";\n        for(let define of permutationDefines)\n        {\n            // console.log(define);\n            hash ^= stringHash(define);\n            defines += \"#define \" + define + \"\\n\";\n        }\n\n        let shader = this.shaders.get(hash);\n\n        if(shader === undefined)\n        {\n            // console.log(defines);\n            // compile this variant\n            shader = this.gl.compileShader(shaderIdentifier, isVert, defines + src);\n            this.shaders.set(hash, shader);\n        }\n\n        return hash;\n    }\n\n    getShaderProgram(vertexShaderHash, fragmentShaderHash)\n    {\n        const hash = combineHashes(vertexShaderHash, fragmentShaderHash);\n\n        let program = this.programs.get(hash);\n\n        if (program) // program already linked\n        {\n            return program;\n        }\n        else // link this shader program type!\n        {\n            let linkedProg = this.gl.linkProgram(this.shaders.get(vertexShaderHash), this.shaders.get(fragmentShaderHash));\n            if(linkedProg)\n            {\n                let program = new gltfShader(linkedProg, hash, this.gl);\n                this.programs.set(hash, program);\n                return program;\n            }\n        }\n\n        return undefined;\n    }\n}\n\nexport { ShaderCache };\n","import { mat4, mat3, vec3 } from 'gl-matrix';\nimport { ShaderCache } from './shader_cache.js';\nimport { ToneMaps, DebugOutput } from './rendering_parameters.js';\nimport { gltfWebGl, GL } from './webgl.js';\n\nimport pbrShader from './shaders/pbr.frag';\nimport brdfShader from './shaders/brdf.glsl';\nimport iblShader from './shaders/ibl.glsl';\nimport punctualShader from './shaders/punctual.glsl';\nimport primitiveShader from './shaders/primitive.vert';\nimport texturesShader from './shaders/textures.glsl';\nimport tonemappingShader from './shaders/tonemapping.glsl';\nimport shaderFunctions from './shaders/functions.glsl';\nimport animationShader from './shaders/animation.glsl';\n\nclass gltfRenderer\n{\n    constructor(context)\n    {\n        this.shader = undefined; // current shader\n\n        this.currentWidth = 0;\n        this.currentHeight = 0;\n\n        this.webGl = new gltfWebGl(context);\n\n        // create render target for non transmission materials\n        this.opaqueRenderTexture = 0;\n        this.opaqueFramebuffer = 0;\n        this.opaqueDepthTexture = 0;\n        this.opaqueFramebufferWidth = 1024;\n        this.opaqueFramebufferHeight = 1024;\n\n        const shaderSources = new Map();\n        shaderSources.set(\"primitive.vert\", primitiveShader);\n        shaderSources.set(\"pbr.frag\", pbrShader);\n        shaderSources.set(\"brdf.glsl\", brdfShader);\n        shaderSources.set(\"ibl.glsl\", iblShader);\n        shaderSources.set(\"punctual.glsl\", punctualShader);\n        shaderSources.set(\"tonemapping.glsl\", tonemappingShader);\n        shaderSources.set(\"textures.glsl\", texturesShader);\n        shaderSources.set(\"functions.glsl\", shaderFunctions);\n        shaderSources.set(\"animation.glsl\", animationShader);\n\n        this.shaderCache = new ShaderCache(shaderSources, this.webGl);\n\n        let requiredWebglExtensions = [\n            \"EXT_texture_filter_anisotropic\",\n            \"OES_texture_float_linear\"\n        ];\n\n        this.webGl.loadWebGlExtensions(requiredWebglExtensions);\n\n        this.visibleLights = [];\n\n        this.viewMatrix = mat4.create();\n        this.projMatrix = mat4.create();\n        this.viewProjectionMatrix = mat4.create();\n\n        this.currentCameraPosition = vec3.create();\n\n        this.init();\n    }\n\n    /////////////////////////////////////////////////////////////////////\n    // Render glTF scene graph\n    /////////////////////////////////////////////////////////////////////\n\n    // app state\n    init()\n    {\n        const context = this.webGl.context;\n        context.pixelStorei(GL.UNPACK_COLORSPACE_CONVERSION_WEBGL, GL.NONE);\n        context.enable(GL.DEPTH_TEST);\n        context.depthFunc(GL.LEQUAL);\n        context.colorMask(true, true, true, true);\n        context.clearDepth(1.0);\n\n        this.opaqueRenderTexture = context.createTexture();\n        context.bindTexture(context.TEXTURE_2D, this.opaqueRenderTexture);\n        context.texParameteri(context.TEXTURE_2D, context.TEXTURE_MIN_FILTER, context.LINEAR_MIPMAP_LINEAR);\n        context.texParameteri(context.TEXTURE_2D, context.TEXTURE_WRAP_S, context.CLAMP_TO_EDGE);\n        context.texParameteri(context.TEXTURE_2D, context.TEXTURE_WRAP_T, context.CLAMP_TO_EDGE);\n        context.texParameteri(context.TEXTURE_2D, context.TEXTURE_MAG_FILTER, context.NEAREST);\n        context.texImage2D( context.TEXTURE_2D,\n                            0,\n                            context.RGBA,\n                            this.opaqueFramebufferWidth,\n                            this.opaqueFramebufferHeight,\n                            0,\n                            context.RGBA,\n                            context.UNSIGNED_BYTE,\n                            null);\n        context.bindTexture(context.TEXTURE_2D, null);\n\n        this.opaqueDepthTexture = context.createTexture();\n        context.bindTexture(context.TEXTURE_2D, this.opaqueDepthTexture);\n        context.texParameteri(context.TEXTURE_2D, context.TEXTURE_MIN_FILTER, context.NEAREST);\n        context.texParameteri(context.TEXTURE_2D, context.TEXTURE_WRAP_S, context.CLAMP_TO_EDGE);\n        context.texParameteri(context.TEXTURE_2D, context.TEXTURE_WRAP_T, context.CLAMP_TO_EDGE);\n        context.texParameteri(context.TEXTURE_2D, context.TEXTURE_MAG_FILTER, context.NEAREST);\n        context.texImage2D( context.TEXTURE_2D,\n                            0,\n                            context.DEPTH_COMPONENT16,\n                            this.opaqueFramebufferWidth,\n                            this.opaqueFramebufferHeight,\n                            0,\n                            context.DEPTH_COMPONENT,\n                            context.UNSIGNED_SHORT,\n                            null);\n        context.bindTexture(context.TEXTURE_2D, null);\n\n        this.opaqueFramebuffer = context.createFramebuffer();\n        context.bindFramebuffer(context.FRAMEBUFFER, this.opaqueFramebuffer);\n        context.framebufferTexture2D(context.FRAMEBUFFER, context.COLOR_ATTACHMENT0, context.TEXTURE_2D, this.opaqueRenderTexture, 0);\n        context.framebufferTexture2D(context.FRAMEBUFFER, context.DEPTH_ATTACHMENT, context.TEXTURE_2D, this.opaqueDepthTexture, 0);\n        context.viewport(0, 0, this.currentWidth, this.currentHeight);\n        context.bindFramebuffer(context.FRAMEBUFFER, null);\n\n    }\n\n    resize(width, height)\n    {\n        if (this.currentWidth !== width || this.currentHeight !== height)\n        {\n            this.currentHeight = height;\n            this.currentWidth = width;\n            this.webGl.context.viewport(0, 0, width, height);\n        }\n    }\n\n    // frame state\n    clearFrame(clearColor)\n    {\n        this.webGl.context.bindFramebuffer(this.webGl.context.FRAMEBUFFER, null);\n        this.webGl.context.clearColor(clearColor[0] / 255.0, clearColor[1] / 255.0, clearColor[2] / 255.0, 1.0);\n        this.webGl.context.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n        this.webGl.context.bindFramebuffer(this.webGl.context.FRAMEBUFFER, this.opaqueFramebuffer);\n        this.webGl.context.clearColor(clearColor[0] / 255.0, clearColor[1] / 255.0, clearColor[2] / 255.0, 1.0);\n        this.webGl.context.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n        this.webGl.context.bindFramebuffer(this.webGl.context.FRAMEBUFFER, null);\n    }\n\n    // render complete gltf scene with given camera\n    drawScene(state, scene)\n    {\n        let currentCamera = undefined;\n\n        if (state.cameraIndex === undefined)\n        {\n            currentCamera = state.userCamera;\n        }\n        else\n        {\n            currentCamera = state.gltf.cameras[state.cameraIndex].clone();\n        }\n\n        currentCamera.aspectRatio = this.currentWidth / this.currentHeight;\n\n        this.projMatrix = currentCamera.getProjectionMatrix();\n        this.viewMatrix = currentCamera.getViewMatrix(state.gltf);\n        this.currentCameraPosition = currentCamera.getPosition(state.gltf);\n\n        this.visibleLights = this.getVisibleLights(state.gltf, scene);\n\n        mat4.multiply(this.viewProjectionMatrix, this.projMatrix, this.viewMatrix);\n\n        const nodes = scene.gatherNodes(state.gltf);\n\n        // Update skins.\n        for (const node of nodes)\n        {\n            if (node.mesh !== undefined && node.skin !== undefined)\n            {\n                this.updateSkin(state, node);\n            }\n        }\n\n        // collect drawables by essentially zipping primitives (for geometry and material)\n        // and nodes for the transform\n        const drawables = nodes\n            .filter(node => node.mesh !== undefined)\n            .reduce((acc, node) => acc.concat(state.gltf.meshes[node.mesh].primitives.map( primitive => {\n                return  {node: node, primitive: primitive};\n            })), [])\n            .filter(({node, primitive}) => primitive.material !== undefined);\n\n        // opaque drawables don't need sorting\n        const opaqueDrawables = drawables\n            .filter(({node, primitive}) => state.gltf.materials[primitive.material].alphaMode !== \"BLEND\"\n                && (state.gltf.materials[primitive.material].extensions === undefined\n                    || state.gltf.materials[primitive.material].extensions.KHR_materials_transmission === undefined));\n\n        // transparent drawables need sorting before they can be drawn\n        let transparentDrawables = drawables\n            .filter(({node, primitive}) => state.gltf.materials[primitive.material].alphaMode === \"BLEND\"\n                && (state.gltf.materials[primitive.material].extensions === undefined\n                    || state.gltf.materials[primitive.material].extensions.KHR_materials_transmission === undefined));\n        transparentDrawables = currentCamera.sortPrimitivesByDepth(state.gltf, transparentDrawables);\n\n        // Render transmission sample texture\n        this.webGl.context.bindFramebuffer(this.webGl.context.FRAMEBUFFER, this.opaqueFramebuffer);\n\n        this.webGl.context.viewport(0, 0, this.opaqueFramebufferWidth, this.opaqueFramebufferHeight);\n        for (const drawable of opaqueDrawables)\n        {\n            this.drawPrimitive(state, drawable.primitive, drawable.node, this.viewProjectionMatrix);\n        }\n        for (const drawable of transparentDrawables)\n        {\n            this.drawPrimitive(state, drawable.primitive, drawable.node, this.viewProjectionMatrix);\n        }\n\n        //Reset Viewport\n        this.webGl.context.viewport(0, 0,  this.currentWidth, this.currentHeight);\n\n        //Create Framebuffer Mipmaps\n        this.webGl.context.bindTexture(this.webGl.context.TEXTURE_2D, this.opaqueRenderTexture);\n        this.webGl.context.generateMipmap(this.webGl.context.TEXTURE_2D);\n\n        // Render to canvas\n        this.webGl.context.bindFramebuffer(this.webGl.context.FRAMEBUFFER, null);\n        for (const drawable of opaqueDrawables)\n        {\n            this.drawPrimitive(state, drawable.primitive, drawable.node, this.viewProjectionMatrix);\n        }\n        for (const drawable of transparentDrawables)\n        {\n            this.drawPrimitive(state, drawable.primitive, drawable.node, this.viewProjectionMatrix);\n        }\n\n        // filter materials with transmission extension\n        let transmissionDrawables = drawables\n            .filter(({node, primitive}) => state.gltf.materials[primitive.material].extensions !== undefined\n                && state.gltf.materials[primitive.material].extensions.KHR_materials_transmission !== undefined);\n        transmissionDrawables = currentCamera.sortPrimitivesByDepth(state.gltf, transmissionDrawables);\n        for (const drawable of transmissionDrawables)\n        {\n            this.drawPrimitive(state, drawable.primitive, drawable.node, this.viewProjectionMatrix, this.opaqueRenderTexture);\n        }\n    }\n\n    // vertices with given material\n    drawPrimitive(state, primitive, node, viewProjectionMatrix, transmissionSampleTexture)\n    {\n        if (primitive.skip) return;\n\n        let material;\n        if(primitive.mappings !== undefined && state.variant != \"default\")\n        {\n            const names = state.gltf.variants.map(obj => obj.name);\n            const idx = names.indexOf(state.variant);\n            let materialIdx = primitive.material;\n            primitive.mappings.forEach(element => {\n                if(element.variants.indexOf(idx) >= 0)\n                {\n                    materialIdx = element.material;\n                }\n            });\n            material = state.gltf.materials[materialIdx];\n        }\n        else\n        {\n            material = state.gltf.materials[primitive.material];\n        }\n\n        //select shader permutation, compile and link program.\n\n        let vertDefines = [];\n        this.pushVertParameterDefines(vertDefines, state.renderingParameters, state.gltf, node, primitive);\n        vertDefines = primitive.getDefines().concat(vertDefines);\n\n        let fragDefines = material.getDefines().concat(vertDefines);\n        this.pushFragParameterDefines(fragDefines, state);\n\n        const fragmentHash = this.shaderCache.selectShader(material.getShaderIdentifier(), fragDefines);\n        const vertexHash = this.shaderCache.selectShader(primitive.getShaderIdentifier(), vertDefines);\n\n        if (fragmentHash && vertexHash)\n        {\n            this.shader = this.shaderCache.getShaderProgram(fragmentHash, vertexHash);\n        }\n\n        if (this.shader === undefined)\n        {\n            return;\n        }\n\n        this.webGl.context.useProgram(this.shader.program);\n\n        if (state.renderingParameters.usePunctual)\n        {\n            this.applyLights(state.gltf);\n        }\n\n        // update model dependant matrices once per node\n        this.shader.updateUniform(\"u_ViewProjectionMatrix\", viewProjectionMatrix);\n        this.shader.updateUniform(\"u_ModelMatrix\", node.worldTransform);\n        this.shader.updateUniform(\"u_NormalMatrix\", node.normalMatrix, false);\n        this.shader.updateUniform(\"u_Exposure\", state.renderingParameters.exposure, false);\n        this.shader.updateUniform(\"u_Camera\", this.currentCameraPosition, false);\n\n        this.updateAnimationUniforms(state, node, primitive);\n\n        if (mat4.determinant(node.worldTransform) < 0.0)\n        {\n            this.webGl.context.frontFace(GL.CW);\n        }\n        else\n        {\n            this.webGl.context.frontFace(GL.CCW);\n        }\n\n        if (material.doubleSided)\n        {\n            this.webGl.context.disable(GL.CULL_FACE);\n        }\n        else\n        {\n            this.webGl.context.enable(GL.CULL_FACE);\n        }\n\n        if (material.alphaMode === 'BLEND')\n        {\n            this.webGl.context.enable(GL.BLEND);\n            this.webGl.context.blendFuncSeparate(GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA, GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA);\n            this.webGl.context.blendEquation(GL.FUNC_ADD);\n        }\n        else\n        {\n            this.webGl.context.disable(GL.BLEND);\n        }\n\n        const drawIndexed = primitive.indices !== undefined;\n        if (drawIndexed)\n        {\n            if (!this.webGl.setIndices(state.gltf, primitive.indices))\n            {\n                return;\n            }\n        }\n\n        let vertexCount = 0;\n        for (const attribute of primitive.glAttributes)\n        {\n            const gltfAccessor = state.gltf.accessors[attribute.accessor];\n            vertexCount = gltfAccessor.count;\n\n            const location = this.shader.getAttributeLocation(attribute.name);\n            if (location < 0)\n            {\n                continue; // only skip this attribute\n            }\n            if (!this.webGl.enableAttribute(state.gltf, location, gltfAccessor))\n            {\n                return; // skip this primitive\n            }\n        }\n\n        for (let [uniform, val] of material.getProperties().entries())\n        {\n            this.shader.updateUniform(uniform, val);\n        }\n\n        for (let i = 0; i < material.textures.length; ++i)\n        {\n            let info = material.textures[i];\n            const location = this.shader.getUniformLocation(info.samplerName);\n            if (location < 0)\n            {\n                continue; // only skip this texture\n            }\n            if (!this.webGl.setTexture(location, state.gltf, info, i)) // binds texture and sampler\n            {\n                return; // skip this material\n            }\n        }\n\n        let textureCount = material.textures.length;\n        if (state.renderingParameters.useIBL && state.environment !== undefined)\n        {\n            textureCount = this.applyEnvironmentMap(state, textureCount);\n        }\n\n        if (state.renderingParameters.usePunctual && state.environment !== undefined)\n        {\n            this.webGl.setTexture(this.shader.getUniformLocation(\"u_SheenELUT\"), state.gltf, state.environment.sheenELUT, textureCount++);\n        }\n\n        if(transmissionSampleTexture !== undefined && state.renderingParameters.useIBL && state.environment)\n        {\n            this.webGl.context.activeTexture(GL.TEXTURE0 + textureCount);\n            this.webGl.context.bindTexture(this.webGl.context.TEXTURE_2D, this.opaqueRenderTexture);\n            this.webGl.context.uniform1i(this.shader.getUniformLocation(\"u_TransmissionFramebufferSampler\"), textureCount);\n            textureCount++;\n\n            this.webGl.context.uniform2i(this.shader.getUniformLocation(\"u_ScreenSize\"), this.currentWidth, this.currentHeight);\n            this.webGl.context.uniform2i(this.shader.getUniformLocation(\"u_TransmissionFramebufferSize\"), this.opaqueFramebufferWidth, this.opaqueFramebufferHeight);\n        }\n\n        if (drawIndexed)\n        {\n            const indexAccessor = state.gltf.accessors[primitive.indices];\n            this.webGl.context.drawElements(primitive.mode, indexAccessor.count, indexAccessor.componentType, 0);\n        }\n        else\n        {\n            this.webGl.context.drawArrays(primitive.mode, 0, vertexCount);\n        }\n\n        for (const attribute of primitive.glAttributes)\n        {\n            const location = this.shader.getAttributeLocation(attribute.name);\n            if (location < 0)\n            {\n                continue; // skip this attribute\n            }\n            this.webGl.context.disableVertexAttribArray(location);\n        }\n    }\n\n    // returns all lights that are relevant for rendering or the default light if there are none\n    getVisibleLights(gltf, scene)\n    {\n        let lights = [];\n        for (let light of gltf.lights)\n        {\n            if (light.node !== undefined)\n            {\n                if (scene.includesNode(gltf, light.node))\n                {\n                    lights.push(light);\n                }\n            }\n        }\n        return lights;\n    }\n\n    updateSkin(state, node)\n    {\n        if (state.renderingParameters.skinning && state.gltf.skins !== undefined)\n        {\n            const skin = state.gltf.skins[node.skin];\n            skin.computeJoints(state.gltf, node);\n        }\n    }\n\n    pushVertParameterDefines(vertDefines, parameters, gltf, node, primitive)\n    {\n        // skinning\n        if (parameters.skinning && node.skin !== undefined && primitive.hasWeights && primitive.hasJoints)\n        {\n            const skin = gltf.skins[node.skin];\n\n            vertDefines.push(\"USE_SKINNING 1\");\n            vertDefines.push(\"JOINT_COUNT \" + skin.jointMatrices.length);\n        }\n\n        // morphing\n        if (parameters.morphing && node.mesh !== undefined && primitive.targets.length > 0)\n        {\n            const mesh = gltf.meshes[node.mesh];\n            if (mesh.weights !== undefined && mesh.weights.length > 0)\n            {\n                vertDefines.push(\"USE_MORPHING 1\");\n                vertDefines.push(\"WEIGHT_COUNT \" + Math.min(mesh.weights.length, 8));\n            }\n        }\n    }\n\n    updateAnimationUniforms(state, node, primitive)\n    {\n        if (state.renderingParameters.skinning && node.skin !== undefined && primitive.hasWeights && primitive.hasJoints)\n        {\n            const skin = state.gltf.skins[node.skin];\n\n            this.shader.updateUniform(\"u_jointMatrix\", skin.jointMatrices);\n            if(primitive.hasNormals)\n            {\n                this.shader.updateUniform(\"u_jointNormalMatrix\", skin.jointNormalMatrices);\n            }\n        }\n\n        if (state.renderingParameters.morphing && node.mesh !== undefined && primitive.targets.length > 0)\n        {\n            const mesh = state.gltf.meshes[node.mesh];\n            if (mesh.weights !== undefined && mesh.weights.length > 0)\n            {\n                this.shader.updateUniformArray(\"u_morphWeights\", mesh.weights);\n            }\n        }\n    }\n\n    pushFragParameterDefines(fragDefines, state)\n    {\n        if (state.renderingParameters.usePunctual)\n        {\n            fragDefines.push(\"USE_PUNCTUAL 1\");\n            fragDefines.push(\"LIGHT_COUNT \" + this.visibleLights.length);\n        }\n\n        if (state.renderingParameters.useIBL && state.environment)\n        {\n            fragDefines.push(\"USE_IBL 1\");\n        }\n\n        switch (state.renderingParameters.toneMap)\n        {\n        case (ToneMaps.ACES_FAST):\n            fragDefines.push(\"TONEMAP_ACES_FAST 1\");\n            break;\n        case (ToneMaps.ACES):\n            fragDefines.push(\"TONEMAP_ACES 1\");\n            break;\n        case (ToneMaps.NONE):\n        default:\n            break;\n        }\n\n        if (state.renderingParameters.debugOutput !== DebugOutput.NONE)\n        {\n            fragDefines.push(\"DEBUG_OUTPUT 1\");\n        }\n\n        switch (state.renderingParameters.debugOutput)\n        {\n        case (DebugOutput.METALLIC):\n            fragDefines.push(\"DEBUG_METALLIC 1\");\n            break;\n        case (DebugOutput.ROUGHNESS):\n            fragDefines.push(\"DEBUG_ROUGHNESS 1\");\n            break;\n        case (DebugOutput.NORMAL):\n            fragDefines.push(\"DEBUG_NORMAL 1\");\n            break;\n        case (DebugOutput.WORLDSPACENORMAL):\n            fragDefines.push(\"DEBUG_WORLDSPACE_NORMAL 1\");\n            break;\n        case (DebugOutput.GEOMETRYNORMAL):\n            fragDefines.push(\"DEBUG_GEOMETRY_NORMAL 1\");\n            break;\n        case (DebugOutput.TANGENT):\n            fragDefines.push(\"DEBUG_TANGENT 1\");\n            break;\n        case (DebugOutput.BITANGENT):\n            fragDefines.push(\"DEBUG_BITANGENT 1\");\n            break;\n        case (DebugOutput.BASECOLOR):\n            fragDefines.push(\"DEBUG_BASECOLOR 1\");\n            break;\n        case (DebugOutput.OCCLUSION):\n            fragDefines.push(\"DEBUG_OCCLUSION 1\");\n            break;\n        case (DebugOutput.EMISSIVE):\n            fragDefines.push(\"DEBUG_FEMISSIVE 1\");\n            break;\n        case (DebugOutput.SPECULAR):\n            fragDefines.push(\"DEBUG_FSPECULAR 1\");\n            break;\n        case (DebugOutput.DIFFUSE):\n            fragDefines.push(\"DEBUG_FDIFFUSE 1\");\n            break;\n        case (DebugOutput.THICKNESS):\n            fragDefines.push(\"DEBUG_THICKNESS 1\");\n            break;\n        case (DebugOutput.CLEARCOAT):\n            fragDefines.push(\"DEBUG_FCLEARCOAT 1\");\n            break;\n        case (DebugOutput.SHEEN):\n            fragDefines.push(\"DEBUG_FSHEEN 1\");\n            break;\n        case (DebugOutput.SUBSURFACE):\n            fragDefines.push(\"DEBUG_FSUBSURFACE 1\");\n            break;\n        case (DebugOutput.TRANSMISSION):\n            fragDefines.push(\"DEBUG_FTRANSMISSION 1\");\n            break;\n        case (DebugOutput.F0):\n            fragDefines.push(\"DEBUG_F0 1\");\n            break;\n        case (DebugOutput.ALPHA):\n            fragDefines.push(\"DEBUG_ALPHA 1\");\n            break;\n        }\n    }\n\n    applyLights(gltf)\n    {\n        let uniformLights = [];\n        for (let light of this.visibleLights)\n        {\n            uniformLights.push(light.toUniform(gltf));\n        }\n\n        if (uniformLights.length > 0)\n        {\n            this.shader.updateUniform(\"u_Lights\", uniformLights);\n        }\n    }\n\n    applyEnvironmentMap(state, texSlotOffset)\n    {\n        const environment = state.environment;\n        this.webGl.setTexture(this.shader.getUniformLocation(\"u_LambertianEnvSampler\"), environment, environment.diffuseEnvMap, texSlotOffset++);\n\n        this.webGl.setTexture(this.shader.getUniformLocation(\"u_GGXEnvSampler\"), environment, environment.specularEnvMap, texSlotOffset++);\n        this.webGl.setTexture(this.shader.getUniformLocation(\"u_GGXLUT\"), environment, environment.lut, texSlotOffset++);\n\n        this.webGl.setTexture(this.shader.getUniformLocation(\"u_CharlieEnvSampler\"), environment, environment.sheenEnvMap, texSlotOffset++);\n        this.webGl.setTexture(this.shader.getUniformLocation(\"u_CharlieLUT\"), environment, environment.sheenLUT, texSlotOffset++);\n\n        this.shader.updateUniform(\"u_MipCount\", environment.mipCount);\n\n        let rotMatrix4 = mat4.create();\n        mat4.rotateY(rotMatrix4, rotMatrix4,  state.renderingParameters.environmentRotation / 180.0 * Math.PI);\n        let rotMatrix3 = mat3.create();\n        mat3.fromMat4(rotMatrix3, rotMatrix4);\n        this.shader.updateUniform(\"u_envRotation\", rotMatrix3);\n\n        return texSlotOffset;\n    }\n\n    destroy()\n    {\n        this.shaderCache.destroy();\n    }\n}\n\nexport { gltfRenderer };\n","import { GltfState } from '../GltfState/gltf_state.js';\nimport { gltfRenderer } from '../Renderer/renderer.js';\nimport { GL } from '../Renderer/webgl.js';\n\nclass GltfView\n{\n    constructor(context, ui)\n    {\n        this.ui = ui;\n        this.context = context;\n        this.renderer = new gltfRenderer(this.context);\n    }\n\n    createState()\n    {\n        return new GltfState();\n    }\n\n    updateCanvas(canvas)\n    {\n        if(this.ui !== undefined)\n        {\n            canvas.width = window.innerWidth - this.ui.getBoundingClientRect().width;\n        }\n        else\n        {\n            canvas.width = canvas.clientWidth;\n        }\n        canvas.height = canvas.clientHeight;\n    }\n    \n    updateViewport(width, height)\n    {\n        this.renderer.resize(width, height);\n    }\n    \n    renderFrame(state)\n    {\n\n        this.renderer.clearFrame(state.renderingParameters.clearColor);\n\n        if(state.gltf === undefined)\n        {\n            return;\n        }\n\n        const scene = state.gltf.scenes[state.sceneIndex];\n\n        scene.applyTransformHierarchy(state.gltf);\n\n        this.renderer.drawScene(state, scene);\n    }\n    animate(state)\n    {\n        if(state.gltf === undefined)\n        {\n            return;\n        }\n\n        if(state.gltf.animations !== undefined && state.animationIndices !== undefined && !state.animationTimer.paused)\n        {\n            const t = state.animationTimer.elapsedSec();\n\n            const animations = state.animationIndices.map(index => {\n                return state.gltf.animations[index];\n            }).filter(animation => animation !== undefined);\n\n            for(const animation of animations)\n            {\n                animation.advance(state.gltf, t);\n            }\n        }\n    }\n\n    // gatherStatistics collects information about the GltfState such as the number of rendererd meshes or triangles\n    gatherStatistics(state)\n    {\n        if(state.gltf === undefined)\n        {\n            return;\n        }\n\n        // gather information from the active scene\n        const scene = state.gltf.scenes[state.sceneIndex];\n        const nodes = scene.gatherNodes(state.gltf);\n        const activeMeshes = nodes.filter(node => node.mesh !== undefined).map(node => state.gltf.meshes[node.mesh]);\n        const activePrimitives = activeMeshes\n            .reduce((acc, mesh) => acc.concat(mesh.primitives), [])\n            .filter(primitive => primitive.material !== undefined);\n        const activeMaterials = [... new Set(activePrimitives.map(primitive => state.gltf.materials[primitive.material]))];\n        const opaqueMaterials = activeMaterials.filter(material => material.alphaMode !== \"BLEND\");\n        const transparentMaterials = activeMaterials.filter(material => material.alphaMode === \"BLEND\");\n        const faceCount = activePrimitives\n            .map(primitive => {\n                const verticesCount = state.gltf.accessors[primitive.indices].count;\n                if (verticesCount === 0)\n                {\n                    return 0;\n                }\n\n                // convert vertex count to point, line or triangle count\n                switch (primitive.mode) {\n                case GL.POINTS:\n                    return verticesCount;\n                case GL.LINES:\n                    return verticesCount / 2;\n                case GL.LINE_LOOP:\n                    return verticesCount;\n                case GL.LINE_STRIP:\n                    return verticesCount - 1;\n                case GL.TRIANGLES:\n                    return verticesCount / 3;\n                case GL.TRIANGLE_STRIP:\n                case GL.TRIANGLE_FAN:\n                    return verticesCount - 2;\n                }\n            })\n            .reduce((acc, faceCount) => acc += faceCount);\n\n        // assemble statistics object\n        return {\n            meshCount: activeMeshes.length,\n            faceCount: faceCount,\n            opaqueMaterialsCount: opaqueMaterials.length,\n            transparentMaterialsCount: transparentMaterials.length\n        };\n    }\n\n    async startRendering(state, canvas)\n    {\n        const update = () =>\n        {\n            this.animate(state);\n            this.updateCanvas(canvas);\n            this.updateViewport(canvas.width, canvas.height);\n            this.renderFrame(state);\n            window.requestAnimationFrame(update);\n        };\n\n        // After this start executing render loop.\n        window.requestAnimationFrame(update);\n    }\n}\n\nexport { GltfView };\n","import { GL } from '../Renderer/webgl.js';\nimport { GltfObject } from './gltf_object.js';\n\nclass gltfAccessor extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.bufferView = undefined;\n        this.byteOffset = 0;\n        this.componentType = undefined;\n        this.normalized = false;\n        this.count = undefined;\n        this.type = undefined;\n        this.max = undefined;\n        this.min = undefined;\n        this.sparse = undefined;\n        this.name = undefined;\n\n        // non gltf\n        this.glBuffer = undefined;\n        this.typedView = undefined;\n        this.filteredView = undefined;\n    }\n\n    getTypedView(gltf)\n    {\n        if (this.typedView !== undefined)\n        {\n            return this.typedView;\n        }\n\n        if (this.bufferView !== undefined)\n        {\n            const bufferView = gltf.bufferViews[this.bufferView];\n            const buffer = gltf.buffers[bufferView.buffer];\n            const byteOffset = this.byteOffset + bufferView.byteOffset;\n\n            const componentSize = this.getComponentSize(this.componentType);\n            let componentCount = this.getComponentCount(this.type);\n\n            let arrayLength = 0;\n            if(bufferView.byteStride !== 0)\n            {\n                if (componentSize !== 0)\n                {\n                    arrayLength = bufferView.byteStride / componentSize * (this.count - 1) + componentCount;\n                }\n                else\n                {\n                    console.warn(\"Invalid component type in accessor '\" + (this.name ? this.name : \"\") + \"'\");\n                }\n            }\n            else\n            {\n                arrayLength = this.count * componentCount;\n            }\n\n            if (arrayLength * componentSize > buffer.buffer.byteLength - byteOffset)\n            {\n                arrayLength = (buffer.buffer.byteLength - byteOffset) / componentSize;\n                console.warn(\"Count in accessor '\" + (this.name ? this.name : \"\") + \"' is too large.\");\n            }\n\n            switch (this.componentType)\n            {\n            case GL.BYTE:\n                this.typedView = new Int8Array(buffer.buffer, byteOffset, arrayLength);\n                break;\n            case GL.UNSIGNED_BYTE:\n                this.typedView = new Uint8Array(buffer.buffer, byteOffset, arrayLength);\n                break;\n            case GL.SHORT:\n                this.typedView = new Int16Array(buffer.buffer, byteOffset, arrayLength);\n                break;\n            case GL.UNSIGNED_SHORT:\n                this.typedView = new Uint16Array(buffer.buffer, byteOffset, arrayLength);\n                break;\n            case GL.UNSIGNED_INT:\n                this.typedView = new Uint32Array(buffer.buffer, byteOffset, arrayLength);\n                break;\n            case GL.FLOAT:\n                this.typedView = new Float32Array(buffer.buffer, byteOffset, arrayLength);\n                break;\n            }\n        }\n\n        if (this.typedView === undefined)\n        {\n            console.warn(\"Failed to convert buffer view to typed view!: \" + this.bufferView);\n        }\n        else if (this.sparse !== undefined)\n        {\n            this.applySparse(gltf, this.typedView);\n        }\n\n        return this.typedView;\n    }\n\n    getDeinterlacedView(gltf)\n    {\n        if (this.filteredView !== undefined)\n        {\n            return this.filteredView;\n        }\n\n        if (this.bufferView !== undefined)\n        {\n            const bufferView = gltf.bufferViews[this.bufferView];\n            const buffer = gltf.buffers[bufferView.buffer];\n            const byteOffset = this.byteOffset + bufferView.byteOffset;\n\n            const componentSize = this.getComponentSize(this.componentType);\n            const componentCount = this.getComponentCount(this.type);\n            const arrayLength = this.count * componentCount;\n\n            let stride = bufferView.byteStride !== 0 ? bufferView.byteStride : componentCount * componentSize;\n            let dv = new DataView(buffer.buffer, byteOffset, this.count * stride);\n\n            let func = 'getFloat32';\n            switch (this.componentType)\n            {\n            case GL.BYTE:\n                this.filteredView = new Int8Array(arrayLength);\n                func = 'getInt8';\n                break;\n            case GL.UNSIGNED_BYTE:\n                this.filteredView = new Uint8Array(arrayLength);\n                func = 'getUint8';\n                break;\n            case GL.SHORT:\n                this.filteredView = new Int16Array(arrayLength);\n                func = 'getInt16';\n                break;\n            case GL.UNSIGNED_SHORT:\n                this.filteredView = new Uint16Array(arrayLength);\n                func = 'getUint16';\n                break;\n            case GL.UNSIGNED_INT:\n                this.filteredView = new Uint32Array(arrayLength);\n                func = 'getUint32';\n                break;\n            case GL.FLOAT:\n                this.filteredView = new Float32Array(arrayLength);\n                func = 'getFloat32';\n                break;\n            }\n\n            for(let i = 0; i < arrayLength; ++i)\n            {\n                let offset = Math.floor(i/componentCount) * stride + (i % componentCount) * componentSize;\n                this.filteredView[i] = dv[func](offset, true);\n            }\n        }\n\n        if (this.filteredView === undefined)\n        {\n            console.warn(\"Failed to convert buffer view to filtered view!: \" + this.bufferView);\n        }\n        else if (this.sparse !== undefined)\n        {\n            this.applySparse(gltf, this.filteredView);\n        }\n\n        return this.filteredView;\n    }\n\n    applySparse(gltf, view)\n    {\n        // Gather indices.\n\n        const indicesBufferView = gltf.bufferViews[this.sparse.indices.bufferView];\n        const indicesBuffer = gltf.buffers[indicesBufferView.buffer];\n        const indicesByteOffset = this.sparse.indices.byteOffset + indicesBufferView.byteOffset;\n\n        const indicesComponentSize = this.getComponentSize(this.sparse.indices.componentType);\n        let indicesComponentCount = 1;\n\n        if(indicesBufferView.byteStride !== 0)\n        {\n            indicesComponentCount = indicesBufferView.byteStride / indicesComponentSize;\n        }\n\n        const indicesArrayLength = this.sparse.count * indicesComponentCount;\n\n        let indicesTypedView;\n        switch (this.sparse.indices.componentType)\n        {\n        case GL.UNSIGNED_BYTE:\n            indicesTypedView = new Uint8Array(indicesBuffer.buffer, indicesByteOffset, indicesArrayLength);\n            break;\n        case GL.UNSIGNED_SHORT:\n            indicesTypedView = new Uint16Array(indicesBuffer.buffer, indicesByteOffset, indicesArrayLength);\n            break;\n        case GL.UNSIGNED_INT:\n            indicesTypedView = new Uint32Array(indicesBuffer.buffer, indicesByteOffset, indicesArrayLength);\n            break;\n        }\n\n        // Gather values.\n\n        const valuesBufferView = gltf.bufferViews[this.sparse.values.bufferView];\n        const valuesBuffer = gltf.buffers[valuesBufferView.buffer];\n        const valuesByteOffset = this.sparse.values.byteOffset + valuesBufferView.byteOffset;\n\n        const valuesComponentSize = this.getComponentSize(this.componentType);\n        let valuesComponentCount = this.getComponentCount(this.type);\n\n        if(valuesBufferView.byteStride !== 0)\n        {\n            valuesComponentCount = valuesBufferView.byteStride / valuesComponentSize;\n        }\n\n        const valuesArrayLength = this.sparse.count * valuesComponentCount;\n\n        let valuesTypedView;\n        switch (this.componentType)\n        {\n        case GL.BYTE:\n            valuesTypedView = new Int8Array(valuesBuffer.buffer, valuesByteOffset, valuesArrayLength);\n            break;\n        case GL.UNSIGNED_BYTE:\n            valuesTypedView = new Uint8Array(valuesBuffer.buffer, valuesByteOffset, valuesArrayLength);\n            break;\n        case GL.SHORT:\n            valuesTypedView = new Int16Array(valuesBuffer.buffer, valuesByteOffset, valuesArrayLength);\n            break;\n        case GL.UNSIGNED_SHORT:\n            valuesTypedView = new Uint16Array(valuesBuffer.buffer, valuesByteOffset, valuesArrayLength);\n            break;\n        case GL.UNSIGNED_INT:\n            valuesTypedView = new Uint32Array(valuesBuffer.buffer, valuesByteOffset, valuesArrayLength);\n            break;\n        case GL.FLOAT:\n            valuesTypedView = new Float32Array(valuesBuffer.buffer, valuesByteOffset, valuesArrayLength);\n            break;\n        }\n\n        // Overwrite values.\n\n        for(let i = 0; i < this.sparse.count; ++i)\n        {\n            for(let k = 0; k < valuesComponentCount; ++k)\n            {\n                view[indicesTypedView[i] * valuesComponentCount + k] = valuesTypedView[i * valuesComponentCount + k];\n            }\n        }\n    }\n\n    getComponentCount(type)\n    {\n        return CompononentCount.get(type);\n    }\n\n    getComponentSize(componentType)\n    {\n        switch (componentType)\n        {\n        case GL.BYTE:\n        case GL.UNSIGNED_BYTE:\n            return 1;\n        case GL.SHORT:\n        case GL.UNSIGNED_SHORT:\n            return 2;\n        case GL.UNSIGNED_INT:\n        case GL.FLOAT:\n            return 4;\n        default:\n            return 0;\n        }\n    }\n\n    destroy()\n    {\n        if (this.glBuffer !== undefined)\n        {\n            // TODO: this breaks the dependency direction\n            WebGl.context.deleteBuffer(this.glBuffer);\n        }\n\n        this.glBuffer = undefined;\n    }\n}\n\nconst CompononentCount = new Map(\n    [\n        [\"SCALAR\", 1],\n        [\"VEC2\", 2],\n        [\"VEC3\", 3],\n        [\"VEC4\", 4],\n        [\"MAT2\", 4],\n        [\"MAT3\", 9],\n        [\"MAT4\", 16]\n    ]\n);\n\nexport { gltfAccessor };\n","import axios from 'axios';\nimport { getContainingFolder } from './utils.js';\nimport { GltfObject } from './gltf_object.js';\n\nclass gltfBuffer extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.uri = undefined;\n        this.byteLength = undefined;\n        this.name = undefined;\n\n        // non gltf\n        this.buffer = undefined; // raw data blob\n    }\n\n    load(gltf, additionalFiles = undefined)\n    {\n        if (this.buffer !== undefined)\n        {\n            console.error(\"buffer has already been loaded\");\n            return;\n        }\n\n        const self = this;\n        return new Promise(function(resolve)\n        {\n            if (!self.setBufferFromFiles(additionalFiles, resolve) &&\n                !self.sefBufferFromUri(gltf, resolve))\n            {\n                console.error(\"Was not able to resolve buffer with uri '%s'\", self.uri);\n                resolve();\n            }\n        });\n    }\n\n    sefBufferFromUri(gltf, callback)\n    {\n        if (this.uri === undefined)\n        {\n            return false;\n        }\n\n        const self = this;\n        axios.get(getContainingFolder(gltf.path) + this.uri, { responseType: 'arraybuffer'})\n            .then(function(response)\n            {\n                self.buffer = response.data;\n                callback();\n            });\n        return true;\n    }\n\n    setBufferFromFiles(files, callback)\n    {\n        if (this.uri === undefined || files === undefined)\n        {\n            return false;\n        }\n\n        const foundFile = files.find(function(file)\n        {\n            if (file.name === this.uri || file.fullPath === this.uri)\n            {\n                return true;\n            }\n        }, this);\n\n        if (foundFile === undefined)\n        {\n            return false;\n        }\n\n        const self = this;\n        const reader = new FileReader();\n        reader.onloadend = function(event)\n        {\n            self.buffer = event.target.result;\n            callback();\n        };\n        reader.readAsArrayBuffer(foundFile);\n\n        return true;\n    }\n}\n\nexport { gltfBuffer };\n","import { GltfObject } from './gltf_object.js';\n\nclass gltfBufferView extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.buffer = undefined;\n        this.byteOffset = 0;\n        this.byteLength = undefined;\n        this.byteStride = 0;\n        this.target = undefined;\n        this.name = undefined;\n    }\n}\n\nexport { gltfBufferView };\n","import { mat4, vec3, quat } from 'gl-matrix';\nimport { jsToGl, UniformStruct } from './utils.js';\nimport { fromKeys } from './utils.js';\nimport { GltfObject } from './gltf_object.js';\n\nclass gltfLight extends GltfObject\n{\n    constructor(\n        type = \"directional\",\n        color = [1, 1, 1],\n        intensity = 1,\n        innerConeAngle = 0,\n        outerConeAngle = Math.PI / 4,\n        range = -1,\n        name = undefined,\n        node = undefined)\n    {\n        super();\n        this.type = type;\n        this.color = color;\n        this.intensity = intensity;\n        this.innerConeAngle = innerConeAngle;\n        this.outerConeAngle = outerConeAngle;\n        this.range = range;\n        this.name = name;\n        // non gltf\n        this.node = node;\n    }\n\n    initGl(gltf, webGlContext)\n    {\n        super.initGl(gltf, webGlContext);\n\n        for (let i = 0; i < gltf.nodes.length; i++)\n        {\n            const nodeExtensions = gltf.nodes[i].extensions;\n            if (nodeExtensions === undefined)\n            {\n                continue;\n            }\n\n            const lightsExtension = nodeExtensions.KHR_lights_punctual;\n            if (lightsExtension === undefined)\n            {\n                continue;\n            }\n\n            const lightIndex = lightsExtension.light;\n            if (gltf.lights[lightIndex] === this)\n            {\n                this.node = i;\n                break;\n            }\n        }\n    }\n\n    fromJson(jsonLight)\n    {\n        super.fromJson(jsonLight);\n\n        if(jsonLight.spot !== undefined)\n        {\n            fromKeys(this, jsonLight.spot);\n        }\n    }\n\n    toUniform(gltf)\n    {\n        const uLight = new UniformLight();\n\n        if (this.node !== undefined)\n        {\n            const matrix = gltf.nodes[this.node].worldTransform;\n\n            var scale = vec3.fromValues(1, 1, 1);\n            mat4.getScaling(scale, matrix);\n\n            // To extract a correct rotation, the scaling component must be eliminated.\n            const mn = mat4.create();\n            for(const col of [0, 1, 2])\n            {\n                mn[col] = matrix[col] / scale[0];\n                mn[col + 4] = matrix[col + 4] / scale[1];\n                mn[col + 8] = matrix[col + 8] / scale[2];\n            }\n            var rotation = quat.create();\n            mat4.getRotation(rotation, mn);\n            quat.normalize(rotation, rotation);\n\n            const alongNegativeZ = vec3.fromValues(0, 0, -1);\n            vec3.transformQuat(uLight.direction, alongNegativeZ, rotation);\n\n            var translation = vec3.fromValues(0, 0, 0);\n            mat4.getTranslation(translation, matrix);\n            uLight.position = translation;\n        }\n\n        uLight.range = this.range;\n        uLight.color = jsToGl(this.color);\n        uLight.intensity = this.intensity;\n\n        uLight.innerConeCos = Math.cos(this.innerConeAngle);\n        uLight.outerConeCos = Math.cos(this.outerConeAngle);\n\n        switch(this.type)\n        {\n        case \"spot\":\n            uLight.type = Type_Spot;\n            break;\n        case \"point\":\n            uLight.type = Type_Point;\n            break;\n        case \"directional\":\n        default:\n            uLight.type = Type_Directional;\n            break;\n        }\n\n        return uLight;\n    }\n}\n\nconst Type_Directional = 0;\nconst Type_Point = 1;\nconst Type_Spot = 2;\n\nclass UniformLight extends UniformStruct\n{\n    constructor()\n    {\n        super();\n\n        const defaultDirection = vec3.fromValues(-0.7399, -0.6428, -0.1983);\n        this.direction = defaultDirection;\n        this.range = -1;\n\n        this.color = jsToGl([1, 1, 1]);\n        this.intensity = 1;\n\n        this.position = jsToGl([0, 0, 0]);\n        this.innerConeCos = 0.0;\n\n        this.outerConeCos = Math.PI / 4;\n        this.type = Type_Directional;\n        this.padding1 = 0.0;\n        this.padding2 = 0.0;\n    }\n}\n\nexport { gltfLight };\n","import { jsToGl } from './utils.js';\nimport { GltfObject } from './gltf_object.js';\nimport { GL } from \"../Renderer/webgl\";\n\n// https://github.com/KhronosGroup/glTF/blob/khr_ktx2_ibl/extensions/2.0/Khronos/KHR_lights_image_based/schema/imageBasedLight.schema.json\n\nclass ImageBasedLight extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.rotation = jsToGl([0, 0, 0, 1]);\n        this.brightnessFactor = 1;\n        this.brightnessOffset = 0;\n        this.specularEnvironmentTexture = undefined;\n        this.diffuseEnvironmentTexture = undefined;\n        this.sheenEnvironmentTexture = undefined;\n\n        // non-gltf\n        this.levelCount = 1;\n    }\n\n    fromJson(jsonIBL)\n    {\n        super.fromJson(jsonIBL);\n\n        if(jsonIBL.extensions !== undefined)\n        {\n            this.fromJsonExtensions(jsonIBL.extensions);\n        }\n    }\n\n    fromJsonExtensions(extensions)\n    {\n        if (extensions.KHR_materials_sheen !== undefined)\n        {\n            this.sheenEnvironmentTexture = extensions.KHR_materials_sheen.sheenEnvironmentTexture;\n        }\n    }\n\n    initGl(gltf, webGlContext)\n    {\n        if (this.diffuseEnvironmentTexture !== undefined)\n        {\n            const textureObject = gltf.textures[this.diffuseEnvironmentTexture];\n            textureObject.type = GL.TEXTURE_CUBE_MAP;\n        }\n        if (this.specularEnvironmentTexture !== undefined)\n        {\n            const textureObject = gltf.textures[this.specularEnvironmentTexture];\n            textureObject.type = GL.TEXTURE_CUBE_MAP;\n\n            const imageObject = gltf.images[textureObject.source];\n            this.levelCount = imageObject.image.levelCount;\n        }\n        if(this.sheenEnvironmentTexture !== undefined)\n        {\n            const textureObject = gltf.textures[this.sheenEnvironmentTexture];\n            textureObject.type = GL.TEXTURE_CUBE_MAP;\n\n            const imageObject = gltf.images[textureObject.source];\n            if (this.levelCount !== imageObject.image.levelCount)\n            {\n                console.error(\"Specular and sheen do not have same level count\");\n            }\n        }\n    }\n}\n\nexport { ImageBasedLight };\n","import { fromKeys, initGlForMembers } from './utils.js';\nimport { GL } from '../Renderer/webgl.js';\nimport { GltfObject } from './gltf_object.js';\n\nclass gltfTexture extends GltfObject\n{\n    constructor(sampler = undefined, source = undefined, type = GL.TEXTURE_2D, texture = undefined)\n    {\n        super();\n        this.sampler = sampler; // index to gltfSampler, default sampler ?\n        this.source = source; // index to gltfImage\n\n        // non gltf\n        this.glTexture = texture;\n        this.type = type;\n        this.initialized = false;\n        this.mipLevelCount = 0;\n    }\n\n    initGl(gltf, webGlContext)\n    {\n        if (this.sampler === undefined)\n        {\n            this.sampler = gltf.samplers.length - 1;\n        }\n\n        initGlForMembers(this, gltf, webGlContext);\n    }\n\n    fromJson(jsonTexture)\n    {\n        super.fromJson(jsonTexture);\n        if (jsonTexture.extensions !== undefined &&\n            jsonTexture.extensions.KHR_texture_basisu !== undefined &&\n            jsonTexture.extensions.KHR_texture_basisu.source !== undefined)\n        {\n            this.source = jsonTexture.extensions.KHR_texture_basisu.source;\n        }\n    }\n\n    destroy()\n    {\n        if (this.glTexture !== undefined)\n        {\n            // TODO: this breaks the dependency direction\n            WebGl.context.deleteTexture(this.glTexture);\n        }\n\n        this.glTexture = undefined;\n    }\n}\n\nclass gltfTextureInfo\n{\n    constructor(index = undefined, texCoord = 0, linear = true, samplerName = \"\", generateMips = true) // linear by default\n    {\n        this.index = index; // reference to gltfTexture\n        this.texCoord = texCoord; // which UV set to use\n        this.linear = linear;\n        this.samplerName = samplerName;\n        this.strength = 1.0; // occlusion\n        this.scale = 1.0; // normal\n        this.generateMips = generateMips;\n\n        this.extensions = undefined;\n    }\n\n    initGl(gltf, webGlContext)\n    {\n        initGlForMembers(this, gltf, webGlContext);\n    }\n\n    fromJson(jsonTextureInfo)\n    {\n        fromKeys(this, jsonTextureInfo);\n    }\n}\n\nexport { gltfTexture, gltfTextureInfo };\n","import { mat3, vec3, vec4 } from 'gl-matrix';\nimport { gltfTextureInfo } from './texture.js';\nimport { jsToGl, initGlForMembers } from './utils.js';\nimport { GltfObject } from './gltf_object.js';\n\nclass gltfMaterial extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.name = undefined;\n        this.pbrMetallicRoughness = undefined;\n        this.normalTexture = undefined;\n        this.occlusionTexture = undefined;\n        this.emissiveTexture = undefined;\n        this.emissiveFactor = vec3.fromValues(0, 0, 0);\n        this.alphaMode = \"OPAQUE\";\n        this.alphaCutoff = 0.5;\n        this.doubleSided = false;\n\n        // non gltf properties\n        this.type = \"unlit\";\n        this.textures = [];\n        this.properties = new Map();\n        this.defines = [];\n    }\n\n    static createDefault()\n    {\n        const defaultMaterial = new gltfMaterial();\n        defaultMaterial.type = \"MR\";\n        defaultMaterial.name = \"Default Material\";\n        defaultMaterial.defines.push(\"MATERIAL_METALLICROUGHNESS 1\");\n        const baseColorFactor = vec4.fromValues(1, 1, 1, 1);\n        const metallicFactor = 1;\n        const roughnessFactor = 1;\n        defaultMaterial.properties.set(\"u_BaseColorFactor\", baseColorFactor);\n        defaultMaterial.properties.set(\"u_MetallicFactor\", metallicFactor);\n        defaultMaterial.properties.set(\"u_RoughnessFactor\", roughnessFactor);\n\n        return defaultMaterial;\n    }\n\n    getShaderIdentifier()\n    {\n        switch (this.type)\n        {\n        default:\n        case \"SG\": // fall through till we sparate shaders\n        case \"MR\": return \"pbr.frag\";\n            //case \"SG\": return \"specular-glossiness.frag\" ;\n        }\n    }\n\n    getDefines()\n    {\n        return this.defines;\n    }\n\n    getProperties()\n    {\n        return this.properties;\n    }\n\n    getTextures()\n    {\n        return this.textures;\n    }\n\n    parseTextureInfoExtensions(textureInfo, textureKey)\n    {\n        if(textureInfo.extensions === undefined)\n        {\n            return;\n        }\n\n        if(textureInfo.extensions.KHR_texture_transform !== undefined)\n        {\n            const uvTransform = textureInfo.extensions.KHR_texture_transform;\n\n            // override uvset\n            if(uvTransform.texCoord !== undefined)\n            {\n                textureInfo.texCoord = uvTransform.texCoord;\n            }\n\n            let rotation = mat3.create();\n            let scale = mat3.create();\n            let translation = mat3.create();\n\n            if(uvTransform.rotation !== undefined)\n            {\n                const s =  Math.sin(uvTransform.rotation);\n                const c =  Math.cos(uvTransform.rotation);\n\n                rotation = jsToGl([\n                    c, s, 0.0,\n                    -s, c, 0.0,\n                    0.0, 0.0, 1.0]);\n            }\n\n            if(uvTransform.scale !== undefined)\n            {\n                scale = jsToGl([uvTransform.scale[0], 0, 0, 0, uvTransform.scale[1], 0, 0, 0, 1]);\n            }\n\n            if(uvTransform.offset !== undefined)\n            {\n                translation = jsToGl([1, 0, uvTransform.offset[0], 0, 1, uvTransform.offset[1], 0, 0, 1]);\n            }\n\n            let uvMatrix = mat3.create();\n            mat3.multiply(uvMatrix, rotation, scale);\n            mat3.multiply(uvMatrix, uvMatrix, translation);\n\n            this.defines.push(\"HAS_\" + textureKey.toUpperCase() + \"_UV_TRANSFORM 1\");\n            this.properties.set(\"u_\" + textureKey + \"UVTransform\", uvMatrix);\n        }\n    }\n\n    initGl(gltf, webGlContext)\n    {\n        if (this.normalTexture !== undefined)\n        {\n            this.normalTexture.samplerName = \"u_NormalSampler\";\n            this.parseTextureInfoExtensions(this.normalTexture, \"Normal\");\n            this.textures.push(this.normalTexture);\n            this.defines.push(\"HAS_NORMAL_MAP 1\");\n            this.properties.set(\"u_NormalScale\", this.normalTexture.scale);\n            this.properties.set(\"u_NormalUVSet\", this.normalTexture.texCoord);\n        }\n\n        if (this.occlusionTexture !== undefined)\n        {\n            this.occlusionTexture.samplerName = \"u_OcclusionSampler\";\n            this.parseTextureInfoExtensions(this.occlusionTexture, \"Occlusion\");\n            this.textures.push(this.occlusionTexture);\n            this.defines.push(\"HAS_OCCLUSION_MAP 1\");\n            this.properties.set(\"u_OcclusionStrength\", this.occlusionTexture.strength);\n            this.properties.set(\"u_OcclusionUVSet\", this.occlusionTexture.texCoord);\n        }\n\n        this.properties.set(\"u_EmissiveFactor\", this.emissiveFactor);\n        if (this.emissiveTexture !== undefined)\n        {\n            this.emissiveTexture.samplerName = \"u_EmissiveSampler\";\n            this.parseTextureInfoExtensions(this.emissiveTexture, \"Emissive\");\n            this.textures.push(this.emissiveTexture);\n            this.defines.push(\"HAS_EMISSIVE_MAP 1\");\n            this.properties.set(\"u_EmissiveUVSet\", this.emissiveTexture.texCoord);\n        }\n\n        if (this.baseColorTexture !== undefined)\n        {\n            this.baseColorTexture.samplerName = \"u_BaseColorSampler\";\n            this.parseTextureInfoExtensions(this.baseColorTexture, \"BaseColor\");\n            this.textures.push(this.baseColorTexture);\n            this.defines.push(\"HAS_BASE_COLOR_MAP 1\");\n            this.properties.set(\"u_BaseColorUVSet\", this.baseColorTexture.texCoord);\n        }\n\n        if (this.metallicRoughnessTexture !== undefined)\n        {\n            this.metallicRoughnessTexture.samplerName = \"u_MetallicRoughnessSampler\";\n            this.parseTextureInfoExtensions(this.metallicRoughnessTexture, \"MetallicRoughness\");\n            this.textures.push(this.metallicRoughnessTexture);\n            this.defines.push(\"HAS_METALLIC_ROUGHNESS_MAP 1\");\n            this.properties.set(\"u_MetallicRoughnessUVSet\", this.metallicRoughnessTexture.texCoord);\n        }\n\n        if (this.diffuseTexture !== undefined)\n        {\n            this.diffuseTexture.samplerName = \"u_DiffuseSampler\";\n            this.parseTextureInfoExtensions(this.diffuseTexture, \"Diffuse\");\n            this.textures.push(this.diffuseTexture);\n            this.defines.push(\"HAS_DIFFUSE_MAP 1\");\n            this.properties.set(\"u_DiffuseUVSet\", this.diffuseTexture.texCoord);\n        }\n\n        if (this.specularGlossinessTexture !== undefined)\n        {\n            this.specularGlossinessTexture.samplerName = \"u_SpecularGlossinessSampler\";\n            this.parseTextureInfoExtensions(this.specularGlossinessTexture, \"SpecularGlossiness\");\n            this.textures.push(this.specularGlossinessTexture);\n            this.defines.push(\"HAS_SPECULAR_GLOSSINESS_MAP 1\");\n            this.properties.set(\"u_SpecularGlossinessUVSet\", this.specularGlossinessTexture.texCoord);\n        }\n\n        if(this.alphaMode === 'MASK') // only set cutoff value for mask material\n        {\n            this.defines.push(\"ALPHAMODE_MASK 1\");\n            this.properties.set(\"u_AlphaCutoff\", this.alphaCutoff);\n        }\n        else if (this.alphaMode === 'OPAQUE')\n        {\n            this.defines.push(\"ALPHAMODE_OPAQUE 1\");\n        }\n\n        if (this.pbrMetallicRoughness !== undefined && this.type !== \"SG\")\n        {\n            this.defines.push(\"MATERIAL_METALLICROUGHNESS 1\");\n\n            let baseColorFactor = vec4.fromValues(1, 1, 1, 1);\n            let metallicFactor = 1;\n            let roughnessFactor = 1;\n\n            if (this.pbrMetallicRoughness.baseColorFactor !== undefined)\n            {\n                baseColorFactor = jsToGl(this.pbrMetallicRoughness.baseColorFactor);\n            }\n\n            if (this.pbrMetallicRoughness.metallicFactor !== undefined)\n            {\n                metallicFactor = this.pbrMetallicRoughness.metallicFactor;\n            }\n\n            if (this.pbrMetallicRoughness.roughnessFactor !== undefined)\n            {\n                roughnessFactor = this.pbrMetallicRoughness.roughnessFactor;\n            }\n\n            this.properties.set(\"u_BaseColorFactor\", baseColorFactor);\n            this.properties.set(\"u_MetallicFactor\", metallicFactor);\n            this.properties.set(\"u_RoughnessFactor\", roughnessFactor);\n        }\n\n        if (this.extensions !== undefined)\n        {\n            if (this.extensions.KHR_materials_unlit !== undefined)\n            {\n                this.defines.push(\"MATERIAL_UNLIT 1\");\n            }\n\n            if (this.extensions.KHR_materials_pbrSpecularGlossiness !== undefined)\n            {\n                this.defines.push(\"MATERIAL_SPECULARGLOSSINESS 1\");\n\n                let diffuseFactor = vec4.fromValues(1, 1, 1, 1);\n                let specularFactor = vec3.fromValues(1, 1, 1);\n                let glossinessFactor = 1;\n\n                if (this.extensions.KHR_materials_pbrSpecularGlossiness.diffuseFactor !== undefined)\n                {\n                    diffuseFactor = jsToGl(this.extensions.KHR_materials_pbrSpecularGlossiness.diffuseFactor);\n                }\n\n                if (this.extensions.KHR_materials_pbrSpecularGlossiness.specularFactor !== undefined)\n                {\n                    specularFactor = jsToGl(this.extensions.KHR_materials_pbrSpecularGlossiness.specularFactor);\n                }\n\n                if (this.extensions.KHR_materials_pbrSpecularGlossiness.glossinessFactor !== undefined)\n                {\n                    glossinessFactor = this.extensions.KHR_materials_pbrSpecularGlossiness.glossinessFactor;\n                }\n\n                this.properties.set(\"u_DiffuseFactor\", diffuseFactor);\n                this.properties.set(\"u_SpecularFactor\", specularFactor);\n                this.properties.set(\"u_GlossinessFactor\", glossinessFactor);\n            }\n\n            // Clearcoat is part of the default metallic-roughness shader\n            if(this.extensions.KHR_materials_clearcoat !== undefined)\n            {\n                let clearcoatFactor = 0.0;\n                let clearcoatRoughnessFactor = 0.0;\n\n                this.defines.push(\"MATERIAL_CLEARCOAT 1\");\n\n                if(this.extensions.KHR_materials_clearcoat.clearcoatFactor !== undefined)\n                {\n                    clearcoatFactor = this.extensions.KHR_materials_clearcoat.clearcoatFactor;\n                }\n                if(this.extensions.KHR_materials_clearcoat.clearcoatRoughnessFactor !== undefined)\n                {\n                    clearcoatRoughnessFactor = this.extensions.KHR_materials_clearcoat.clearcoatRoughnessFactor;\n                }\n\n                if (this.clearcoatTexture !== undefined)\n                {\n                    this.clearcoatTexture.samplerName = \"u_ClearcoatSampler\";\n                    this.parseTextureInfoExtensions(this.clearcoatTexture, \"Clearcoat\");\n                    this.textures.push(this.clearcoatTexture);\n                    this.defines.push(\"HAS_CLEARCOAT_TEXTURE_MAP 1\");\n                    this.properties.set(\"u_ClearcoatUVSet\", this.clearcoatTexture.texCoord);\n                }\n                if (this.clearcoatRoughnessTexture !== undefined)\n                {\n                    this.clearcoatRoughnessTexture.samplerName = \"u_ClearcoatRoughnessSampler\";\n                    this.parseTextureInfoExtensions(this.clearcoatRoughnessTexture, \"ClearcoatRoughness\");\n                    this.textures.push(this.clearcoatRoughnessTexture);\n                    this.defines.push(\"HAS_CLEARCOAT_ROUGHNESS_MAP 1\");\n                    this.properties.set(\"u_ClearcoatRoughnessUVSet\", this.clearcoatRoughnessTexture.texCoord);\n                }\n                if (this.clearcoatNormalTexture !== undefined)\n                {\n                    this.clearcoatNormalTexture.samplerName = \"u_ClearcoatNormalSampler\";\n                    this.parseTextureInfoExtensions(this.clearcoatNormalTexture, \"ClearcoatNormal\");\n                    this.textures.push(this.clearcoatNormalTexture);\n                    this.defines.push(\"HAS_CLEARCOAT_NORMAL_MAP 1\");\n                    this.properties.set(\"u_ClearcoatNormalUVSet\", this.clearcoatNormalTexture.texCoord);\n                }\n                this.properties.set(\"u_ClearcoatFactor\", clearcoatFactor);\n                this.properties.set(\"u_ClearcoatRoughnessFactor\", clearcoatRoughnessFactor);\n            }\n\n            // Sheen material extension\n            // https://github.com/sebavan/glTF/tree/KHR_materials_sheen/extensions/2.0/Khronos/KHR_materials_sheen\n            if(this.extensions.KHR_materials_sheen !== undefined)\n            {\n                let sheenRoughnessFactor = 0.0;\n                let sheenColorFactor =  vec3.fromValues(1.0, 1.0, 1.0);\n\n                this.defines.push(\"MATERIAL_SHEEN 1\");\n\n                if(this.extensions.KHR_materials_sheen.sheenRoughnessFactor !== undefined)\n                {\n                    sheenRoughnessFactor = this.extensions.KHR_materials_sheen.sheenRoughnessFactor;\n                }\n                if(this.extensions.KHR_materials_sheen.sheenColorFactor !== undefined)\n                {\n                    sheenColorFactor = jsToGl(this.extensions.KHR_materials_sheen.sheenColorFactor);\n                }\n                if (this.sheenRoughnessTexture !== undefined)\n                {\n                    this.sheenRoughnessTexture.samplerName = \"u_sheenRoughnessSampler\";\n                    this.parseTextureInfoExtensions(this.sheenRoughnessTexture, \"SheenRoughness\");\n                    this.textures.push(this.sheenRoughnessTexture);\n                    this.defines.push(\"HAS_SHEEN_ROUGHNESS_MAP 1\");\n                    this.properties.set(\"u_SheenRoughnessUVSet\", this.sheenRoughnessTexture.texCoord);\n                }\n                if (this.sheenColorTexture !== undefined)\n                {\n                    this.sheenColorTexture.samplerName = \"u_SheenColorSampler\";\n                    this.parseTextureInfoExtensions(this.sheenColorTexture, \"SheenColor\");\n                    this.textures.push(this.sheenColorTexture);\n                    this.defines.push(\"HAS_SHEEN_COLOR_MAP 1\");\n                    this.properties.set(\"u_SheenColorUVSet\", this.sheenColorTexture.texCoord);\n                }\n\n                this.properties.set(\"u_SheenRoughnessFactor\", sheenRoughnessFactor);\n                this.properties.set(\"u_SheenColorFactor\", sheenColorFactor);\n            }\n\n            // KHR Extension: Transmission\n            if (this.extensions.KHR_materials_transmission !== undefined)\n            {\n                let transmissionFactor = 0.0;\n\n                this.defines.push(\"MATERIAL_TRANSMISSION 1\");\n\n                if (transmissionFactor !== undefined)\n                {\n                    transmissionFactor = this.extensions.KHR_materials_transmission.transmissionFactor;\n                }\n                if (this.transmissionTexture !== undefined)\n                {\n                    this.transmissionTexture.samplerName = \"u_TransmissionSampler\";\n                    this.parseTextureInfoExtensions(this.transmissionTexture, \"Transmission\");\n                    this.textures.push(this.transmissionTexture);\n                    this.defines.push(\"HAS_TRANSMISSION_MAP 1\");\n                    this.properties.set(\"u_TransmissionUVSet\", this.transmissionTexture.texCoord);\n                }\n\n                this.properties.set(\"u_TransmissionFactor\", transmissionFactor);\n            }\n        }\n\n        initGlForMembers(this, gltf, webGlContext);\n    }\n\n    fromJson(jsonMaterial)\n    {\n        super.fromJson(jsonMaterial);\n\n        if (jsonMaterial.emissiveFactor !== undefined)\n        {\n            this.emissiveFactor = jsToGl(jsonMaterial.emissiveFactor);\n        }\n\n        if (jsonMaterial.normalTexture !== undefined)\n        {\n            const normalTexture = new gltfTextureInfo();\n            normalTexture.fromJson(jsonMaterial.normalTexture);\n            this.normalTexture = normalTexture;\n        }\n\n        if (jsonMaterial.occlusionTexture !== undefined)\n        {\n            const occlusionTexture = new gltfTextureInfo();\n            occlusionTexture.fromJson(jsonMaterial.occlusionTexture);\n            this.occlusionTexture = occlusionTexture;\n        }\n\n        if (jsonMaterial.emissiveTexture !== undefined)\n        {\n            const emissiveTexture = new gltfTextureInfo(undefined, 0, false);\n            emissiveTexture.fromJson(jsonMaterial.emissiveTexture);\n            this.emissiveTexture = emissiveTexture;\n        }\n\n        if(jsonMaterial.extensions !== undefined)\n        {\n            this.fromJsonMaterialExtensions(jsonMaterial.extensions);\n        }\n\n        if (jsonMaterial.pbrMetallicRoughness !== undefined && this.type !== \"SG\")\n        {\n            this.type = \"MR\";\n            this.fromJsonMetallicRoughness(jsonMaterial.pbrMetallicRoughness);\n        }\n    }\n\n    fromJsonMaterialExtensions(jsonExtensions)\n    {\n        if (jsonExtensions.KHR_materials_pbrSpecularGlossiness !== undefined)\n        {\n            this.type = \"SG\";\n            this.fromJsonSpecularGlossiness(jsonExtensions.KHR_materials_pbrSpecularGlossiness);\n        }\n\n        if(jsonExtensions.KHR_materials_unlit !== undefined)\n        {\n            this.type = \"unlit\";\n        }\n\n        if(jsonExtensions.KHR_materials_clearcoat !== undefined)\n        {\n            this.fromJsonClearcoat(jsonExtensions.KHR_materials_clearcoat);\n        }\n\n        if(jsonExtensions.KHR_materials_sheen !== undefined)\n        {\n            this.fromJsonSheen(jsonExtensions.KHR_materials_sheen);\n        }\n\n        if(jsonExtensions.KHR_materials_transmission !== undefined)\n        {\n            this.fromJsonTransmission(jsonExtensions.KHR_materials_transmission);\n        }\n    }\n\n    fromJsonMetallicRoughness(jsonMetallicRoughness)\n    {\n        if (jsonMetallicRoughness.baseColorTexture !== undefined)\n        {\n            const baseColorTexture = new gltfTextureInfo(undefined, 0, false);\n            baseColorTexture.fromJson(jsonMetallicRoughness.baseColorTexture);\n            this.baseColorTexture = baseColorTexture;\n        }\n\n        if (jsonMetallicRoughness.metallicRoughnessTexture !== undefined)\n        {\n            const metallicRoughnessTexture = new gltfTextureInfo();\n            metallicRoughnessTexture.fromJson(jsonMetallicRoughness.metallicRoughnessTexture);\n            this.metallicRoughnessTexture = metallicRoughnessTexture;\n        }\n    }\n\n    fromJsonSpecularGlossiness(jsonSpecularGlossiness)\n    {\n        if (jsonSpecularGlossiness.diffuseTexture !== undefined)\n        {\n            const diffuseTexture = new gltfTextureInfo(undefined, 0, false);\n            diffuseTexture.fromJson(jsonSpecularGlossiness.diffuseTexture);\n            this.diffuseTexture = diffuseTexture;\n        }\n\n        if (jsonSpecularGlossiness.specularGlossinessTexture !== undefined)\n        {\n            const specularGlossinessTexture = new gltfTextureInfo();\n            specularGlossinessTexture.fromJson(jsonSpecularGlossiness.specularGlossinessTexture);\n            this.specularGlossinessTexture = specularGlossinessTexture;\n        }\n    }\n\n    fromJsonClearcoat(jsonClearcoat)\n    {\n        if(jsonClearcoat.clearcoatTexture !== undefined)\n        {\n            const clearcoatTexture = new gltfTextureInfo();\n            clearcoatTexture.fromJson(jsonClearcoat.clearcoatTexture);\n            this.clearcoatTexture = clearcoatTexture;\n        }\n\n        if(jsonClearcoat.clearcoatRoughnessTexture !== undefined)\n        {\n            const clearcoatRoughnessTexture =  new gltfTextureInfo();\n            clearcoatRoughnessTexture.fromJson(jsonClearcoat.clearcoatRoughnessTexture);\n            this.clearcoatRoughnessTexture = clearcoatRoughnessTexture;\n        }\n\n        if(jsonClearcoat.clearcoatNormalTexture !== undefined)\n        {\n            const clearcoatNormalTexture =  new gltfTextureInfo();\n            clearcoatNormalTexture.fromJson(jsonClearcoat.clearcoatNormalTexture);\n            this.clearcoatNormalTexture = clearcoatNormalTexture;\n        }\n    }\n\n    fromJsonSheen(jsonSheen)\n    {\n        if(jsonSheen.sheenColorTexture !== undefined)\n        {\n            const sheenColorTexture = new gltfTextureInfo();\n            sheenColorTexture.fromJson(jsonSheen.sheenColorTexture);\n            this.sheenColorTexture = sheenColorTexture;\n        }\n        if(jsonSheen.sheenRoughnessTexture !== undefined)\n        {\n            const sheenRoughnessTexture = new gltfTextureInfo();\n            sheenRoughnessTexture.fromJson(jsonSheen.sheenRoughnessTexture);\n            this.sheenRoughnessTexture = sheenRoughnessTexture;\n        }\n    }\n\n    fromJsonTransmission(jsonTransmission)\n    {\n        if(jsonTransmission.transmissionTexture !== undefined)\n        {\n            const transmissionTexture = new gltfTextureInfo();\n            transmissionTexture.fromJson(jsonTransmission.transmissionTexture);\n            this.transmissionTexture = transmissionTexture;\n        }\n    }\n}\n\nexport { gltfMaterial };\n","class DracoDecoder {\n\n    constructor(dracoLib) {\n        if (!DracoDecoder.instance && dracoLib === undefined)\n        {\n            if (DracoDecoderModule === undefined)\n            {\n                console.error('Failed to initalize DracoDecoder: draco library undefined');\n                return undefined;\n            }\n            else\n            {\n                dracoLib = DracoDecoderModule;\n            }\n        }\n        if (!DracoDecoder.instance)\n        {\n            DracoDecoder.instance = this;\n            this.module = null;\n\n            this.initializingPromise = new Promise(resolve => {\n                let dracoDecoderType = {};\n                dracoDecoderType['onModuleLoaded'] = dracoDecoderModule => {\n                    this.module = dracoDecoderModule;\n                    resolve();\n                };\n                dracoLib(dracoDecoderType);\n            });\n        }\n        return DracoDecoder.instance;\n    }\n\n    async ready() {\n        await this.initializingPromise;\n        Object.freeze(DracoDecoder.instance);\n    }\n\n}\n\nexport { DracoDecoder };\n","import { initGlForMembers } from './utils.js';\nimport { GltfObject } from './gltf_object.js';\nimport { gltfBuffer } from './buffer.js';\nimport { gltfBufferView } from './buffer_view.js';\nimport { DracoDecoder } from '../ResourceLoader/draco.js';\nimport { GL  } from '../Renderer/webgl.js';\n\nclass gltfPrimitive extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.attributes = [];\n        this.targets = [];\n        this.indices = undefined;\n        this.material = undefined;\n        this.mode = GL.TRIANGLES;\n\n        // non gltf\n        this.glAttributes = [];\n        this.defines = [];\n        this.skip = true;\n        this.hasWeights = false;\n        this.hasJoints = false;\n        this.hasNormals = false;\n        this.hasTangents = false;\n        this.hasTexcoord = false;\n        this.hasColor = false;\n\n        // The primitive centroid is used for depth sorting.\n        this.centroid = undefined;\n    }\n\n    initGl(gltf, webGlContext)\n    {\n        // Use the default glTF material.\n        if (this.material === undefined)\n        {\n            this.material = gltf.materials.length - 1;\n        }\n\n        initGlForMembers(this, gltf, webGlContext);\n\n        const maxAttributes = webGlContext.getParameter(GL.MAX_VERTEX_ATTRIBS);\n\n        // https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes\n\n        if (this.extensions !== undefined)\n        {\n            if (this.extensions.KHR_draco_mesh_compression !== undefined)\n            {\n                const dracoDecoder = new DracoDecoder();\n                if (dracoDecoder !== undefined && Object.isFrozen(dracoDecoder))\n                {\n                    let dracoGeometry = this.decodeDracoBufferToIntermediate(\n                        this.extensions.KHR_draco_mesh_compression, gltf);\n                    this.copyDataFromDecodedGeometry(gltf, dracoGeometry, this.attributes);\n                }\n                else\n                {\n                    console.warn('Failed to load draco compressed mesh: DracoDecoder not initialized');\n                }\n            }\n        }\n\n        // VERTEX ATTRIBUTES\n        for (const attribute of Object.keys(this.attributes))\n        {\n            if(this.glAttributes.length >= maxAttributes)\n            {\n                console.error(\"To many vertex attributes for this primitive, skipping \" + attribute);\n                break;\n            }\n\n            const idx = this.attributes[attribute];\n            switch (attribute)\n            {\n            case \"POSITION\":\n                this.skip = false;\n                this.glAttributes.push({ attribute: attribute, name: \"a_Position\", accessor: idx });\n                break;\n            case \"NORMAL\":\n                this.hasNormals = true;\n                this.defines.push(\"HAS_NORMALS 1\");\n                this.glAttributes.push({ attribute: attribute, name: \"a_Normal\", accessor: idx });\n                break;\n            case \"TANGENT\":\n                this.hasTangents = true;\n                this.defines.push(\"HAS_TANGENTS 1\");\n                this.glAttributes.push({ attribute: attribute, name: \"a_Tangent\", accessor: idx });\n                break;\n            case \"TEXCOORD_0\":\n                this.hasTexcoord = true;\n                this.defines.push(\"HAS_UV_SET1 1\");\n                this.glAttributes.push({ attribute: attribute, name: \"a_UV1\", accessor: idx });\n                break;\n            case \"TEXCOORD_1\":\n                this.hasTexcoord = true;\n                this.defines.push(\"HAS_UV_SET2 1\");\n                this.glAttributes.push({ attribute: attribute, name: \"a_UV2\", accessor: idx });\n                break;\n            case \"COLOR_0\":\n                this.hasColor = true;\n                const accessor = gltf.accessors[idx];\n                this.defines.push(\"HAS_VERTEX_COLOR_\" + accessor.type + \" 1\");\n                this.glAttributes.push({ attribute: attribute, name: \"a_Color\", accessor: idx });\n                break;\n            case \"JOINTS_0\":\n                this.hasJoints = true;\n                this.defines.push(\"HAS_JOINT_SET1 1\");\n                this.glAttributes.push({ attribute: attribute, name: \"a_Joint1\", accessor: idx });\n                break;\n            case \"WEIGHTS_0\":\n                this.hasWeights = true;\n                this.defines.push(\"HAS_WEIGHT_SET1 1\");\n                this.glAttributes.push({ attribute: attribute, name: \"a_Weight1\", accessor: idx });\n                break;\n            case \"JOINTS_1\":\n                this.hasJoints = true;\n                this.defines.push(\"HAS_JOINT_SET2 1\");\n                this.glAttributes.push({ attribute: attribute, name: \"a_Joint2\", accessor: idx });\n                break;\n            case \"WEIGHTS_1\":\n                this.hasWeights = true;\n                this.defines.push(\"HAS_WEIGHT_SET2 1\");\n                this.glAttributes.push({ attribute: attribute, name: \"a_Weight2\", accessor: idx });\n                break;\n            default:\n                console.log(\"Unknown attribute: \" + attribute);\n            }\n        }\n\n        // MORPH TARGETS\n        if (this.targets !== undefined)\n        {\n            let i = 0;\n            for (const target of this.targets)\n            {\n                if(this.glAttributes.length + 3 > maxAttributes)\n                {\n                    console.error(\"To many vertex attributes for this primitive, skipping target \" + i);\n                    break;\n                }\n\n                for (const attribute of Object.keys(target))\n                {\n                    const idx = target[attribute];\n\n                    switch (attribute)\n                    {\n                    case \"POSITION\":\n                        this.defines.push(\"HAS_TARGET_POSITION\" + i + \" 1\");\n                        this.glAttributes.push({ attribute: attribute, name: \"a_Target_Position\" + i, accessor: idx });\n                        break;\n                    case \"NORMAL\":\n                        this.defines.push(\"HAS_TARGET_NORMAL\" + i + \" 1\");\n                        this.glAttributes.push({ attribute: attribute, name: \"a_Target_Normal\" + i, accessor: idx });\n                        break;\n                    case \"TANGENT\":\n                        this.defines.push(\"HAS_TARGET_TANGENT\" + i + \" 1\");\n                        this.glAttributes.push({ attribute: attribute, name: \"a_Target_Tangent\" + i, accessor: idx });\n                        break;\n                    }\n                }\n\n                ++i;\n            }\n        }\n    }\n\n    getShaderIdentifier()\n    {\n        return \"primitive.vert\";\n    }\n\n    getDefines()\n    {\n        return this.defines;\n    }\n\n    setCentroid(centroid)\n    {\n        this.centroid = centroid;\n    }\n\n    fromJson(jsonPrimitive)\n    {\n        super.fromJson(jsonPrimitive);\n\n        if(jsonPrimitive.extensions !== undefined)\n        {\n            this.fromJsonPrimitiveExtensions(jsonPrimitive.extensions);\n        }\n    }\n\n    fromJsonPrimitiveExtensions(jsonExtensions)\n    {\n        if(jsonExtensions.KHR_materials_variants !== undefined)\n        {\n            this.fromJsonVariants(jsonExtensions.KHR_materials_variants);\n        }\n    }\n\n    fromJsonVariants(jsonVariants)\n    {\n        if(jsonVariants.mappings !== undefined)\n        {\n            this.mappings = jsonVariants.mappings;\n        }\n    }\n\n    copyDataFromDecodedGeometry(gltf, dracoGeometry, primitiveAttributes)\n    {\n        // indices\n        let indexBuffer = dracoGeometry.index.array;\n        this.loadBufferIntoGltf(indexBuffer, gltf, this.indices, 34963,\n            \"index buffer view\");\n\n        // Position\n        if(dracoGeometry.attributes.POSITION !== undefined)\n        {\n            let positionBuffer = this.loadArrayIntoArrayBuffer(dracoGeometry.attributes.POSITION.array,\n                dracoGeometry.attributes.POSITION.componentType);\n            this.loadBufferIntoGltf(positionBuffer, gltf, primitiveAttributes[\"POSITION\"], 34962,\n                \"position buffer view\");\n        }\n\n        // Normal\n        if(dracoGeometry.attributes.NORMAL !== undefined)\n        {\n            let normalBuffer = this.loadArrayIntoArrayBuffer(dracoGeometry.attributes.NORMAL.array,\n                dracoGeometry.attributes.NORMAL.componentType);\n            this.loadBufferIntoGltf(normalBuffer, gltf, primitiveAttributes[\"NORMAL\"], 34962,\n                \"normal buffer view\");\n        }\n\n        // TEXCOORD_0\n        if(dracoGeometry.attributes.TEXCOORD_0 !== undefined)\n        {\n            let uvBuffer = this.loadArrayIntoArrayBuffer(dracoGeometry.attributes.TEXCOORD_0.array,\n                dracoGeometry.attributes.TEXCOORD_0.componentType);\n            this.loadBufferIntoGltf(uvBuffer, gltf, primitiveAttributes[\"TEXCOORD_0\"], 34962,\n                \"TEXCOORD_0 buffer view\");\n        }\n\n        // TEXCOORD_1\n        if(dracoGeometry.attributes.TEXCOORD_1 !== undefined)\n        {\n            let uvBuffer = this.loadArrayIntoArrayBuffer(dracoGeometry.attributes.TEXCOORD_1.array,\n                dracoGeometry.attributes.TEXCOORD_1.componentType);\n            this.loadBufferIntoGltf(uvBuffer, gltf, primitiveAttributes[\"TEXCOORD_1\"], 34962,\n                \"TEXCOORD_1 buffer view\");\n        }\n\n        // Tangent\n        if(dracoGeometry.attributes.TANGENT !== undefined)\n        {\n            let tangentBuffer = this.loadArrayIntoArrayBuffer(dracoGeometry.attributes.TANGENT.array,\n                dracoGeometry.attributes.TANGENT.componentType);\n            this.loadBufferIntoGltf(tangentBuffer, gltf, primitiveAttributes[\"TANGENT\"], 34962,\n                \"Tangent buffer view\");\n        }\n\n        // Color\n        if(dracoGeometry.attributes.COLOR_0 !== undefined)\n        {\n            let colorBuffer = this.loadArrayIntoArrayBuffer(dracoGeometry.attributes.COLOR_0.array,\n                dracoGeometry.attributes.COLOR_0.componentType);\n            this.loadBufferIntoGltf(colorBuffer, gltf, primitiveAttributes[\"COLOR_0\"], 34962,\n                \"color buffer view\");\n        }\n\n        // JOINTS_0\n        if(dracoGeometry.attributes.JOINTS_0 !== undefined)\n        {\n            let jointsBuffer = this.loadArrayIntoArrayBuffer(dracoGeometry.attributes.JOINTS_0.array,\n                dracoGeometry.attributes.JOINTS_0.componentType);\n            this.loadBufferIntoGltf(jointsBuffer, gltf, primitiveAttributes[\"JOINTS_0\"], 34963,\n                \"JOINTS_0 buffer view\");\n        }\n\n        // WEIGHTS_0\n        if(dracoGeometry.attributes.WEIGHTS_0 !== undefined)\n        {\n            let weightsBuffer = this.loadArrayIntoArrayBuffer(dracoGeometry.attributes.WEIGHTS_0.array,\n                dracoGeometry.attributes.WEIGHTS_0.componentType);\n            this.loadBufferIntoGltf(weightsBuffer, gltf, primitiveAttributes[\"WEIGHTS_0\"], 34963,\n                \"WEIGHTS_0 buffer view\");\n        }\n\n        // JOINTS_1\n        if(dracoGeometry.attributes.JOINTS_1 !== undefined)\n        {\n            let jointsBuffer = this.loadArrayIntoArrayBuffer(dracoGeometry.attributes.JOINTS_1.array,\n                dracoGeometry.attributes.JOINTS_1.componentType);\n            this.loadBufferIntoGltf(jointsBuffer, gltf, primitiveAttributes[\"JOINTS_1\"], 34963,\n                \"JOINTS_1 buffer view\");\n        }\n\n        // WEIGHTS_1\n        if(dracoGeometry.attributes.WEIGHTS_1 !== undefined)\n        {\n            let weightsBuffer = this.loadArrayIntoArrayBuffer(dracoGeometry.attributes.WEIGHTS_1.array,\n                dracoGeometry.attributes.WEIGHTS_1.componentType);\n            this.loadBufferIntoGltf(weightsBuffer, gltf, primitiveAttributes[\"WEIGHTS_1\"], 34963,\n                \"WEIGHTS_1 buffer view\");\n        }\n    }\n\n    loadBufferIntoGltf(buffer, gltf, gltfAccessorIndex, gltfBufferViewTarget, gltfBufferViewName)\n    {\n        const gltfBufferObj = new gltfBuffer();\n        gltfBufferObj.byteLength = buffer.byteLength;\n        gltfBufferObj.buffer = buffer;\n        gltf.buffers.push(gltfBufferObj);\n\n        const gltfBufferViewObj = new gltfBufferView();\n        gltfBufferViewObj.buffer = gltf.buffers.length - 1;\n        gltfBufferViewObj.byteLength = buffer.byteLength;\n        if(gltfBufferViewName !== undefined)\n        {\n            gltfBufferViewObj.name = gltfBufferViewName;\n        }\n        gltfBufferViewObj.target = gltfBufferViewTarget;\n        gltf.bufferViews.push(gltfBufferViewObj);\n\n        gltf.accessors[gltfAccessorIndex].byteOffset = 0;\n        gltf.accessors[gltfAccessorIndex].bufferView = gltf.bufferViews.length - 1;\n    }\n\n    loadArrayIntoArrayBuffer(arrayData, componentType)\n    {\n        let arrayBuffer;\n        switch (componentType)\n        {\n        case \"Int8Array\":\n            arrayBuffer = new ArrayBuffer(arrayData.length);\n            let int8Array = new Int8Array(arrayBuffer);\n            int8Array.set(arrayData);\n            break;\n        case \"Uint8Array\":\n            arrayBuffer = new ArrayBuffer(arrayData.length);\n            let uint8Array = new Uint8Array(arrayBuffer);\n            uint8Array.set(arrayData);\n            break;\n        case \"Int16Array\":\n            arrayBuffer = new ArrayBuffer(arrayData.length * 2);\n            let int16Array = new Int16Array(arrayBuffer);\n            int16Array.set(arrayData);\n            break;\n        case \"Uint16Array\":\n            arrayBuffer = new ArrayBuffer(arrayData.length * 2);\n            let uint16Array = new Uint16Array(arrayBuffer);\n            uint16Array.set(arrayData);\n            break;\n        case \"Int32Array\":\n            arrayBuffer = new ArrayBuffer(arrayData.length * 4);\n            let int32Array = new Int32Array(arrayBuffer);\n            int32Array.set(arrayData);\n            break;\n        case \"Uint32Array\":\n            arrayBuffer = new ArrayBuffer(arrayData.length * 4);\n            let uint32Array = new Uint32Array(arrayBuffer);\n            uint32Array.set(arrayData);\n            break;\n        default:\n        case \"Float32Array\":\n            arrayBuffer = new ArrayBuffer(arrayData.length * 4);\n            let floatArray = new Float32Array(arrayBuffer);\n            floatArray.set(arrayData);\n            break;\n        }\n\n\n        return arrayBuffer;\n    }\n\n    decodeDracoBufferToIntermediate(dracoExtension, gltf)\n    {\n        let dracoBufferViewIDX = dracoExtension.bufferView;\n\n        const origGltfDrBufViewObj = gltf.bufferViews[dracoBufferViewIDX];\n        const origGltfDracoBuffer = gltf.buffers[origGltfDrBufViewObj.buffer];\n\n        const totalBuffer = new Int8Array( origGltfDracoBuffer.buffer );\n        const actualBuffer = totalBuffer.slice(origGltfDrBufViewObj.byteOffset,\n            origGltfDrBufViewObj.byteOffset + origGltfDrBufViewObj.byteLength);\n\n        // decode draco buffer to geometry intermediate\n        let dracoDecoder = new DracoDecoder();\n        let draco = dracoDecoder.module;\n        let decoder = new draco.Decoder();\n        let decoderBuffer = new draco.DecoderBuffer();\n        decoderBuffer.Init(actualBuffer, origGltfDrBufViewObj.byteLength);\n        let geometry = this.decodeGeometry( draco, decoder, decoderBuffer, dracoExtension.attributes, gltf );\n\n        draco.destroy( decoderBuffer );\n\n        return geometry;\n    }\n\n    getDracoArrayTypeFromComponentType(componentType)\n    {\n        switch (componentType)\n        {\n        case GL.BYTE:\n            return \"Int8Array\";\n        case GL.UNSIGNED_BYTE:\n            return \"Uint8Array\";\n        case GL.SHORT:\n            return \"Int16Array\";\n        case GL.UNSIGNED_SHORT:\n            return \"Uint16Array\";\n        case GL.INT:\n            return \"Int32Array\";\n        case GL.UNSIGNED_INT:\n            return \"Uint32Array\";\n        case GL.FLOAT:\n            return \"Float32Array\";\n        default:\n            return \"Float32Array\";\n        }\n    }\n\n    decodeGeometry(draco, decoder, decoderBuffer, gltfDracoAttributes, gltf) {\n        let dracoGeometry;\n        let decodingStatus;\n\n        // decode mesh in draco decoder\n        let geometryType = decoder.GetEncodedGeometryType( decoderBuffer );\n        if ( geometryType === draco.TRIANGULAR_MESH ) {\n            dracoGeometry = new draco.Mesh();\n            decodingStatus = decoder.DecodeBufferToMesh( decoderBuffer, dracoGeometry );\n        }\n        else\n        {\n            throw new Error( 'DRACOLoader: Unexpected geometry type.' );\n        }\n\n        if ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n            throw new Error( 'DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n        }\n\n        let geometry = { index: null, attributes: {} };\n        let vertexCount = dracoGeometry.num_points();\n\n        // Gather all vertex attributes.\n        for(let dracoAttr in gltfDracoAttributes)\n        {\n            let componentType = GL.BYTE;\n            let accessotVertexCount;\n            // find gltf accessor for this draco attribute\n            for (const [key, value] of Object.entries(this.attributes))\n            {\n                if(key === dracoAttr)\n                {\n                    componentType = gltf.accessors[value].componentType;\n                    accessotVertexCount = gltf.accessors[value].count;\n                    break;\n                }\n            }\n\n            // check if vertex count matches\n            if(vertexCount !== accessotVertexCount)\n            {\n                throw new Error(`DRACOLoader: Accessor vertex count ${accessotVertexCount} does not match draco decoder vertex count  ${vertexCount}`);\n            }\n            componentType = this.getDracoArrayTypeFromComponentType(componentType);\n\n            let dracoAttribute = decoder.GetAttributeByUniqueId( dracoGeometry, gltfDracoAttributes[dracoAttr]);\n            var tmpObj = this.decodeAttribute( draco, decoder,\n                dracoGeometry, dracoAttr, dracoAttribute, componentType);\n            geometry.attributes[tmpObj.name] = tmpObj;\n        }\n\n        // Add index buffer\n        if ( geometryType === draco.TRIANGULAR_MESH ) {\n\n            // Generate mesh faces.\n            let numFaces = dracoGeometry.num_faces();\n            let numIndices = numFaces * 3;\n            let dataSize = numIndices * 4;\n            let ptr = draco._malloc( dataSize );\n            decoder.GetTrianglesUInt32Array( dracoGeometry, dataSize, ptr );\n            let index = new Uint32Array( draco.HEAPU32.buffer, ptr, numIndices ).slice();\n            draco._free( ptr );\n\n            geometry.index = { array: index, itemSize: 1 };\n\n        }\n\n        draco.destroy( dracoGeometry );\n        return geometry;\n    }\n\n    decodeAttribute( draco, decoder, dracoGeometry, attributeName, attribute, attributeType) {\n        let numComponents = attribute.num_components();\n        let numPoints = dracoGeometry.num_points();\n        let numValues = numPoints * numComponents;\n\n        let ptr;\n        let array;\n\n        let dataSize;\n        switch ( attributeType ) {\n        case \"Float32Array\":\n            dataSize = numValues * 4;\n            ptr = draco._malloc( dataSize );\n            decoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, draco.DT_FLOAT32, dataSize, ptr );\n            array = new Float32Array( draco.HEAPF32.buffer, ptr, numValues ).slice();\n            draco._free( ptr );\n            break;\n\n        case \"Int8Array\":\n            ptr = draco._malloc( numValues );\n            decoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, draco.DT_INT8, numValues, ptr );\n            array = new Int8Array( draco.HEAP8.buffer, ptr, numValues ).slice();\n            draco._free( ptr );\n            break;\n\n        case \"Int16Array\":\n            dataSize = numValues * 2;\n            ptr = draco._malloc( dataSize );\n            decoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, draco.DT_INT16, dataSize, ptr );\n            array = new Int16Array( draco.HEAP16.buffer, ptr, numValues ).slice();\n            draco._free( ptr );\n            break;\n\n        case \"Int32Array\":\n            dataSize = numValues * 4;\n            ptr = draco._malloc( dataSize );\n            decoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, draco.DT_INT32, dataSize, ptr );\n            array = new Int32Array( draco.HEAP32.buffer, ptr, numValues ).slice();\n            draco._free( ptr );\n            break;\n\n        case \"Uint8Array\":\n            ptr = draco._malloc( numValues );\n            decoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, draco.DT_UINT8, numValues, ptr );\n            array = new Uint8Array( draco.HEAPU8.buffer, ptr, numValues ).slice();\n            draco._free( ptr );\n            break;\n\n        case \"Uint16Array\":\n            dataSize = numValues * 2;\n            ptr = draco._malloc( dataSize );\n            decoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, draco.DT_UINT16, dataSize, ptr );\n            array = new Uint16Array( draco.HEAPU16.buffer, ptr, numValues ).slice();\n            draco._free( ptr );\n            break;\n\n        case \"Uint32Array\":\n            dataSize = numValues * 4;\n            ptr = draco._malloc( dataSize );\n            decoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, draco.DT_UINT32, dataSize, ptr );\n            array = new Uint32Array( draco.HEAPU32.buffer, ptr, numValues ).slice();\n            draco._free( ptr );\n            break;\n\n        default:\n            throw new Error( 'DRACOLoader: Unexpected attribute type.' );\n        }\n\n        return {\n            name: attributeName,\n            array: array,\n            itemSize: numComponents,\n            componentType: attributeType\n        };\n\n    }\n}\n\nexport { gltfPrimitive };\n\n","import { gltfPrimitive } from './primitive.js';\nimport { objectsFromJsons } from './utils.js';\nimport { GltfObject } from './gltf_object.js';\n\nclass gltfMesh extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.primitives = [];\n        this.name = undefined;\n        this.weights = [];\n    }\n\n    fromJson(jsonMesh)\n    {\n        super.fromJson(jsonMesh);\n\n        if (jsonMesh.name !== undefined)\n        {\n            this.name = jsonMesh.name;\n        }\n\n        this.primitives = objectsFromJsons(jsonMesh.primitives, gltfPrimitive);\n\n        if(jsonMesh.weights !== undefined)\n        {\n            this.weights = jsonMesh.weights;\n        }\n    }\n}\n\nexport { gltfMesh };\n","import { mat4, quat } from 'gl-matrix';\nimport { jsToGl } from './utils.js';\nimport { GltfObject } from './gltf_object.js';\n\n// contain:\n// transform\n// child indices (reference to scene array of nodes)\n\nclass gltfNode extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.camera = undefined;\n        this.children = [];\n        this.matrix = undefined;\n        this.rotation = jsToGl([0, 0, 0, 1]);\n        this.scale = jsToGl([1, 1, 1]);\n        this.translation = jsToGl([0, 0, 0]);\n        this.name = undefined;\n        this.mesh = undefined;\n        this.skin = undefined;\n\n        // non gltf\n        this.worldTransform = mat4.create();\n        this.inverseWorldTransform = mat4.create();\n        this.normalMatrix = mat4.create();\n        this.light = undefined;\n        this.changed = true;\n    }\n\n    initGl()\n    {\n        if (this.matrix !== undefined)\n        {\n            this.applyMatrix(this.matrix);\n        }\n        else\n        {\n            if (this.scale !== undefined)\n            {\n                this.scale = jsToGl(this.scale);\n            }\n\n            if (this.rotation !== undefined)\n            {\n                this.rotation = jsToGl(this.rotation);\n            }\n\n            if (this.translation !== undefined)\n            {\n                this.translation = jsToGl(this.translation);\n            }\n        }\n        this.changed = true;\n    }\n\n    applyMatrix(matrixData)\n    {\n        this.matrix = jsToGl(matrixData);\n\n        mat4.getScaling(this.scale, this.matrix);\n\n        // To extract a correct rotation, the scaling component must be eliminated.\n        const mn = mat4.create();\n        for(const col of [0, 1, 2])\n        {\n            mn[col] = this.matrix[col] / this.scale[0];\n            mn[col + 4] = this.matrix[col + 4] / this.scale[1];\n            mn[col + 8] = this.matrix[col + 8] / this.scale[2];\n        }\n        mat4.getRotation(this.rotation, mn);\n        quat.normalize(this.rotation, this.rotation);\n\n        mat4.getTranslation(this.translation, this.matrix);\n\n        this.changed = true;\n    }\n\n    // vec3\n    applyTranslation(translation)\n    {\n        this.translation = translation;\n        this.changed = true;\n    }\n\n    // quat\n    applyRotation(rotation)\n    {\n        this.rotation = rotation;\n        this.changed = true;\n    }\n\n    // vec3\n    applyScale(scale)\n    {\n        this.scale = scale;\n        this.changed = true;\n    }\n\n    resetTransform()\n    {\n        this.rotation = jsToGl([0, 0, 0, 1]);\n        this.scale = jsToGl([1, 1, 1]);\n        this.translation = jsToGl([0, 0, 0]);\n        this.changed = true;\n    }\n\n    getLocalTransform()\n    {\n        if(this.transform === undefined || this.changed)\n        {\n            this.transform = mat4.create();\n            mat4.fromRotationTranslationScale(this.transform, this.rotation, this.translation, this.scale);\n            this.changed = false;\n        }\n\n        return mat4.clone(this.transform);\n    }\n}\n\nexport { gltfNode };\n","import { GltfObject } from './gltf_object.js';\nimport { GL } from '../Renderer/webgl.js';\n\nclass gltfSampler extends GltfObject\n{\n    constructor(\n        magFilter = GL.LINEAR,\n        minFilter = GL.LINEAR_MIPMAP_LINEAR,\n        wrapS = GL.REPEAT,\n        wrapT = GL.REPEAT)\n    {\n        super();\n        this.magFilter = magFilter;\n        this.minFilter = minFilter;\n        this.wrapS = wrapS;\n        this.wrapT = wrapT;\n        this.name = undefined;\n    }\n\n    static createDefault()\n    {\n        return new gltfSampler();\n    }\n}\n\nexport { gltfSampler };\n","import { mat4 } from 'gl-matrix';\nimport { GltfObject } from './gltf_object';\n\nclass gltfScene extends GltfObject\n{\n    constructor(nodes = [], name = undefined)\n    {\n        super();\n        this.nodes = nodes;\n        this.name = name;\n\n        // non gltf\n        this.imageBasedLight = undefined;\n    }\n\n    initGl(gltf, webGlContext)\n    {\n        super.initGl(gltf, webGlContext);\n\n        if (this.extensions !== undefined &&\n            this.extensions.KHR_lights_image_based !== undefined)\n        {\n            const index = this.extensions.KHR_lights_image_based.imageBasedLight;\n            this.imageBasedLight = gltf.imageBasedLights[index];\n        }\n    }\n\n    applyTransformHierarchy(gltf, rootTransform = mat4.create())\n    {\n        function applyTransform(gltf, node, parentTransform)\n        {\n            mat4.multiply(node.worldTransform, parentTransform, node.getLocalTransform());\n            mat4.invert(node.inverseWorldTransform, node.worldTransform);\n            mat4.transpose(node.normalMatrix, node.inverseWorldTransform);\n\n            for (const child of node.children)\n            {\n                applyTransform(gltf, gltf.nodes[child], node.worldTransform);\n            }\n        }\n\n        for (const node of this.nodes)\n        {\n            applyTransform(gltf, gltf.nodes[node], rootTransform);\n        }\n    }\n\n    gatherNodes(gltf)\n    {\n        const nodes = [];\n\n        function gatherNode(nodeIndex)\n        {\n            const node = gltf.nodes[nodeIndex];\n            nodes.push(node);\n\n            // recurse into children\n            for(const child of node.children)\n            {\n                gatherNode(child);\n            }\n        }\n\n        for (const node of this.nodes)\n        {\n            gatherNode(node);\n        }\n\n        return nodes;\n    }\n\n    includesNode(gltf, nodeIndex)\n    {\n        let children = [...this.nodes];\n        while(children.length > 0)\n        {\n            const childIndex = children.pop();\n\n            if (childIndex === nodeIndex)\n            {\n                return true;\n            }\n\n            children = children.concat(gltf.nodes[childIndex].children);\n        }\n\n        return false;\n    }\n}\n\nexport { gltfScene };\n","import { GltfObject } from \"./gltf_object\";\n\nclass gltfAsset extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.copyright = undefined;\n        this.generator = undefined;\n        this.version = undefined;\n        this.minVersion = undefined;\n    }\n}\n\nexport { gltfAsset as gltfAsset };\n","import { GltfObject } from './gltf_object.js';\n\nclass gltfAnimationChannel extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.target = {node: undefined, path: undefined};\n        this.sampler = undefined;\n    }\n}\n\nconst InterpolationPath =\n{\n    TRANSLATION: \"translation\",\n    ROTATION: \"rotation\",\n    SCALE: \"scale\",\n    WEIGHTS: \"weights\"\n};\n\nexport { gltfAnimationChannel, InterpolationPath };\n","import { GltfObject } from './gltf_object.js';\n\nclass gltfAnimationSampler extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.input = undefined;\n        this.interpolation = undefined;\n        this.output = undefined;\n    }\n}\n\nconst InterpolationModes =\n{\n    LINEAR: \"LINEAR\",\n    STEP: \"STEP\",\n    CUBICSPLINE: \"CUBICSPLINE\"\n};\n\nexport { gltfAnimationSampler, InterpolationModes };\n","import { InterpolationModes } from './animation_sampler.js';\nimport { InterpolationPath } from './channel.js';\nimport { clamp, jsToGlSlice } from './utils.js';\nimport { quat, glMatrix } from 'gl-matrix';\n\nclass gltfInterpolator\n{\n    constructor()\n    {\n        this.prevKey = 0;\n        this.prevT = 0.0;\n    }\n\n    slerpQuat(q1, q2, t)\n    {\n        const qn1 = quat.create();\n        const qn2 = quat.create();\n\n        quat.normalize(qn1, q1);\n        quat.normalize(qn2, q2);\n\n        const quatResult = quat.create();\n\n        quat.slerp(quatResult, qn1, qn2, t);\n        quat.normalize(quatResult, quatResult);\n\n        return quatResult;\n    }\n\n    step(prevKey, output, stride)\n    {\n        const result = new glMatrix.ARRAY_TYPE(stride);\n\n        for(let i = 0; i < stride; ++i)\n        {\n            result[i] = output[prevKey * stride + i];\n        }\n\n        return result;\n    }\n\n    linear(prevKey, nextKey, output, t, stride)\n    {\n        const result = new glMatrix.ARRAY_TYPE(stride);\n\n        for(let i = 0; i < stride; ++i)\n        {\n            result[i] = output[prevKey * stride + i] * (1-t) + output[nextKey * stride + i] * t;\n        }\n\n        return result;\n    }\n\n    cubicSpline(prevKey, nextKey, output, keyDelta, t, stride)\n    {\n        // stride: Count of components (4 in a quaternion).\n        // Scale by 3, because each output entry consist of two tangents and one data-point.\n        const prevIndex = prevKey * stride * 3;\n        const nextIndex = nextKey * stride * 3;\n        const A = 0;\n        const V = 1 * stride;\n        const B = 2 * stride;\n\n        const result = new glMatrix.ARRAY_TYPE(stride);\n        const tSq = t ** 2;\n        const tCub = t ** 3;\n\n        // We assume that the components in output are laid out like this: in-tangent, point, out-tangent.\n        // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#appendix-c-spline-interpolation\n        for(let i = 0; i < stride; ++i)\n        {\n            const v0 = output[prevIndex + i + V];\n            const a = keyDelta * output[nextIndex + i + A];\n            const b = keyDelta * output[prevIndex + i + B];\n            const v1 = output[nextIndex + i + V];\n\n            result[i] = ((2*tCub - 3*tSq + 1) * v0) + ((tCub - 2*tSq + t) * b) + ((-2*tCub + 3*tSq) * v1) + ((tCub - tSq) * a);\n        }\n\n        return result;\n    }\n\n    resetKey()\n    {\n        this.prevKey = 0;\n    }\n\n    interpolate(gltf, channel, sampler, t, stride, maxTime)\n    {\n        const input = gltf.accessors[sampler.input].getDeinterlacedView(gltf);\n        const output = gltf.accessors[sampler.output].getDeinterlacedView(gltf);\n\n        if(output.length === stride) // no interpolation for single keyFrame animations\n        {\n            return jsToGlSlice(output, 0, stride);\n        }\n\n        // Wrap t around, so the animation loops.\n        // Make sure that t is never earlier than the first keyframe and never later then the last keyframe.\n        t = t % maxTime;\n        t = clamp(t, input[0], input[input.length - 1]);\n\n        if (this.prevT > t)\n        {\n            this.prevKey = 0;\n        }\n\n        this.prevT = t;\n\n        // Find next keyframe: min{ t of input | t > prevKey }\n        let nextKey = null;\n        for (let i = this.prevKey; i < input.length; ++i)\n        {\n            if (t <= input[i])\n            {\n                nextKey = clamp(i, 1, input.length - 1);\n                break;\n            }\n        }\n        this.prevKey = clamp(nextKey - 1, 0, nextKey);\n\n        const keyDelta = input[nextKey] - input[this.prevKey];\n\n        // Normalize t: [t0, t1] -> [0, 1]\n        const tn = (t - input[this.prevKey]) / keyDelta;\n\n        if(channel.target.path === InterpolationPath.ROTATION)\n        {\n\n            if(InterpolationModes.CUBICSPLINE === sampler.interpolation)\n            {\n                // GLTF requires cubic spline interpolation for quaternions.\n                // https://github.com/KhronosGroup/glTF/issues/1386\n                const result = this.cubicSpline(this.prevKey, nextKey, output, keyDelta, tn, 4);\n                quat.normalize(result, result);\n                return result;\n            }\n            else if(sampler.interpolation === InterpolationModes.LINEAR)\n            {\n                const q0 = this.getQuat(output, this.prevKey);\n                const q1 = this.getQuat(output, nextKey);\n                return this.slerpQuat(q0, q1, tn);\n            }\n            else if(sampler.interpolation === InterpolationModes.STEP)\n            {\n                return this.getQuat(output, this.prevKey);\n            }\n\n        }\n\n        switch(sampler.interpolation)\n        {\n        case InterpolationModes.STEP:\n            return this.step(this.prevKey, output, stride);\n        case InterpolationModes.CUBICSPLINE:\n            return this.cubicSpline(this.prevKey, nextKey, output, keyDelta, tn, stride);\n        default:\n            return this.linear(this.prevKey, nextKey, output, tn, stride);\n        }\n    }\n\n    getQuat(output, index)\n    {\n        const x = output[4 * index];\n        const y = output[4 * index + 1];\n        const z = output[4 * index + 2];\n        const w = output[4 * index + 3];\n        return quat.fromValues(x, y, z, w);\n    }\n}\n\nexport { gltfInterpolator };\n","import { GltfObject } from './gltf_object.js';\nimport { objectsFromJsons } from './utils.js';\nimport { gltfAnimationChannel, InterpolationPath } from './channel.js';\nimport { gltfAnimationSampler } from './animation_sampler.js';\nimport { gltfInterpolator } from './interpolator.js';\n\nclass gltfAnimation extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.channels = [];\n        this.samplers = [];\n        this.name = '';\n\n        // not gltf\n        this.interpolators = [];\n        this.maxTime = 0;\n    }\n\n    fromJson(jsonAnimation)\n    {\n        super.fromJson(jsonAnimation);\n\n        this.channels = objectsFromJsons(jsonAnimation.channels, gltfAnimationChannel);\n        this.samplers = objectsFromJsons(jsonAnimation.samplers, gltfAnimationSampler);\n        this.name = jsonAnimation.name;\n\n        if(this.channels === undefined)\n        {\n            console.error(\"No channel data found for skin\");\n            return;\n        }\n\n        for(let i = 0; i < this.channels.length; ++i)\n        {\n            this.interpolators.push(new gltfInterpolator());\n        }\n    }\n\n    advance(gltf, totalTime)\n    {\n        if(this.channels === undefined)\n        {\n            return;\n        }\n\n        if(this.maxTime == 0)\n        {\n            for(let i = 0; i < this.channels.length; ++i)\n            {\n                const channel = this.channels[i];\n                const sampler = this.samplers[channel.sampler];\n                const input = gltf.accessors[sampler.input].getDeinterlacedView(gltf);\n                const max = input[input.length - 1];\n                if(max > this.maxTime)\n                {\n                    this.maxTime = max;\n                }\n            }\n        }\n\n        for(let i = 0; i < this.interpolators.length; ++i)\n        {\n            const channel = this.channels[i];\n            const sampler = this.samplers[channel.sampler];\n            const interpolator = this.interpolators[i];\n\n            const node = gltf.nodes[channel.target.node];\n\n            switch(channel.target.path)\n            {\n            case InterpolationPath.TRANSLATION:\n                node.applyTranslation(interpolator.interpolate(gltf, channel, sampler, totalTime, 3, this.maxTime));\n                break;\n            case InterpolationPath.ROTATION:\n                node.applyRotation(interpolator.interpolate(gltf, channel, sampler, totalTime, 4, this.maxTime));\n                break;\n            case InterpolationPath.SCALE:\n                node.applyScale(interpolator.interpolate(gltf, channel, sampler, totalTime, 3, this.maxTime));\n                break;\n            case InterpolationPath.WEIGHTS:\n            {\n                const mesh = gltf.meshes[node.mesh];\n                mesh.weights = interpolator.interpolate(gltf, channel, sampler, totalTime, mesh.weights.length, this.maxTime);\n                break;\n            }\n            }\n        }\n    }\n}\n\nexport { gltfAnimation };\n","import { jsToGlSlice } from './utils.js';\nimport { GltfObject } from './gltf_object.js';\nimport { mat4 } from 'gl-matrix';\n\nclass gltfSkin extends GltfObject\n{\n    constructor()\n    {\n        super();\n\n        this.name = \"\";\n        this.inverseBindMatrices = undefined;\n        this.joints = [];\n        this.skeleton = undefined;\n\n        // not gltf\n        this.jointMatrices = [];\n        this.jointNormalMatrices = [];\n    }\n\n    computeJoints(gltf, parentNode)\n    {\n        const ibmAccessor = gltf.accessors[this.inverseBindMatrices].getDeinterlacedView(gltf);\n        this.jointMatrices = [];\n        this.jointNormalMatrices = [];\n\n        let i = 0;\n        for(const joint of this.joints)\n        {\n            const node = gltf.nodes[joint];\n\n            let jointMatrix = mat4.create();\n            let ibm = jsToGlSlice(ibmAccessor, i++ * 16, 16);\n            mat4.mul(jointMatrix, node.worldTransform, ibm);\n            mat4.mul(jointMatrix, parentNode.inverseWorldTransform, jointMatrix);\n            this.jointMatrices.push(jointMatrix);\n\n            let normalMatrix = mat4.create();\n            mat4.invert(normalMatrix, jointMatrix);\n            mat4.transpose(normalMatrix, normalMatrix);\n            this.jointNormalMatrices.push(normalMatrix);\n        }\n    }\n}\n\nexport { gltfSkin };\n","import { GltfObject } from './gltf_object.js';\n\nclass gltfVariant extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.name = undefined;\n    }\n\n    fromJson(jsonVariant)\n    {\n        if(jsonVariant.name !== undefined)\n        {\n            this.name = jsonVariant.name;\n        }\n    }\n}\n\nexport { gltfVariant as gltfVariant };\n","import { gltfAccessor } from './accessor.js';\nimport { gltfBuffer } from './buffer.js';\nimport { gltfBufferView } from './buffer_view.js';\nimport { gltfCamera } from './camera.js';\nimport { gltfImage } from './image.js';\nimport { gltfLight } from './light.js';\nimport { ImageBasedLight } from './image_based_light.js';\nimport { gltfMaterial } from './material.js';\nimport { gltfMesh } from './mesh.js';\nimport { gltfNode } from './node.js';\nimport { gltfSampler } from './sampler.js';\nimport { gltfScene } from './scene.js';\nimport { gltfTexture } from './texture.js';\nimport { initGlForMembers, objectsFromJsons, objectFromJson } from './utils';\nimport { gltfAsset } from './asset.js';\nimport { GltfObject } from './gltf_object.js';\nimport { gltfAnimation } from './animation.js';\nimport { gltfSkin } from './skin.js';\nimport { gltfVariant } from './variant.js';\n\nclass glTF extends GltfObject\n{\n    constructor(file)\n    {\n        super();\n        this.asset = undefined;\n        this.accessors = [];\n        this.nodes = [];\n        this.scene = undefined; // the default scene to show.\n        this.scenes = [];\n        this.cameras = [];\n        this.lights = [];\n        this.imageBasedLights = [];\n        this.textures = [];\n        this.images = [];\n        this.samplers = [];\n        this.meshes = [];\n        this.buffers = [];\n        this.bufferViews = [];\n        this.materials = [];\n        this.animations = [];\n        this.skins = [];\n        this.path = file;\n    }\n\n    initGl(webGlContext)\n    {\n        initGlForMembers(this, this, webGlContext);\n    }\n\n    fromJson(json)\n    {\n        super.fromJson(json);\n\n        this.asset = objectFromJson(json.asset, gltfAsset);\n        this.cameras = objectsFromJsons(json.cameras, gltfCamera);\n        this.accessors = objectsFromJsons(json.accessors, gltfAccessor);\n        this.meshes = objectsFromJsons(json.meshes, gltfMesh);\n        this.samplers = objectsFromJsons(json.samplers, gltfSampler);\n        this.materials = objectsFromJsons(json.materials, gltfMaterial);\n        this.buffers = objectsFromJsons(json.buffers, gltfBuffer);\n        this.bufferViews = objectsFromJsons(json.bufferViews, gltfBufferView);\n        this.scenes = objectsFromJsons(json.scenes, gltfScene);\n        this.textures = objectsFromJsons(json.textures, gltfTexture);\n        this.nodes = objectsFromJsons(json.nodes, gltfNode);\n        this.lights = objectsFromJsons(getJsonLightsFromExtensions(json.extensions), gltfLight);\n        this.imageBasedLights = objectsFromJsons(getJsonIBLsFromExtensions(json.extensions), ImageBasedLight);\n        this.images = objectsFromJsons(json.images, gltfImage);\n        this.animations = objectsFromJsons(json.animations, gltfAnimation);\n        this.skins = objectsFromJsons(json.skins, gltfSkin);\n        this.variants = objectsFromJsons(getJsonVariantsFromExtension(json.extensions), gltfVariant);\n        this.variants = enforceVariantsUniqueness(this.variants);\n\n        this.materials.push(gltfMaterial.createDefault());\n        this.samplers.push(gltfSampler.createDefault());\n\n        if (json.scenes !== undefined)\n        {\n            if (json.scene === undefined && json.scenes.length > 0)\n            {\n                this.scene = 0;\n            }\n            else\n            {\n                this.scene = json.scene;\n            }\n        }\n    }\n}\n\nfunction getJsonLightsFromExtensions(extensions)\n{\n    if (extensions === undefined)\n    {\n        return [];\n    }\n    if (extensions.KHR_lights_punctual === undefined)\n    {\n        return [];\n    }\n    return extensions.KHR_lights_punctual.lights;\n}\n\nfunction getJsonIBLsFromExtensions(extensions)\n{\n    if (extensions === undefined)\n    {\n        return [];\n    }\n    if (extensions.KHR_lights_image_based === undefined)\n    {\n        return [];\n    }\n    return extensions.KHR_lights_image_based.imageBasedLights;\n}\n\nfunction getJsonVariantsFromExtension(extensions)\n{\n    if (extensions === undefined)\n    {\n        return [];\n    }\n    if (extensions.KHR_materials_variants === undefined)\n    {\n        return [];\n    }\n    return extensions.KHR_materials_variants.variants;\n}\n\nfunction enforceVariantsUniqueness(variants)\n{\n    for(let i=0;i<variants.length;i++)\n    {\n        const name = variants[i].name;\n        for(let j=i+1;j<variants.length;j++)\n        {\n            if(variants[j].name == name)\n            {\n                variants[j].name += \"0\";  // Add random character to duplicates\n            }\n        }\n    }\n\n\n    return variants;\n}\n\nexport { glTF };\n","class GlbParser\n{\n    constructor(data)\n    {\n        this.data = data;\n        this.glbHeaderInts = 3;\n        this.glbChunkHeaderInts = 2;\n        this.glbMagic = 0x46546C67;\n        this.glbVersion = 2;\n        this.jsonChunkType = 0x4E4F534A;\n        this.binaryChunkType = 0x004E4942;\n    }\n\n    extractGlbData()\n    {\n        const glbInfo = this.getCheckedGlbInfo();\n        if (glbInfo === undefined)\n        {\n            return undefined;\n        }\n\n        let json = undefined;\n        let buffers = [];\n        const chunkInfos = this.getAllChunkInfos();\n        for (let chunkInfo of chunkInfos)\n        {\n            if (chunkInfo.type == this.jsonChunkType && !json)\n            {\n                json = this.getJsonFromChunk(chunkInfo);\n            }\n            else if (chunkInfo.type == this.binaryChunkType)\n            {\n                buffers.push(this.getBufferFromChunk(chunkInfo));\n            }\n        }\n\n        return { json: json, buffers: buffers };\n    }\n\n    getCheckedGlbInfo()\n    {\n        const header = new Uint32Array(this.data, 0, this.glbHeaderInts);\n        const magic = header[0];\n        const version = header[1];\n        const length = header[2];\n\n        if (!this.checkEquality(magic, this.glbMagic, \"glb magic\") ||\n            !this.checkEquality(version, this.glbVersion, \"glb header version\") ||\n            !this.checkEquality(length, this.data.byteLength, \"glb byte length\"))\n        {\n            return undefined;\n        }\n\n        return { \"magic\": magic, \"version\": version, \"length\": length };\n    }\n\n    getAllChunkInfos()\n    {\n        let infos = [];\n        let chunkStart = this.glbHeaderInts * 4;\n        while (chunkStart < this.data.byteLength)\n        {\n            const chunkInfo = this.getChunkInfo(chunkStart);\n            infos.push(chunkInfo);\n            chunkStart += chunkInfo.length + this.glbChunkHeaderInts * 4;\n        }\n        return infos;\n    }\n\n    getChunkInfo(headerStart)\n    {\n        const header = new Uint32Array(this.data, headerStart, this.glbChunkHeaderInts);\n        const chunkStart = headerStart + this.glbChunkHeaderInts * 4;\n        const chunkLength = header[0];\n        const chunkType = header[1];\n        return { \"start\": chunkStart, \"length\": chunkLength, \"type\": chunkType };\n    }\n\n    getJsonFromChunk(chunkInfo)\n    {\n        const chunkLength = chunkInfo.length;\n        const jsonStart = (this.glbHeaderInts + this.glbChunkHeaderInts) * 4;\n        const jsonSlice = new Uint8Array(this.data, jsonStart, chunkLength);\n        const stringBuffer = new TextDecoder(\"utf-8\").decode(jsonSlice);\n        return JSON.parse(stringBuffer);\n    }\n\n    getBufferFromChunk(chunkInfo)\n    {\n        return this.data.slice(chunkInfo.start, chunkInfo.start + chunkInfo.length);\n    }\n\n    checkEquality(actual, expected, name)\n    {\n        if (actual == expected)\n        {\n            return true;\n        }\n\n        console.error(\"Found invalid/unsupported \" + name + \", expected: \" + expected + \", but was: \" + actual);\n        return false;\n    }\n}\n\nexport { GlbParser };\n","\nclass gltfLoader\n{\n    static async load(gltf, webGlContext, appendix = undefined)\n    {\n        const buffers = gltfLoader.getBuffers(appendix);\n        const additionalFiles = gltfLoader.getAdditionalFiles(appendix);\n\n        const buffersPromise = gltfLoader.loadBuffers(gltf, buffers, additionalFiles);\n\n        await buffersPromise; // images might be stored in the buffers\n        const imagesPromise = gltfLoader.loadImages(gltf, additionalFiles);\n\n        return await Promise.all([buffersPromise, imagesPromise])\n            .then(() => gltf.initGl(webGlContext));\n    }\n\n    static unload(gltf)\n    {\n        for (let image of gltf.images)\n        {\n            image.image = undefined;\n        }\n        gltf.images = [];\n\n        for (let texture of gltf.textures)\n        {\n            texture.destroy();\n        }\n        gltf.textures = [];\n\n        for (let accessor of gltf.accessors)\n        {\n            accessor.destroy();\n        }\n        gltf.accessors = [];\n    }\n\n    static getBuffers(appendix)\n    {\n        return gltfLoader.getTypedAppendix(appendix, ArrayBuffer);\n    }\n\n    static getAdditionalFiles(appendix)\n    {\n        if(typeof(File) !== 'undefined')\n        {\n            return gltfLoader.getTypedAppendix(appendix, File);\n        }\n        else\n        {\n            return;\n        }\n    }\n\n    static getTypedAppendix(appendix, Type)\n    {\n        if (appendix && appendix.length > 0)\n        {\n            if (appendix[0] instanceof Type)\n            {\n                return appendix;\n            }\n        }\n    }\n\n    static loadBuffers(gltf, buffers, additionalFiles)\n    {\n        const promises = [];\n        if (buffers)\n        {\n            const count = Math.min(buffers.length, gltf.buffers.length);\n            for (let i = 0; i < count; ++i)\n            {\n                gltf.buffers[i].buffer = buffers[i];\n            }\n        }\n        else\n        {\n            for (const buffer of gltf.buffers)\n            {\n                promises.push(buffer.load(gltf, additionalFiles));\n            }\n        }\n        return Promise.all(promises);\n    }\n\n    static loadImages(gltf, additionalFiles)\n    {\n        const imagePromises = [];\n        for (let image of gltf.images)\n        {\n            imagePromises.push(image.load(gltf, additionalFiles));\n        }\n        return Promise.all(imagePromises);\n    }\n}\n\nexport { gltfLoader };\n","import { ShaderCache } from './Renderer/shader_cache.js';\n\n\nimport iblFiltering from './shaders/ibl_filtering.frag';\nimport panoramaToCubeMap from './shaders/panorama_to_cubemap.frag';\nimport debugOutput from './shaders/debug.frag';\nimport fullscreenShader from './shaders/fullscreen.vert';\n\n\n// How to use:\n// set canvas/context in constructor\n// init(input: panorama image)\n// filterAll()\n// fetch texture IDs\n\nclass iblSampler\n{\n    constructor(view)\n    {\n\n        this.gl = view.context;\n\n        this.textureSize = 256;\n        this.sampleCount = 64;\n        this.lodBias = 0.0;\n        this.mipmapCount = undefined;\n\n\n        this.lambertianTextureID = undefined;\n        this.ggxTextureID = undefined;\n        this.sheenTextureID = undefined;\n\n\n        this.inputTextureID = undefined;\n        this.cubemapTextureID = undefined;\n        this.framebuffer = undefined;\n\n        const shaderSources = new Map();\n\n        shaderSources.set(\"fullscreen.vert\", fullscreenShader);\n        shaderSources.set(\"panorama_to_cubemap.frag\", panoramaToCubeMap);\n        shaderSources.set(\"ibl_filtering.frag\", iblFiltering);\n        shaderSources.set(\"debug.frag\", debugOutput);\n\n        this.shaderCache = new ShaderCache(shaderSources, view.renderer.webGl);\n\n\n    }\n\n    /////////////////////////////////////////////////////////////////////\n\n\n    loadTextureHDR(image)\n    {\n\n        var texture = this.gl.createTexture();\n\n        this.gl.bindTexture( this.gl.TEXTURE_2D,  texture);\n\n        var internalFormat = this.gl.RGB32F;\n        var format = this.gl.RGB;\n        var type = this.gl.FLOAT;\n        var data = undefined;\n\n        if (image.dataFloat instanceof Float32Array && typeof(this.gl.RGB32F) !== 'undefined')\n        {\n            internalFormat = this.gl.RGB32F;\n            format = this.gl.RGB;\n            type = this.gl.FLOAT;\n            data = image.dataFloat;\n        }\n        else if(image.dataFloat instanceof Float32Array)\n        {\n            // workaround for node-gles not supporting RGB32F\n            internalFormat = this.gl.RGBA32F;\n            format = this.gl.RGBA;\n            type = this.gl.FLOAT;\n\n            const numPixels = image.dataFloat.length / 3;\n            data = new Float32Array(numPixels * 4);\n            for(let i = 0; i < numPixels; ++i)\n            {\n                // copy the pixels and padd the alpha channel\n                data[i] = image.dataFloat[i];\n                data[i+1] = image.dataFloat[i+1];\n                data[i+2] = image.dataFloat[i+2];\n                data[i+3] = 0;\n            }\n        }\n        else if (typeof(Image) !== 'undefined' && image instanceof Image)\n        {\n            internalFormat = this.gl.RGBA;\n            format = this.gl.RGBA;\n            type = this.gl.UNSIGNED_BYTE;\n            data = image;\n        }\n        else\n        {\n            console.error(\"loadTextureHDR failed, unsupported HDR image\");\n            return;\n        }\n\n\n        this.gl.texImage2D(\n            this.gl.TEXTURE_2D,\n            0, //level\n            internalFormat,\n            image.width,\n            image.height,\n            0, //border\n            format,\n            type,\n            data);\n\n        this.gl.texParameteri( this.gl.TEXTURE_2D,  this.gl.TEXTURE_WRAP_S,  this.gl.MIRRORED_REPEAT);\n        this.gl.texParameteri( this.gl.TEXTURE_2D,  this.gl.TEXTURE_WRAP_T,  this.gl.MIRRORED_REPEAT);\n        this.gl.texParameteri( this.gl.TEXTURE_2D,  this.gl.TEXTURE_MIN_FILTER,  this.gl.LINEAR);\n        this.gl.texParameteri( this.gl.TEXTURE_2D,  this.gl.TEXTURE_MAG_FILTER,  this.gl.LINEAR);\n\n        return texture;\n    }\n\n\n\n    createCubemapTexture(withMipmaps)\n    {\n        var targetTexture =  this.gl.createTexture();\n        this.gl.bindTexture( this.gl.TEXTURE_CUBE_MAP, targetTexture);\n\n\n        // define size and format of level 0\n        const level = 0;\n        const internalFormat = this.use8bit ? this.gl.RGBA8 : this.gl.RGBA32F;\n        const border = 0;\n        const format = this.gl.RGBA;\n        const type = this.use8bit ? this.gl.UNSIGNED_BYTE : this.gl.FLOAT;\n        const data = null;\n\n        for(var i = 0; i < 6; ++i)\n        {\n            this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level, internalFormat,\n                this.textureSize, this.textureSize, border,\n                format, type, data);\n\n        }\n\n        if(withMipmaps)\n        {\n            this.gl.texParameteri( this.gl.TEXTURE_CUBE_MAP,  this.gl.TEXTURE_MIN_FILTER,  this.gl.LINEAR_MIPMAP_LINEAR);\n        }\n        else\n        {\n            this.gl.texParameteri( this.gl.TEXTURE_CUBE_MAP,  this.gl.TEXTURE_MIN_FILTER,  this.gl.LINEAR);\n        }\n\n        this.gl.texParameteri( this.gl.TEXTURE_CUBE_MAP,  this.gl.TEXTURE_MAG_FILTER,  this.gl.LINEAR);\n        this.gl.texParameteri( this.gl.TEXTURE_CUBE_MAP,  this.gl.TEXTURE_WRAP_S,  this.gl.CLAMP_TO_EDGE);\n        this.gl.texParameteri( this.gl.TEXTURE_CUBE_MAP,  this.gl.TEXTURE_WRAP_T,  this.gl.CLAMP_TO_EDGE);\n\n        return targetTexture;\n    }\n\n    init(panoramaImage)\n    {\n        if (!this.gl.getExtension('EXT_color_buffer_float'))\n        {\n            this.use8bit = true;\n        }\n\n        this.inputTextureID = this.loadTextureHDR(panoramaImage);\n\n        this.cubemapTextureID = this.createCubemapTexture(true);\n\n        this.framebuffer = this.gl.createFramebuffer();\n\n        this.lambertianTextureID = this.createCubemapTexture(false);\n        this.ggxTextureID = this.createCubemapTexture(true);\n        this.sheenTextureID = this.createCubemapTexture(true);\n\n\n        this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP, this.ggxTextureID);\n        this.gl.generateMipmap(this.gl.TEXTURE_CUBE_MAP);\n\n        this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP, this.sheenTextureID);\n        this.gl.generateMipmap(this.gl.TEXTURE_CUBE_MAP);\n\n        this.mipmapLevels = Math.floor(Math.log2(this.textureSize))+1;\n    }\n\n    filterAll()\n    {\n        this.panoramaToCubeMap();\n        this.cubeMapToLambertian();\n        this.cubeMapToGGX();\n        this.cubeMapToSheen();\n\n        this.gl.bindFramebuffer(  this.gl.FRAMEBUFFER, null);\n    }\n\n\n\n\n    panoramaToCubeMap()\n    {\n        for(var i = 0; i < 6; ++i)\n        {\n            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.framebuffer);\n            var side = i;\n            this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+side, this.cubemapTextureID, 0);\n\n            this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP, this.cubemapTextureID);\n\n            this.gl.viewport(0, 0,  this.textureSize,  this.textureSize);\n\n            this.gl.clearColor(1.0, 0.0, 0.0, 0.0);\n            this.gl.clear(this.gl.COLOR_BUFFER_BIT| this.gl.DEPTH_BUFFER_BIT);\n\n            const vertexHash = this.shaderCache.selectShader(\"fullscreen.vert\", []);\n            const fragmentHash = this.shaderCache.selectShader(\"panorama_to_cubemap.frag\", []);\n\n            var shader = this.shaderCache.getShaderProgram(fragmentHash, vertexHash);\n            this.gl.useProgram(shader.program);\n\n            //  TEXTURE0 = active.\n            this.gl.activeTexture(this.gl.TEXTURE0+0);\n\n            // Bind texture ID to active texture\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.inputTextureID);\n\n            // map shader uniform to texture unit (TEXTURE0)\n            const location = this.gl.getUniformLocation(shader.program,\"u_panorama\");\n            this.gl.uniform1i(location, this.gl.TEXTURE0+0); // texture unit 0 (TEXTURE0)\n\n            shader.updateUniform(\"u_currentFace\", i);\n\n            //fullscreen triangle\n            this.gl.drawArrays(this.gl.TRIANGLES, 0, 3);\n        }\n\n        this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP, this.cubemapTextureID);\n        this.gl.generateMipmap(this.gl.TEXTURE_CUBE_MAP);\n\n    }\n\n\n    applyFilter(\n        distribution,\n        roughness,\n        targetMipLevel,\n        targetTexture)\n    {\n        var currentTextureSize =  this.textureSize>>(targetMipLevel);\n\n        for(var i = 0; i < 6; ++i)\n        {\n\n            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.framebuffer);\n            var side = i;\n            this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+side, targetTexture, targetMipLevel);\n\n            this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP, targetTexture);\n\n            this.gl.viewport(0, 0, currentTextureSize, currentTextureSize);\n\n            this.gl.clearColor(1.0, 0.0, 0.0, 0.0);\n            this.gl.clear(this.gl.COLOR_BUFFER_BIT| this.gl.DEPTH_BUFFER_BIT);\n\n\n            const vertexHash = this.shaderCache.selectShader(\"fullscreen.vert\", []);\n            const fragmentHash = this.shaderCache.selectShader(\"ibl_filtering.frag\", []);\n\n            var shader = this.shaderCache.getShaderProgram(fragmentHash, vertexHash);\n            this.gl.useProgram(shader.program);\n\n\n            //  TEXTURE0 = active.\n            this.gl.activeTexture(this.gl.TEXTURE0+0);\n\n            // Bind texture ID to active texture\n            this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP, this.cubemapTextureID);\n\n            // map shader uniform to texture unit (TEXTURE0)\n            const location = this.gl.getUniformLocation(shader.program,\"u_cubemapTexture\");\n            this.gl.uniform1i(location, 0); // texture unit 0\n\n\n            shader.updateUniform(\"u_roughness\", roughness);\n            shader.updateUniform(\"u_sampleCount\", this.sampleCount)\n            shader.updateUniform(\"u_width\", this.textureSize);\n            shader.updateUniform(\"u_lodBias\", this.lodBias);\n            shader.updateUniform(\"u_distribution\", distribution);\n            shader.updateUniform(\"u_currentFace\", i);\n\n\n            //fullscreen triangle\n            this.gl.drawArrays(this.gl.TRIANGLES, 0, 3);\n\n        }\n\n    }\n\n    cubeMapToLambertian()\n    {\n        this.applyFilter(\n            0,\n            0.0,\n            0,\n            this.lambertianTextureID);\n    }\n\n\n    cubeMapToGGX()\n    {\n        for(var currentMipLevel = 0; currentMipLevel < this.mipmapLevels; ++currentMipLevel)\n        {\n            const roughness =  (currentMipLevel) /  (this.mipmapLevels - 1);\n            this.applyFilter(\n                1,\n                roughness,\n                currentMipLevel,\n                this.ggxTextureID);\n        }\n    }\n\n    cubeMapToSheen()\n    {\n        for(var currentMipLevel = 0; currentMipLevel < this.mipmapLevels; ++currentMipLevel)\n        {\n            const roughness =  (currentMipLevel) /  (this.mipmapLevels - 1);\n            this.applyFilter(\n                2,\n                roughness,\n                currentMipLevel,\n                this.sheenTextureID);\n        }\n    }\n\n\n    destroy()\n    {\n        this.shaderCache.destroy();\n    }\n}\n\nexport { iblSampler };\n","class KtxDecoder {\n\n    constructor (context, externalKtxlib) {\n        this.gl = context;\n        this.libktx = null;\n        if (context !== undefined)\n        {\n            if (externalKtxlib === undefined && LIBKTX !== undefined)\n            {\n                externalKtxlib = LIBKTX;\n            }\n            if (externalKtxlib !== undefined)\n            {\n                this.initializied = this.init(context, externalKtxlib);\n            }\n            else\n            {\n                console.error('Failed to initalize KTXDecoder: ktx library undefined');\n                return undefined;\n            }\n        }\n        else\n        {\n            console.error('Failed to initalize KTXDecoder: WebGL context undefined');\n            return undefined;\n        }\n    }\n\n    async init(context, externalKtxlib) {\n        this.libktx = await externalKtxlib({preinitializedWebGLContext: context});\n        this.libktx.GL.makeContextCurrent(this.libktx.GL.createContext(null, { majorVersion: 2.0 }));\n    }\n\n    transcode(ktexture) {\n        if (ktexture.needsTranscoding) {\n            let format;\n\n            let astcSupported = false;\n            let etcSupported = false;\n            let dxtSupported = false;\n            let pvrtcSupported = false;\n\n            astcSupported = !!this.gl.getExtension('WEBGL_compressed_texture_astc');\n            etcSupported = !!this.gl.getExtension('WEBGL_compressed_texture_etc1');\n            dxtSupported = !!this.gl.getExtension('WEBGL_compressed_texture_s3tc');\n            pvrtcSupported = !!(this.gl.getExtension('WEBGL_compressed_texture_pvrtc')) || !!(this.gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'));\n\n            if (astcSupported) {\n                format = this.libktx.TranscodeTarget.ASTC_4x4_RGBA;\n            } else if (dxtSupported) {\n                format = this.libktx.TranscodeTarget.BC1_OR_3;\n            } else if (pvrtcSupported) {\n                format = this.libktx.TranscodeTarget.PVRTC1_4_RGBA;\n            } else if (etcSupported) {\n                format = this.libktx.TranscodeTarget.ETC;\n            } else {\n                format = this.libktx.TranscodeTarget.RGBA8888;\n            }\n            if (ktexture.transcodeBasis(format, 0) != this.libktx.ErrorCode.SUCCESS) {\n                console.warn('Texture transcode failed. See console for details.');\n            }\n        }\n    }\n\n    async loadKtxFromUri(uri) {\n        await this.initializied;\n        const response = await fetch(uri);\n        const data = new Uint8Array(await response.arrayBuffer());\n        const texture = new this.libktx.ktxTexture(data);\n        this.transcode(texture);\n        let uploadResult = texture.glUpload();\n        uploadResult.texture.levels = Math.log2(texture.baseWidth);\n        return uploadResult.texture;\n    }\n\n    async loadKtxFromBuffer(data) {\n        await this.initializied;\n        const texture = new this.libktx.ktxTexture(data);\n        this.transcode(texture);\n        const uploadResult = texture.glUpload();\n        return uploadResult.texture;\n    }\n}\n\nexport { KtxDecoder };\n","/**\n * hdrpng.js - Original code from Enki https://enkimute.github.io/hdrpng.js/\n *\n * Refactored and simplified.\n */\n\nimport { gltfImage } from \"../gltf/image\";\n\nfunction _rgbeToFloat(buffer)\n{\n    const length = buffer.byteLength >> 2;\n    const result = new Float32Array(length * 3);\n\n    for (let i = 0; i < length; i++)\n    {\n        const s = Math.pow(2, buffer[i * 4 + 3] - (128 + 8));\n\n        result[i * 3] = buffer[i * 4] * s;\n        result[i * 3 + 1] = buffer[i * 4 + 1] * s;\n        result[i * 3 + 2] = buffer[i * 4 + 2] * s;\n    }\n    return result;\n}\n\nasync function loadHDR(buffer)\n{\n    let header = '';\n    let pos = 0;\n    const d8 = buffer;\n    let format = undefined;\n    // read header.\n    while (!header.match(/\\n\\n[^\\n]+\\n/g)) header += String.fromCharCode(d8[pos++]);\n    // check format.\n    format = header.match(/FORMAT=(.*)$/m)[1];\n    if (format != '32-bit_rle_rgbe') return console.warn('unknown format : ' + format), this.onerror();\n    // parse resolution\n    const rez = header.split(/\\n/).reverse()[1].split(' '), width = rez[3] * 1, height = rez[1] * 1;\n    // Create image.\n    const img = new Uint8Array(width * height * 4)\n    let ipos = 0;\n    // Read all scanlines\n    for (let j = 0; j < height; j++)\n    {\n        const scanline = [];\n\n        const rgbe = d8.slice(pos, pos += 4);\n        const isNewRLE = (rgbe[0] == 2 && rgbe[1] == 2 && rgbe[2] == ((width >> 8) & 0xFF) && rgbe[3] == (width & 0xFF));\n\n        if (isNewRLE && (width >= 8) && (width < 32768))\n        {\n            for (let i = 0; i < 4; i++)\n            {\n                let ptr = i * width;\n                const ptr_end = (i + 1) * width;\n                let buf = undefined;\n                let count = undefined;\n                while (ptr < ptr_end)\n                {\n                    buf = d8.slice(pos, pos += 2);\n                    if (buf[0] > 128)\n                    {\n                        count = buf[0] - 128;\n                        while (count-- > 0) scanline[ptr++] = buf[1];\n                    }\n                    else\n                    {\n                        count = buf[0] - 1;\n                        scanline[ptr++] = buf[1];\n                        while (count-- > 0) scanline[ptr++] = d8[pos++];\n                    }\n                }\n            }\n\n            for (let i = 0; i < width; i++)\n            {\n                img[ipos++] = scanline[i + 0 * width];\n                img[ipos++] = scanline[i + 1 * width];\n                img[ipos++] = scanline[i + 2 * width];\n                img[ipos++] = scanline[i + 3 * width];\n            }\n        }\n        else\n        {\n            pos -= 4;\n\n            for (const i = 0; i < width; i++)\n            {\n                rgbe = d8.slice(pos, pos += 4);\n\n                img[ipos++] = rgbe[0];\n                img[ipos++] = rgbe[1];\n                img[ipos++] = rgbe[2];\n                img[ipos++] = rgbe[3];\n            }\n        }\n    }\n\n    const imageFloatBuffer = _rgbeToFloat(img);\n\n    return {\n        dataFloat: imageFloatBuffer,\n        width: width,\n        height: height\n    };\n}\n\nexport { loadHDR };\n","\nimport axios from 'axios';\nimport { glTF } from '../gltf/gltf.js';\nimport { getIsGlb, getContainingFolder } from '../gltf/utils.js';\nimport { GlbParser } from './glb_parser.js';\nimport { gltfLoader } from \"./loader.js\";\nimport { gltfImage, ImageMimeType } from \"../gltf/image.js\";\nimport { gltfTexture, gltfTextureInfo } from '../gltf/texture.js';\nimport { gltfSampler } from '../gltf/sampler.js';\nimport { GL } from '../Renderer/webgl.js';\nimport { iblSampler } from '../ibl_sampler.js';\n\n\nimport { AsyncFileReader } from './async_file_reader.js';\n\nimport { DracoDecoder } from './draco.js';\nimport { KtxDecoder } from './ktx.js';\n\nimport { loadHDR } from '../libs/hdrpng.js';\n\nfunction initKtxLib(view, ktxlib)\n{\n    view.ktxDecoder = new KtxDecoder(view.context, ktxlib);\n}\n\nasync function initDracoLib(dracolib)\n{\n    const dracoDecoder = new DracoDecoder(dracolib);\n    if (dracoDecoder !== undefined)\n    {\n        await dracoDecoder.ready();\n    }\n}\n\nasync function loadGltf(file, view, additionalFiles)\n{\n    let isGlb = undefined;\n    let buffers = undefined;\n    let json = undefined;\n    let data = undefined;\n    let filename = \"\";\n    if (typeof file === \"string\")\n    {\n        isGlb = getIsGlb(file);\n        let response = await axios.get(file, { responseType: isGlb ? \"arraybuffer\" : \"json\" });\n        json = response.data;\n        data = response.data;\n        filename = file;\n    }\n    else if (file instanceof ArrayBuffer)\n    {\n        isGlb = additionalFiles === undefined;\n        if (isGlb)\n        {\n            data = file;\n        }\n        else\n        {\n            // TODO\n        }\n    }\n    else if (typeof (File) !== 'undefined' && file instanceof File)\n    {\n        let fileContent = file;\n        filename = file.name;\n        isGlb = getIsGlb(filename);\n        if (isGlb)\n        {\n            data = await AsyncFileReader.readAsArrayBuffer(fileContent);\n        }\n        else\n        {\n            data = await AsyncFileReader.readAsText(fileContent);\n            json = JSON.parse(data);\n            buffers = additionalFiles;\n        }\n    }\n    else\n    {\n        console.error(\"Passed invalid type to loadGltf \" + typeof (file));\n    }\n\n    if (isGlb)\n    {\n        const glbParser = new GlbParser(data);\n        const glb = glbParser.extractGlbData();\n        json = glb.json;\n        buffers = glb.buffers;\n    }\n\n    const gltf = new glTF(filename);\n    gltf.ktxDecoder = view.ktxDecoder;\n    //Make sure draco decoder instance is ready\n    gltf.fromJson(json);\n\n    // because the gltf image paths are not relative\n    // to the gltf, we have to resolve all image paths before that\n    for (const image of gltf.images)\n    {\n        image.resolveRelativePath(getContainingFolder(gltf.path));\n    }\n\n    await gltfLoader.load(gltf, view.context, buffers);\n\n    return gltf;\n}\n\n\nasync function loadEnvironment(file, view, luts)\n{\n    let image = undefined;\n    if (typeof file === \"string\")\n    {\n        let response = await axios.get(file, { responseType: \"arraybuffer\" });\n\n        image = await loadHDR(new Uint8Array(response.data));\n    }\n    else if (file instanceof ArrayBuffer)\n    {\n        image = await loadHDR(new Uint8Array(file));\n    }\n    else\n    {\n        const imageData = await AsyncFileReader.readAsArrayBuffer(file).catch(() =>\n        {\n            console.error(\"Could not load image with FileReader\");\n        });\n        image = await loadHDR(new Uint8Array(imageData));\n    }\n    return loadEnvironmentFromImage(image, view, luts);\n}\n\n\nasync function loadEnvironmentFromImage(imageHDR, view, luts)\n{\n    // The environment uses the same type of samplers, textures and images as used in the glTF class\n    // so we just use it as a template\n    const environment = new glTF();\n\n    //\n    // Prepare samplers.\n    //\n\n    let samplerIdx = environment.samplers.length;\n\n    environment.samplers.push(new gltfSampler(GL.LINEAR, GL.LINEAR, GL.CLAMP_TO_EDGE, GL.CLAMP_TO_EDGE, \"DiffuseCubeMapSampler\"));\n    const diffuseCubeSamplerIdx = samplerIdx++;\n\n    environment.samplers.push(new gltfSampler(GL.LINEAR, GL.LINEAR_MIPMAP_LINEAR, GL.CLAMP_TO_EDGE, GL.CLAMP_TO_EDGE, \"SpecularCubeMapSampler\"));\n    const specularCubeSamplerIdx = samplerIdx++;\n\n    environment.samplers.push(new gltfSampler(GL.LINEAR, GL.LINEAR_MIPMAP_LINEAR, GL.CLAMP_TO_EDGE, GL.CLAMP_TO_EDGE, \"SheenCubeMapSampler\"));\n    const sheenCubeSamplerIdx = samplerIdx++;\n\n    environment.samplers.push(new gltfSampler(GL.LINEAR, GL.LINEAR, GL.CLAMP_TO_EDGE, GL.CLAMP_TO_EDGE, \"LUTSampler\"));\n    const lutSamplerIdx = samplerIdx++;\n\n    //\n    // Prepare images and textures.\n    //\n\n    let imageIdx = environment.images.length;\n\n    let environmentFiltering = new iblSampler(view);\n\n    environmentFiltering.init(imageHDR);\n    environmentFiltering.filterAll();\n\n    // Diffuse\n\n    const diffuseGltfImage = new gltfImage(\n        undefined,\n        GL.TEXTURE_CUBE_MAP,\n        0,\n        undefined,\n        \"Diffuse\",\n        ImageMimeType.GLTEXTURE,\n        environmentFiltering.lambertianTextureID\n    );\n\n    environment.images.push(diffuseGltfImage);\n\n    const diffuseTexture = new gltfTexture(\n        diffuseCubeSamplerIdx,\n        [imageIdx++],\n        GL.TEXTURE_CUBE_MAP,\n        environmentFiltering.lambertianTextureID);\n\n    environment.textures.push(diffuseTexture);\n\n    environment.diffuseEnvMap = new gltfTextureInfo(environment.textures.length - 1, 0, true);\n    environment.diffuseEnvMap.generateMips = false;\n\n\n\n    // Specular\n    const specularGltfImage = new gltfImage(\n        undefined,\n        GL.TEXTURE_CUBE_MAP,\n        0,\n        undefined,\n        \"Specular\",\n        ImageMimeType.GLTEXTURE,\n        environmentFiltering.ggxTextureID\n    );\n\n    environment.images.push(specularGltfImage);\n\n    const specularTexture = new gltfTexture(\n        specularCubeSamplerIdx,\n        [imageIdx++],\n        GL.TEXTURE_CUBE_MAP,\n        environmentFiltering.ggxTextureID);\n\n    environment.textures.push(specularTexture);\n\n    environment.specularEnvMap = new gltfTextureInfo(environment.textures.length - 1, 0, true);\n    environment.specularEnvMap.generateMips = false;\n\n\n    // Sheen\n    const sheenGltfImage = new gltfImage(\n        undefined,\n        GL.TEXTURE_CUBE_MAP,\n        0,\n        undefined,\n        \"Sheen\",\n        ImageMimeType.GLTEXTURE,\n        environmentFiltering.ggxTextureID\n    );\n\n    environment.images.push(sheenGltfImage);\n\n    const sheenTexture = new gltfTexture(\n        sheenCubeSamplerIdx,\n        [imageIdx++],\n        GL.TEXTURE_CUBE_MAP,\n        environmentFiltering.sheenTextureID);\n\n    environment.textures.push(sheenTexture);\n\n    environment.sheenEnvMap = new gltfTextureInfo(environment.textures.length - 1, 0, true);\n    environment.sheenEnvMap.generateMips = false;\n\n    /*\n        // Diffuse\n\n        const lambertian = new gltfImage(filteredEnvironmentsDirectoryPath + \"/lambertian/diffuse.ktx2\", GL.TEXTURE_CUBE_MAP);\n        lambertian.mimeType = ImageMimeType.KTX2;\n        environment.images.push(lambertian);\n        environment.textures.push(new gltfTexture(diffuseCubeSamplerIdx, [imageIdx++], GL.TEXTURE_CUBE_MAP));\n        environment.diffuseEnvMap = new gltfTextureInfo(environment.textures.length - 1, 0, true);\n        environment.diffuseEnvMap.generateMips = false;\n\n        // Specular\n\n        const specular = new gltfImage(filteredEnvironmentsDirectoryPath + \"/ggx/specular.ktx2\", GL.TEXTURE_CUBE_MAP);\n        specular.mimeType = ImageMimeType.KTX2;\n        environment.images.push(specular);\n        environment.textures.push(new gltfTexture(specularCubeSamplerIdx, [imageIdx++], GL.TEXTURE_CUBE_MAP));\n        environment.specularEnvMap = new gltfTextureInfo(environment.textures.length - 1, 0, true);\n        environment.specularEnvMap.generateMips = false;\n\n        const specularImage = environment.images[environment.textures[environment.textures.length - 1].source];\n\n        // Sheen\n\n        const sheen = new gltfImage(filteredEnvironmentsDirectoryPath + \"/charlie/sheen.ktx2\", GL.TEXTURE_CUBE_MAP);\n        sheen.mimeType = ImageMimeType.KTX2;\n        environment.images.push(sheen);\n        environment.textures.push(new gltfTexture(sheenCubeSamplerIdx, [imageIdx++], GL.TEXTURE_CUBE_MAP));\n        environment.sheenEnvMap = new gltfTextureInfo(environment.textures.length - 1, 0, true);\n        environment.sheenEnvMap.generateMips = false;*/\n\n    //\n    // Look Up Tables.\n    //\n\n    // GGX\n\n    if (luts === undefined)\n    {\n        luts = {\n            lut_ggx_file: \"assets/images/lut_ggx.png\",\n            lut_charlie_file: \"assets/images/lut_charlie.png\",\n            lut_sheen_E_file: \"assets/images/lut_sheen_E.png\",\n        };\n    }\n\n    environment.images.push(new gltfImage(luts.lut_ggx_file, GL.TEXTURE_2D, 0, undefined, undefined, ImageMimeType.PNG));\n    environment.textures.push(new gltfTexture(lutSamplerIdx, [imageIdx++], GL.TEXTURE_2D));\n\n    environment.lut = new gltfTextureInfo(environment.textures.length - 1);\n    environment.lut.generateMips = false;\n\n    // Sheen\n    // Charlie\n\n    environment.images.push(new gltfImage(luts.lut_charlie_file, GL.TEXTURE_2D, 0, undefined, undefined, ImageMimeType.PNG));\n    environment.textures.push(new gltfTexture(lutSamplerIdx, [imageIdx++], GL.TEXTURE_2D));\n\n    environment.sheenLUT = new gltfTextureInfo(environment.textures.length - 1);\n    environment.sheenLUT.generateMips = false;\n\n    // Sheen E LUT\n\n    environment.images.push(new gltfImage(luts.lut_sheen_E_file, GL.TEXTURE_2D, 0, undefined, undefined, ImageMimeType.PNG));\n    environment.textures.push(new gltfTexture(lutSamplerIdx, [imageIdx++], GL.TEXTURE_2D));\n\n    environment.sheenELUT = new gltfTextureInfo(environment.textures.length - 1);\n    environment.sheenELUT.generateMips = false;\n\n    await gltfLoader.loadImages(environment);\n\n    environment.initGl(view.context);\n\n    environment.mipCount = environmentFiltering.mipmapLevels;\n\n    return environment;\n}\n\nexport { loadGltf, loadEnvironment, initKtxLib, initDracoLib };\n"],"names":["jsToGl","array","tensor","glMatrix","ARRAY_TYPE","length","i","jsToGlSlice","offset","stride","initGlForMembers","gltfObj","gltf","webGlContext","name","Object","keys","member","undefined","initGl","Array","isArray","element","objectsFromJsons","jsonObjects","GltfType","objects","jsonObject","push","objectFromJson","object","fromJson","fromKeys","target","jsonObj","ignore","k","find","elem","replace","stringHash","str","seed","Math","imul","charCodeAt","clamp","number","min","max","getIsGlb","filename","getExtension","getIsGltf","getIsHdr","split","toLowerCase","getFileNameWithoutExtension","filePath","getFileName","index","lastIndexOf","slice","getContainingFolder","substring","combinePaths","parts","from","arguments","join","UniformStruct","AnimationTimer","[object Object]","this","startTime","paused","fixedTime","pausedTime","Date","getTime","unpause","pause","timeInSec","GltfObject","extensions","extras","json","gltfCamera","type","znear","zfar","Infinity","yfov","PI","aspectRatio","xmag","ymag","nodeIndex","super","node","cameraIndex","nodes","camera","cameras","console","error","jsonCamera","perspective","orthographic","drawables","drawable","modelView","mat4","create","multiply","getViewMatrix","worldTransform","pos","vec3","transformMat4","clone","primitive","centroid","depth","filter","a","sort","b","projection","view","position","getPosition","getTarget","lookAt","fromValues","lookDirection","getLookDirection","add","getNode","getTranslation","direction","rotation","getRotation","transformQuat","quat","ynear","mat","matrix","getExtentsFromAccessor","accessor","outMin","outMax","boxMin","boxMax","center","scale","centerToSurface","sub","radius","computePrimitiveCentroids","primitives","mesh","map","meshes","reduce","acc","concat","positions","accessors","attributes","POSITION","getTypedView","indices","Float32Array","setCentroid","positionVectors","VecZero","UserCamera","yaw","pitch","distance","zoomFactor","orbitSpeed","panSpeed","sceneExtents","toGlobalOrientation","to","difference","subtract","projectedDifference","angle","value","fitCameraPlanesToExtents","x","y","yMax","left","up","longestDistance","fitDistanceToExtents","fitCameraTargetToExtents","sceneIndex","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","nodeIndices","scenes","pop","children","attribute","glAttributes","assetMin","assetMax","getSceneExtents","fitPanSpeedToScene","vector","rotateX","rotateY","maxAxisLength","xfov","yZoom","tan","xZoom","zNear","zFar","isPowerOf2","n","AsyncFileReader","path","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsArrayBuffer","readAsText","readAsDataURL","ImageMimeType","GL","gltfWebGl","context","webglExtensions","extension","warn","loc","textureInfo","texSlot","gltfTex","textures","image","images","source","mimeType","glTexture","initialized","createTexture","activeTexture","TEXTURE0","bindTexture","uniform1i","gltfSampler","samplers","sampler","pixelStorei","UNPACK_FLIP_Y_WEBGL","internalformat","linear","SRGB8_ALPHA8","RGBA","texImage2D","miplevel","UNSIGNED_BYTE","generateMips","shouldGenerateMips","setSampler","minFilter","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","generateMipmap","accessorIndex","gltfAccessor","glBuffer","createBuffer","data","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","STATIC_DRAW","attributeLocation","bufferView","gltfBufferView","bufferViews","ARRAY_BUFFER","vertexAttribPointer","getComponentCount","componentType","normalized","byteStride","enableVertexAttribArray","shaderIdentifier","isVert","shaderSource","shader","createShader","VERTEX_SHADER","FRAGMENT_SHADER","compileShader","getShaderParameter","COMPILE_STATUS","info","messages","getShaderInfoLog","message","matches","match","lineNumber","parseInt","lines","Error","vertex","fragment","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","gltfSamplerObj","generateMipmaps","texParameteri","TEXTURE_WRAP_S","wrapS","TEXTURE_WRAP_T","wrapT","CLAMP_TO_EDGE","NEAREST","LINEAR","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","magFilter","supports_EXT_texture_filter_anisotropic","texParameterf","anisotropy","maxAnisotropy","gltfImage","uri","TEXTURE_2D","basePath","String","startsWith","substr","additionalFiles","setImageFromBufferView","setImageFromFiles","setImageFromUri","url","Image","addEventListener","src","crossOrigin","ktxDecoder","loadKtxFromUri","ArrayBuffer","jpeg.decode","useTArray","png.decode","loadHTMLImage","catch","buffer","buffers","Uint8Array","byteOffset","byteLength","loadKtxFromBuffer","blob","Blob","objectURL","URL","createObjectURL","files","foundFile","file","fullPath","arrayBuffer","imageData","width","height","ToneMaps","NONE","ACES_FAST","ACES","DebugOutput","METALLIC","ROUGHNESS","NORMAL","WORLDSPACENORMAL","GEOMETRYNORMAL","TANGENT","BITANGENT","BASECOLOR","OCCLUSION","EMISSIVE","DIFFUSE","SPECULAR","CLEARCOAT","SHEEN","TRANSMISSION","ALPHA","F0","GltfState","environment","renderingParameters","morphing","skinning","clearColor","exposure","usePunctual","useIBL","toneMap","debugOutput","environmentBackground","environmentRotation","userCamera","animationIndices","animationTimer","variant","gltfShader","hash","gl","uniforms","Map","unknownAttributes","unknownUniforms","uniformCount","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","set","attribCount","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","deleteProgram","get","log","uniform","objectName","updateUniformStruct","updateUniformArray","updateUniformValue","arrayName","uniformName","updateUniform","flat","apply","structName","memberNames","memberName","FLOAT","uniform1fv","uniform1f","FLOAT_VEC2","uniform2fv","FLOAT_VEC3","uniform3fv","FLOAT_VEC4","uniform4fv","INT","Uint32Array","Int32Array","uniform1iv","INT_VEC2","uniform2iv","INT_VEC3","uniform3iv","INT_VEC4","uniform4iv","FLOAT_MAT2","uniformMatrix2fv","FLOAT_MAT3","uniformMatrix3fv","FLOAT_MAT4","uniformMatrix4fv","ShaderCache","sources","shaders","programs","key","changed","includeName","includeSource","pattern","includes","entries","deleteShader","clear","destroy","permutationDefines","endsWith","defines","define","vertexShaderHash","fragmentShaderHash","hash1","hash2","linkedProg","gltfRenderer","currentWidth","currentHeight","webGl","opaqueRenderTexture","opaqueFramebuffer","opaqueDepthTexture","opaqueFramebufferWidth","opaqueFramebufferHeight","shaderSources","shaderCache","loadWebGlExtensions","visibleLights","viewMatrix","projMatrix","viewProjectionMatrix","currentCameraPosition","init","UNPACK_COLORSPACE_CONVERSION_WEBGL","enable","DEPTH_TEST","depthFunc","LEQUAL","colorMask","clearDepth","DEPTH_COMPONENT16","DEPTH_COMPONENT","UNSIGNED_SHORT","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","DEPTH_ATTACHMENT","viewport","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","state","scene","currentCamera","getProjectionMatrix","getVisibleLights","gatherNodes","skin","updateSkin","material","opaqueDrawables","materials","alphaMode","KHR_materials_transmission","transparentDrawables","sortPrimitivesByDepth","drawPrimitive","transmissionDrawables","transmissionSampleTexture","skip","mappings","idx","variants","obj","indexOf","materialIdx","forEach","vertDefines","pushVertParameterDefines","getDefines","fragDefines","pushFragParameterDefines","fragmentHash","selectShader","getShaderIdentifier","vertexHash","getShaderProgram","useProgram","applyLights","normalMatrix","updateAnimationUniforms","determinant","frontFace","CW","CCW","doubleSided","disable","CULL_FACE","BLEND","blendFuncSeparate","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","blendEquation","FUNC_ADD","drawIndexed","setIndices","vertexCount","count","location","getAttributeLocation","enableAttribute","val","getProperties","samplerName","setTexture","textureCount","applyEnvironmentMap","sheenELUT","uniform2i","indexAccessor","drawElements","mode","drawArrays","disableVertexAttribArray","lights","light","includesNode","skins","computeJoints","parameters","hasWeights","hasJoints","jointMatrices","targets","weights","hasNormals","jointNormalMatrices","uniformLights","toUniform","texSlotOffset","diffuseEnvMap","specularEnvMap","lut","sheenEnvMap","sheenLUT","mipCount","rotMatrix4","rotMatrix3","mat3","fromMat4","GltfView","ui","renderer","canvas","window","innerWidth","getBoundingClientRect","clientWidth","clientHeight","resize","clearFrame","applyTransformHierarchy","drawScene","animations","t","elapsedSec","animation","advance","activeMeshes","activePrimitives","activeMaterials","Set","opaqueMaterials","transparentMaterials","faceCount","verticesCount","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","meshCount","opaqueMaterialsCount","transparentMaterialsCount","update","animate","updateCanvas","updateViewport","renderFrame","requestAnimationFrame","sparse","typedView","filteredView","componentSize","getComponentSize","componentCount","arrayLength","BYTE","Int8Array","SHORT","Int16Array","Uint16Array","UNSIGNED_INT","applySparse","dv","DataView","func","floor","indicesBufferView","indicesBuffer","indicesByteOffset","indicesComponentSize","indicesComponentCount","indicesArrayLength","indicesTypedView","valuesBufferView","values","valuesBuffer","valuesByteOffset","valuesComponentSize","valuesComponentCount","valuesArrayLength","valuesTypedView","CompononentCount","WebGl","deleteBuffer","gltfBuffer","self","setBufferFromFiles","sefBufferFromUri","callback","axios","responseType","then","response","onloadend","event","gltfLight","color","intensity","innerConeAngle","outerConeAngle","range","nodeExtensions","lightsExtension","KHR_lights_punctual","lightIndex","jsonLight","spot","uLight","UniformLight","getScaling","mn","col","normalize","alongNegativeZ","translation","innerConeCos","cos","outerConeCos","Type_Spot","Type_Point","Type_Directional","defaultDirection","padding1","padding2","ImageBasedLight","brightnessFactor","brightnessOffset","specularEnvironmentTexture","diffuseEnvironmentTexture","sheenEnvironmentTexture","levelCount","jsonIBL","fromJsonExtensions","KHR_materials_sheen","TEXTURE_CUBE_MAP","textureObject","imageObject","gltfTexture","texture","mipLevelCount","jsonTexture","KHR_texture_basisu","deleteTexture","gltfTextureInfo","texCoord","strength","jsonTextureInfo","gltfMaterial","pbrMetallicRoughness","normalTexture","occlusionTexture","emissiveTexture","emissiveFactor","alphaCutoff","properties","defaultMaterial","baseColorFactor","vec4","textureKey","KHR_texture_transform","uvTransform","s","sin","c","uvMatrix","toUpperCase","parseTextureInfoExtensions","baseColorTexture","metallicRoughnessTexture","diffuseTexture","specularGlossinessTexture","metallicFactor","roughnessFactor","KHR_materials_unlit","KHR_materials_pbrSpecularGlossiness","diffuseFactor","specularFactor","glossinessFactor","KHR_materials_clearcoat","clearcoatFactor","clearcoatRoughnessFactor","clearcoatTexture","clearcoatRoughnessTexture","clearcoatNormalTexture","sheenRoughnessFactor","sheenColorFactor","sheenRoughnessTexture","sheenColorTexture","transmissionFactor","transmissionTexture","jsonMaterial","fromJsonMaterialExtensions","fromJsonMetallicRoughness","jsonExtensions","fromJsonSpecularGlossiness","fromJsonClearcoat","fromJsonSheen","fromJsonTransmission","jsonMetallicRoughness","jsonSpecularGlossiness","jsonClearcoat","jsonSheen","jsonTransmission","DracoDecoder","dracoLib","instance","DracoDecoderModule","module","initializingPromise","dracoDecoderType","dracoDecoderModule","freeze","gltfPrimitive","hasTangents","hasTexcoord","hasColor","maxAttributes","getParameter","MAX_VERTEX_ATTRIBS","KHR_draco_mesh_compression","dracoDecoder","isFrozen","dracoGeometry","decodeDracoBufferToIntermediate","copyDataFromDecodedGeometry","jsonPrimitive","fromJsonPrimitiveExtensions","KHR_materials_variants","fromJsonVariants","jsonVariants","primitiveAttributes","indexBuffer","loadBufferIntoGltf","positionBuffer","loadArrayIntoArrayBuffer","normalBuffer","TEXCOORD_0","uvBuffer","TEXCOORD_1","tangentBuffer","COLOR_0","colorBuffer","JOINTS_0","jointsBuffer","WEIGHTS_0","weightsBuffer","JOINTS_1","WEIGHTS_1","gltfAccessorIndex","gltfBufferViewTarget","gltfBufferViewName","gltfBufferObj","gltfBufferViewObj","arrayData","dracoExtension","dracoBufferViewIDX","origGltfDrBufViewObj","origGltfDracoBuffer","actualBuffer","draco","decoder","Decoder","decoderBuffer","DecoderBuffer","Init","geometry","decodeGeometry","gltfDracoAttributes","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","Mesh","DecodeBufferToMesh","ok","ptr","error_msg","num_points","dracoAttr","accessotVertexCount","getDracoArrayTypeFromComponentType","dracoAttribute","GetAttributeByUniqueId","tmpObj","decodeAttribute","numIndices","num_faces","dataSize","_malloc","GetTrianglesUInt32Array","HEAPU32","_free","itemSize","attributeName","attributeType","numComponents","num_components","numValues","GetAttributeDataArrayForAllPoints","DT_FLOAT32","HEAPF32","DT_INT8","HEAP8","DT_INT16","HEAP16","DT_INT32","HEAP32","DT_UINT8","HEAPU8","DT_UINT16","HEAPU16","DT_UINT32","gltfMesh","jsonMesh","gltfNode","inverseWorldTransform","applyMatrix","matrixData","transform","fromRotationTranslationScale","REPEAT","gltfScene","imageBasedLight","KHR_lights_image_based","imageBasedLights","rootTransform","applyTransform","parentTransform","getLocalTransform","invert","transpose","child","gatherNode","childIndex","gltfAsset","copyright","generator","version","minVersion","gltfAnimationChannel","InterpolationPath","gltfAnimationSampler","input","interpolation","output","InterpolationModes","gltfInterpolator","prevKey","prevT","q1","q2","qn1","qn2","quatResult","slerp","nextKey","keyDelta","prevIndex","nextIndex","V","B","tSq","tCub","v0","v1","channel","maxTime","getDeinterlacedView","tn","cubicSpline","q0","getQuat","slerpQuat","step","z","w","gltfAnimation","channels","interpolators","jsonAnimation","totalTime","interpolator","applyTranslation","interpolate","applyRotation","applyScale","gltfSkin","inverseBindMatrices","joints","skeleton","parentNode","ibmAccessor","joint","jointMatrix","ibm","mul","gltfVariant","jsonVariant","glTF","asset","getJsonLightsFromExtensions","getJsonIBLsFromExtensions","getJsonVariantsFromExtension","j","enforceVariantsUniqueness","createDefault","GlbParser","glbHeaderInts","glbChunkHeaderInts","glbMagic","glbVersion","jsonChunkType","binaryChunkType","getCheckedGlbInfo","chunkInfos","getAllChunkInfos","chunkInfo","getBufferFromChunk","getJsonFromChunk","header","magic","checkEquality","infos","chunkStart","getChunkInfo","headerStart","start","chunkLength","jsonStart","jsonSlice","stringBuffer","TextDecoder","decode","JSON","parse","actual","expected","gltfLoader","appendix","getBuffers","getAdditionalFiles","buffersPromise","loadBuffers","imagesPromise","loadImages","all","getTypedAppendix","File","Type","promises","load","imagePromises","iblSampler","textureSize","sampleCount","lodBias","mipmapCount","lambertianTextureID","ggxTextureID","sheenTextureID","inputTextureID","cubemapTextureID","framebuffer","internalFormat","RGB32F","format","RGB","dataFloat","RGBA32F","numPixels","MIRRORED_REPEAT","withMipmaps","targetTexture","use8bit","RGBA8","TEXTURE_CUBE_MAP_POSITIVE_X","panoramaImage","loadTextureHDR","createCubemapTexture","mipmapLevels","log2","panoramaToCubeMap","cubeMapToLambertian","cubeMapToGGX","cubeMapToSheen","side","distribution","roughness","targetMipLevel","currentTextureSize","applyFilter","currentMipLevel","KtxDecoder","externalKtxlib","libktx","LIBKTX","initializied","preinitializedWebGLContext","makeContextCurrent","createContext","majorVersion","ktexture","needsTranscoding","astcSupported","etcSupported","dxtSupported","pvrtcSupported","TranscodeTarget","ASTC_4x4_RGBA","BC1_OR_3","PVRTC1_4_RGBA","ETC","RGBA8888","transcodeBasis","ErrorCode","SUCCESS","fetch","ktxTexture","transcode","uploadResult","glUpload","levels","baseWidth","async","loadHDR","d8","fromCharCode","rez","reverse","img","ipos","scanline","rgbe","ptr_end","buf","pow","_rgbeToFloat","initKtxLib","ktxlib","initDracoLib","dracolib","ready","loadGltf","isGlb","fileContent","glb","extractGlbData","resolveRelativePath","loadEnvironment","luts","imageHDR","samplerIdx","diffuseCubeSamplerIdx","specularCubeSamplerIdx","sheenCubeSamplerIdx","lutSamplerIdx","imageIdx","environmentFiltering","filterAll","diffuseGltfImage","specularGltfImage","specularTexture","sheenGltfImage","sheenTexture","lut_ggx_file","lut_charlie_file","lut_sheen_E_file","loadEnvironmentFromImage"],"mappings":"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"}