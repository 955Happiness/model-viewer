{"version":3,"file":"gltf-viewer.js","sources":["../source/gltf/utils.js","../source/gltf/gltf_object.js","../source/gltf/camera.js","../source/gltf/gltf_utils.js","../source/gltf/user_camera.js","../source/gltf/math_utils.js","../source/ResourceLoader/async_file_reader.js","../source/gltf/image_mime_type.js","../source/Renderer/webgl.js","../source/gltf/image.js","../source/Renderer/rendering_parameters.js","../source/GltfState/gltf_state.js","../source/Renderer/shader.js","../source/Renderer/shader_cache.js","../source/Renderer/renderer.js","../source/gltf/accessor.js","../source/gltf/buffer.js","../source/gltf/buffer_view.js","../source/gltf/light.js","../source/gltf/image_based_light.js","../source/gltf/texture.js","../source/gltf/material.js","../source/ResourceLoader/draco.js","../source/gltf/primitive.js","../source/gltf/mesh.js","../source/gltf/node.js","../source/gltf/sampler.js","../source/gltf/scene.js","../source/gltf/asset.js","../source/gltf/channel.js","../source/gltf/animation_sampler.js","../source/gltf/interpolator.js","../source/gltf/animation.js","../source/gltf/skin.js","../source/gltf/variant.js","../source/gltf/gltf.js","../source/ResourceLoader/glb_parser.js","../source/ResourceLoader/loader.js","../source/ibl_sampler.js","../source/ResourceLoader/ktx.js","../source/libs/hdrpng.js","../source/GltfView/gltf_view.js","../source/ResourceLoader/resource_loader.js"],"sourcesContent":["import { glMatrix } from 'gl-matrix';\n\nfunction jsToGl(array)\n{\n    let tensor = new glMatrix.ARRAY_TYPE(array.length);\n\n    for (let i = 0; i < array.length; ++i)\n    {\n        tensor[i] = array[i];\n    }\n\n    return tensor;\n}\n\nfunction jsToGlSlice(array, offset, stride)\n{\n    let tensor = new glMatrix.ARRAY_TYPE(stride);\n\n    for (let i = 0; i < stride; ++i)\n    {\n        tensor[i] = array[offset + i];\n    }\n\n    return tensor;\n}\n\nfunction initGlForMembers(gltfObj, gltf, webGlContext)\n{\n    for (const name of Object.keys(gltfObj))\n    {\n        const member = gltfObj[name];\n\n        if (member === undefined)\n        {\n            continue;\n        }\n        if (member.initGl !== undefined)\n        {\n            member.initGl(gltf, webGlContext);\n        }\n        if (Array.isArray(member))\n        {\n            for (const element of member)\n            {\n                if (element !== null && element !== undefined && element.initGl !== undefined)\n                {\n                    element.initGl(gltf, webGlContext);\n                }\n            }\n        }\n    }\n}\n\nfunction objectsFromJsons(jsonObjects, GltfType)\n{\n    if (jsonObjects === undefined)\n    {\n        return [];\n    }\n\n    const objects = [];\n    for (const jsonObject of jsonObjects)\n    {\n        objects.push(objectFromJson(jsonObject, GltfType));\n    }\n    return objects;\n}\n\nfunction objectFromJson(jsonObject, GltfType)\n{\n    const object = new GltfType();\n    object.fromJson(jsonObject);\n    return object;\n}\n\nfunction fromKeys(target, jsonObj, ignore = [])\n{\n    for(let k of Object.keys(target))\n    {\n        if (ignore && ignore.find(function(elem){return elem == k;}) !== undefined)\n        {\n            continue; // skip\n        }\n        if (jsonObj[k] !== undefined)\n        {\n            let normalizedK = k.replace(\"^@\", \"\");\n            target[normalizedK] = jsonObj[k];\n        }\n    }\n}\n\nfunction fromParams(parameters, target, jsonObj)\n{\n    for (let p of parameters)\n    {\n        if(jsonObj[p] !== undefined)\n        {\n            target[p] = jsonObj[p];\n        }\n    }\n}\n\nfunction stringHash(str, seed = 0)\n{\n    for(var i = 0; i < str.length; ++i)\n    {\n        seed = Math.imul(31, seed) + str.charCodeAt(i) | 0;\n    }\n\n    return seed;\n}\n\nfunction combineHashes(hash1, hash2)\n{\n    return hash1 ^ (hash1 + 0x9e3779b9 + (hash2 << 6) + (hash2 >> 2));\n}\n\nfunction clamp(number, min, max)\n{\n    return Math.min(Math.max(number, min), max);\n}\n\nfunction getIsGlb(filename)\n{\n    return getExtension(filename) == \"glb\";\n}\n\nfunction getIsGltf(filename)\n{\n    return getExtension(filename) == \"gltf\";\n}\n\nfunction getIsHdr(filename)\n{\n    return getExtension(filename) == \"hdr\";\n}\n\nfunction getExtension(filename)\n{\n    const split = filename.toLowerCase().split(\".\");\n    if (split.length == 1)\n    {\n        return undefined;\n    }\n    return split[split.length - 1];\n}\n\nfunction getFileName(filePath)\n{\n    const split = filePath.split(\"/\");\n    return split[split.length - 1];\n}\n\nfunction getFileNameWithoutExtension(filePath)\n{\n    const filename = getFileName(filePath);\n    const index = filename.lastIndexOf(\".\");\n    return filename.slice(0, index);\n}\n\nfunction getContainingFolder(filePath)\n{\n    return filePath.substring(0, filePath.lastIndexOf(\"/\") + 1);\n}\n\nfunction combinePaths()\n{\n    const parts = Array.from(arguments);\n    return parts.join(\"/\");\n}\n\n// marker interface used to for parsing the uniforms\nclass UniformStruct { }\n\nclass Timer\n{\n    constructor()\n    {\n        this.startTime = undefined;\n        this.endTime = undefined;\n        this.seconds = undefined;\n    }\n\n    start()\n    {\n        this.startTime = new Date().getTime() / 1000;\n        this.endTime = undefined;\n        this.seconds = undefined;\n    }\n\n    stop()\n    {\n        this.endTime = new Date().getTime() / 1000;\n        this.seconds = this.endTime - this.startTime;\n    }\n}\n\nclass AnimationTimer\n{\n    constructor()\n    {\n        this.startTime = 0;\n        this.paused = true;\n        this.fixedTime = null;\n        this.pausedTime = 0;\n    }\n\n    elapsedSec()\n    {\n        if(this.paused)\n        {\n            return this.pausedTime / 1000;\n        }\n        else\n        {\n            return this.fixedTime || (new Date().getTime() - this.startTime) / 1000;\n        }\n    }\n\n    toggle()\n    {\n        if(this.paused)\n        {\n            this.unpause();\n        }\n        else\n        {\n            this.pause();\n        }\n    }\n\n    start()\n    {\n        this.startTime = new Date().getTime();\n        this.paused = false;\n    }\n\n    pause()\n    {\n        this.pausedTime = new Date().getTime() - this.startTime;\n        this.paused = true;\n    }\n\n    unpause()\n    {\n        this.startTime += new Date().getTime() - this.startTime - this.pausedTime;\n        this.paused = false;\n    }\n\n    reset()\n    {\n        if(!this.paused) {\n            // Animation is running.\n            this.startTime = new Date().getTime();\n        }\n        else {\n            this.startTime = 0;\n        }\n        this.pausedTime = 0;\n    }\n\n    setFixedTime(timeInSec)\n    {\n        this.paused = false;\n        this.fixedTime = timeInSec;\n    }\n}\n\nexport {\n    jsToGl,\n    jsToGlSlice,\n    objectsFromJsons,\n    objectFromJson,\n    fromKeys,\n    fromParams,\n    stringHash,\n    combineHashes,\n    clamp,\n    getIsGlb,\n    getIsGltf,\n    getIsHdr,\n    getExtension,\n    getFileName,\n    getFileNameWithoutExtension,\n    getContainingFolder,\n    combinePaths,\n    UniformStruct,\n    Timer,\n    AnimationTimer,\n    initGlForMembers\n};\n","import { initGlForMembers, fromKeys } from \"./utils\";\n\n// base class for all gltf objects\nclass GltfObject\n{\n    constructor()\n    {\n        this.extensions = undefined;\n        this.extras = undefined;\n    }\n\n    fromJson(json)\n    {\n        fromKeys(this, json);\n    }\n\n    initGl(gltf, webGlContext)\n    {\n        initGlForMembers(this, gltf, webGlContext);\n    }\n}\n\nexport { GltfObject };\n","import { mat4, vec3, quat } from 'gl-matrix';\nimport { fromKeys } from './utils.js';\nimport { GltfObject } from './gltf_object.js';\n\nclass gltfCamera extends GltfObject\n{\n    constructor(\n        type = \"perspective\",\n        znear = 0.01,\n        zfar = Infinity,\n        yfov = 45.0 * Math.PI / 180.0,\n        aspectRatio = undefined,\n        xmag = 1.0,\n        ymag = 1.0,\n        name = undefined,\n        nodeIndex = undefined)\n    {\n        super();\n        this.type = type;\n        this.znear = znear;\n        this.zfar = zfar;\n        this.yfov = yfov; // radians\n        this.xmag = xmag;\n        this.ymag = ymag;\n        this.aspectRatio = aspectRatio;\n        this.name = name;\n        this.node = nodeIndex;\n    }\n\n    initGl(gltf, webGlContext)\n    {\n        super.initGl(gltf, webGlContext);\n\n        let cameraIndex = undefined;\n        for (let i = 0; i < gltf.nodes.length; i++)\n        {\n            cameraIndex = gltf.nodes[i].camera;\n            if (cameraIndex === undefined)\n            {\n                continue;\n            }\n\n            if (gltf.cameras[cameraIndex] === this)\n            {\n                this.node = i;\n                break;\n            }\n        }\n\n        // cameraIndex stays undefined if camera is not assigned to any node\n        if(this.node === undefined && cameraIndex !== undefined)\n        {\n            console.error(\"Invalid node for camera \" + cameraIndex);\n        }\n    }\n\n    fromJson(jsonCamera)\n    {\n        this.name = name;\n        if(jsonCamera.perspective !== undefined)\n        {\n            this.type = \"perspective\";\n            fromKeys(this, jsonCamera.perspective);\n        }\n        else if(jsonCamera.orthographic !== undefined)\n        {\n            this.type = \"orthographic\";\n            fromKeys(this, jsonCamera.orthographic);\n        }\n    }\n\n    sortPrimitivesByDepth(gltf, drawables)\n    {\n        // Precompute the distances to avoid their computation during sorting.\n        for (const drawable of drawables)\n        {\n            const modelView = mat4.create();\n            mat4.multiply(modelView, this.getViewMatrix(gltf), drawable.node.worldTransform);\n\n            // Transform primitive centroid to find the primitive's depth.\n            const pos = vec3.transformMat4(vec3.create(), vec3.clone(drawable.primitive.centroid), modelView);\n\n            drawable.depth = pos[2];\n        }\n\n        // 1. Remove primitives that are behind the camera.\n        //    --> They will never be visible and it is cheap to discard them here.\n        // 2. Sort primitives so that the furthest nodes are rendered first.\n        //    This is required for correct transparency rendering.\n        return drawables\n            .filter((a) => a.depth <= 0)\n            .sort((a, b) => a.depth - b.depth);\n    }\n\n    getProjectionMatrix()\n    {\n        const projection = mat4.create();\n\n        if (this.type === \"perspective\")\n        {\n            mat4.perspective(projection, this.yfov, this.aspectRatio, this.znear, this.zfar);\n        }\n        else if (this.type === \"orthographic\")\n        {\n            projection[0]  = 1.0 / this.xmag;\n            projection[5]  = 1.0 / this.ymag;\n            projection[10] = 2.0 / (this.znear - this.zfar);\n            projection[14] = (this.zfar + this.znear) / (this.znear - this.zfar);\n        }\n\n        return projection;\n    }\n\n    getViewMatrix(gltf)\n    {\n        const view = mat4.create();\n        const position = this.getPosition(gltf);\n        const target = this.getTarget(gltf);\n        mat4.lookAt(view, position, target, vec3.fromValues(0, 1, 0));\n        return view;\n    }\n\n    getTarget(gltf)\n    {\n        const target = vec3.create();\n        const position = this.getPosition(gltf);\n        const lookDirection = this.getLookDirection(gltf);\n        vec3.add(target, lookDirection, position);\n        return target;\n    }\n\n    getPosition(gltf)\n    {\n        const position = vec3.create();\n        const node = this.getNode(gltf);\n        mat4.getTranslation(position, node.worldTransform);\n        return position;\n    }\n\n    getLookDirection(gltf)\n    {\n        const direction = vec3.create();\n        const rotation = this.getRotation(gltf);\n        vec3.transformQuat(direction, vec3.fromValues(0, 0, -1), rotation);\n        return direction;\n    }\n\n    getRotation(gltf)\n    {\n        const rotation = quat.create();\n        const node = this.getNode(gltf);\n        mat4.getRotation(rotation, node.worldTransform);\n        return rotation;\n    }\n\n    clone()\n    {\n        return new gltfCamera(\n            this.type,\n            this.znear,\n            this.zfar,\n            this.yfov,\n            this.aspectRatio,\n            this.xmag,\n            this.ymag,\n            this.name,\n            this.node);\n    }\n\n    getNode(gltf)\n    {\n        return gltf.nodes[this.node];\n    }\n\n    // Returns a JSON object describing the user camera's current values.\n    getDescription(gltf)\n    {\n        const camera = {\n            \"type\": this.type\n        };\n\n        if (this.name != undefined)\n        {\n            camera[\"name\"] = this.name;\n        }\n\n        if (this.type === \"perspective\")\n        {\n            if (this.aspectRatio != undefined)\n            {\n                camera[\"perspective\"][\"aspectRatio\"] = this.aspectRatio;\n            }\n            camera[\"perspective\"][\"yfov\"] = this.yfov;\n            if (this.zfar != Infinity)\n            {\n                camera[\"perspective\"][\"zfar\"] = this.zfar;\n            }\n            camera[\"perspective\"][\"ynear\"] = this.ynear;\n        }\n        else if (this.type === \"orthographic\")\n        {\n            camera[\"orthographic\"][\"xmag\"] = this.xmag;\n            camera[\"orthographic\"][\"ymag\"] = this.ymag;\n            camera[\"orthographic\"][\"zfar\"] = this.zfar;\n            camera[\"orthographic\"][\"ynear\"] = this.ynear;\n        }\n\n        const mat = this.getViewMatrix(gltf);\n\n        const node = {\n            \"camera\": 0,\n            \"matrix\": [mat[0], mat[1], mat[2], mat[3],\n                       mat[4], mat[5], mat[6], mat[7],\n                       mat[8], mat[9], mat[10], mat[11],\n                       mat[12], mat[13], mat[14], mat[15]]\n        };\n\n        if (this.nodeIndex != undefined && gltf.nodes[this.nodeIndex].name != undefined)\n        {\n            node[\"name\"] = gltf.nodes[this.nodeIndex].name;\n        }\n\n        return {\n            \"node\": node,\n            \"camera\": camera\n        }\n    }\n}\n\nexport { gltfCamera };\n","import { vec3 } from 'gl-matrix';\nimport { jsToGl } from './utils.js';\n\nfunction getSceneExtents(gltf, sceneIndex, outMin, outMax)\n{\n    for (const i of [0, 1, 2])\n    {\n        outMin[i] = Number.POSITIVE_INFINITY;\n        outMax[i] = Number.NEGATIVE_INFINITY;\n    }\n\n    const scene = gltf.scenes[sceneIndex];\n\n    let nodeIndices = scene.nodes.slice();\n    while(nodeIndices.length > 0)\n    {\n        const node = gltf.nodes[nodeIndices.pop()];\n        nodeIndices = nodeIndices.concat(node.children);\n\n        if (node.mesh === undefined)\n        {\n            continue;\n        }\n\n        const mesh = gltf.meshes[node.mesh];\n        if (mesh.primitives === undefined)\n        {\n            continue;\n        }\n\n        for (const primitive of mesh.primitives)\n        {\n            const attribute = primitive.glAttributes.find(a => a.attribute == \"POSITION\");\n            if (attribute === undefined)\n            {\n                continue;\n            }\n\n            const accessor = gltf.accessors[attribute.accessor];\n            const assetMin = vec3.create();\n            const assetMax = vec3.create();\n            getExtentsFromAccessor(accessor, node.worldTransform, assetMin, assetMax);\n\n            for (const i of [0, 1, 2])\n            {\n                outMin[i] = Math.min(outMin[i], assetMin[i]);\n                outMax[i] = Math.max(outMax[i], assetMax[i]);\n            }\n        }\n    }\n}\n\nfunction getExtentsFromAccessor(accessor, worldTransform, outMin, outMax)\n{\n    const boxMin = vec3.create();\n    vec3.transformMat4(boxMin, jsToGl(accessor.min), worldTransform);\n\n    const boxMax = vec3.create();\n    vec3.transformMat4(boxMax, jsToGl(accessor.max), worldTransform);\n\n    const center = vec3.create();\n    vec3.add(center, boxMax, boxMin);\n    vec3.scale(center, center, 0.5);\n\n    const centerToSurface = vec3.create();\n    vec3.sub(centerToSurface, boxMax, center);\n\n    const radius = vec3.length(centerToSurface);\n\n    for (const i of [0, 1, 2])\n    {\n        outMin[i] = center[i] - radius;\n        outMax[i] = center[i] + radius;\n    }\n}\n\nfunction computePrimitiveCentroids(gltf)\n{\n    const meshes = gltf.nodes.filter(node => node.mesh !== undefined).map(node => gltf.meshes[node.mesh]);\n    const primitives = meshes.reduce((acc, mesh) => acc.concat(mesh.primitives), []);\n    for(const primitive of primitives) {\n\n        const positionsAccessor = gltf.accessors[primitive.attributes.POSITION];\n        const positions = positionsAccessor.getTypedView(gltf);\n\n        if(primitive.indices !== undefined)\n        {\n            // Primitive has indices.\n\n            const indicesAccessor = gltf.accessors[primitive.indices];\n\n            const indices = indicesAccessor.getTypedView(gltf);\n\n            const acc = new Float32Array(3);\n\n            for(let i = 0; i < indices.length; i++) {\n                const offset = 3 * indices[i];\n                acc[0] += positions[offset];\n                acc[1] += positions[offset + 1];\n                acc[2] += positions[offset + 2];\n            }\n\n            const centroid = new Float32Array([\n                acc[0] / indices.length,\n                acc[1] / indices.length,\n                acc[2] / indices.length,\n            ]);\n\n            primitive.setCentroid(centroid);\n        }\n        else\n        {\n            // Primitive does not have indices.\n\n            const acc = new Float32Array(3);\n\n            for(let i = 0; i < positions.length; i += 3) {\n                acc[0] += positions[i];\n                acc[1] += positions[i + 1];\n                acc[2] += positions[i + 2];\n            }\n\n            const positionVectors = positions.length / 3;\n\n            const centroid = new Float32Array([\n                acc[0] / positionVectors,\n                acc[1] / positionVectors,\n                acc[2] / positionVectors,\n            ]);\n\n            primitive.setCentroid(centroid);\n        }\n\n    }\n}\n\nexport { getSceneExtents, computePrimitiveCentroids };\n","import { vec3 } from 'gl-matrix';\nimport { gltfCamera } from './camera.js';\nimport { jsToGl, clamp } from './utils.js';\nimport { getSceneExtents } from './gltf_utils.js';\n\nconst VecZero = vec3.create();\nconst PanSpeedDenominator = 1200;\nconst MaxNearFarRatio = 10000;\n\nclass UserCamera extends gltfCamera\n{\n    constructor(\n        target = [0, 0, 0],\n        yaw = 0,\n        pitch = 0,\n        distance = 1)\n    {\n        super();\n\n        this.target = jsToGl(target);\n        this.yaw = yaw;\n        this.pitch = pitch;\n        this.distance = distance;\n        this.zoomFactor = 1.04;\n        this.orbitSpeed = 1 / 180;\n        this.panSpeed = 1;\n        this.sceneExtents = {\n            min: vec3.create(),\n            max: vec3.create()\n        };\n    }\n\n    setVerticalFoV(yfov)\n    {\n        this.yfov = yfov;\n    }\n\n    getPosition()\n    {\n        // calculate direction from focus to camera (assuming camera is at positive z)\n        // pitch rotates *around* x-axis, yaw rotates *around* y-axis\n        const direction = vec3.fromValues(0, 0, this.distance);\n        this.toGlobalOrientation(direction);\n\n        const position = vec3.create();\n        vec3.add(position, this.target, direction);\n        return position;\n    }\n\n    getTarget()\n    {\n        return this.target;\n    }\n\n    lookAt(from, to)\n    {\n        // up is implicitly (0, 1, 0)\n        this.target = to;\n\n        const difference = vec3.create();\n        vec3.subtract(difference, from, to);\n        const projectedDifference = vec3.fromValues(from[0] - to[0], 0, from[2] - to[2]);\n\n        this.pitch = vec3.angle(difference, projectedDifference);\n        this.yaw = vec3.angle(projectedDifference, vec3.fromValues(1.0, 0.0, 0.0));\n        this.distance = vec3.length(difference);\n    }\n\n    setPosition(position)\n    {\n        this.lookAt(position, this.target);\n    }\n\n    setTarget(target)\n    {\n        this.target = target;\n    }\n\n    setRotation(yaw, pitch)\n    {\n        this.yaw = yaw;\n        this.pitch = pitch;\n    }\n\n    setZoom(distance)\n    {\n        this.distance = distance;\n    }\n\n    zoomBy(value)\n    {\n        if (value > 0)\n        {\n            this.distance *= this.zoomFactor;\n        }\n        else\n        {\n            this.distance /= this.zoomFactor;\n        }\n        this.fitCameraPlanesToExtents(this.sceneExtents.min, this.sceneExtents.max);\n    }\n\n    orbit(x, y)\n    {\n        const yMax = Math.PI / 2 - 0.01;\n        this.yaw += (x * this.orbitSpeed);\n        this.pitch += (y * this.orbitSpeed);\n        this.pitch = clamp(this.pitch, -yMax, yMax);\n    }\n\n    pan(x, y)\n    {\n        const left = vec3.fromValues(-1, 0, 0);\n        this.toGlobalOrientation(left);\n        vec3.scale(left, left, x * this.panSpeed);\n\n        const up = vec3.fromValues(0, 1, 0);\n        this.toGlobalOrientation(up);\n        vec3.scale(up, up, y * this.panSpeed);\n\n        vec3.add(this.target, this.target, up);\n        vec3.add(this.target, this.target, left);\n    }\n\n    fitPanSpeedToScene(min, max)\n    {\n        const longestDistance = vec3.distance(min, max);\n        this.panSpeed = longestDistance / PanSpeedDenominator;\n    }\n\n    reset()\n    {\n        this.yaw = 0;\n        this.pitch = 0;\n        fitDistanceToExtents(this.sceneExtents.min, this.sceneExtents.max);\n        fitCameraTargetToExtents(this.sceneExtents.min, this.sceneExtents.max);\n    }\n\n    fitViewToScene(gltf, sceneIndex)\n    {\n        getSceneExtents(gltf, sceneIndex, this.sceneExtents.min, this.sceneExtents.max);\n        this.fitCameraTargetToExtents(this.sceneExtents.min, this.sceneExtents.max);\n        this.fitDistanceToExtents(this.sceneExtents.min, this.sceneExtents.max);\n\n        const direction = vec3.fromValues(0, 0, this.distance);\n        vec3.add(this.getPosition(), this.target, direction);\n\n        this.fitPanSpeedToScene(this.sceneExtents.min, this.sceneExtents.max);\n        this.fitCameraPlanesToExtents(this.sceneExtents.min, this.sceneExtents.max);\n\n        this.yaw = 0;\n        this.pitch = 0;\n    }\n\n    // Converts orientation from camera space to global space\n    toGlobalOrientation(vector)\n    {\n        vec3.rotateX(vector, vector, VecZero, -this.pitch);\n        vec3.rotateY(vector, vector, VecZero, -this.yaw);\n    }\n\n    fitDistanceToExtents(min, max)\n    {\n        const maxAxisLength = Math.max(max[0] - min[0], max[1] - min[1]);\n        const yfov = this.yfov;\n        const xfov = this.yfov * this.aspectRatio;\n\n        const yZoom = maxAxisLength / 2 / Math.tan(yfov / 2);\n        const xZoom = maxAxisLength / 2 / Math.tan(xfov / 2);\n\n        this.distance = Math.max(xZoom, yZoom);\n    }\n\n    fitCameraTargetToExtents(min, max)\n    {\n        for (const i of [0, 1, 2])\n        {\n            this.target[i] = (max[i] + min[i]) / 2;\n        }\n    }\n\n    fitCameraPlanesToExtents(min, max)\n    {\n        // depends only on scene min/max and the camera distance\n\n        // Manually increase scene extent just for the camera planes to avoid camera clipping in most situations.\n        const longestDistance = 10 * vec3.distance(min, max);\n        let zNear = this.distance - (longestDistance * 0.6);\n        let zFar = this.distance + (longestDistance * 0.6);\n\n        // minimum near plane value needs to depend on far plane value to avoid z fighting or too large near planes\n        zNear = Math.max(zNear, zFar / MaxNearFarRatio);\n\n        this.znear = zNear;\n        this.zfar = zFar;\n    }\n}\n\nexport { UserCamera };\n","function nearestPowerOf2(n)\n{\n    if (isPowerOf2(n))\n    {\n        return n;\n    }\n    return Math.pow(2.0, Math.round(Math.log(n) / Math.log(2.0)));\n}\n\nfunction isPowerOf2(n)\n{\n    return n && (n & (n - 1)) === 0;\n}\n\nfunction makeEven(n)\n{\n    if (n % 2 === 1)\n    {\n        return n + 1;\n    }\n    return n;\n}\n\nexport { nearestPowerOf2, isPowerOf2, makeEven };\n","class AsyncFileReader\n{\n    static async readAsArrayBuffer(path) {\n        return new Promise( (resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = () => resolve(reader.result);\n            reader.onerror = reject;\n            reader.readAsArrayBuffer(path);\n        });\n    }\n\n    static async readAsText(path) {\n        return new Promise( (resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = () => resolve(reader.result);\n            reader.onerror = reject;\n            reader.readAsText(path);\n        });\n    }\n\n    static async readAsDataURL(path) {\n        return new Promise( (resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = () => resolve(reader.result);\n            reader.onerror = reject;\n            reader.readAsDataURL(path);\n        });\n    }\n}\n\nexport { AsyncFileReader };\n","const ImageMimeType = {JPEG: \"image/jpeg\", PNG: \"image/png\", HDR: \"image/vnd.radiance\", KTX2: \"image/ktx2\", GLTEXTURE: \"image/texture\"};\n\nexport { ImageMimeType };\n","import { ImageMimeType } from \"../gltf/image_mime_type.js\";\n\nlet GL = undefined;\n\nclass gltfWebGl\n{\n    constructor(context)\n    {\n        this.context = context;\n        if(GL === undefined)\n        {\n            GL = context;\n        }\n    }\n\n    loadWebGlExtensions(webglExtensions)\n    {\n        for (let extension of webglExtensions)\n        {\n            if (this.context.getExtension(extension) === null)\n            {\n                console.warn(\"Extension \" + extension + \" not supported!\");\n            }\n        }\n\n        // let EXT_texture_filter_anisotropic = this.context.getExtension(\"EXT_texture_filter_anisotropic\");\n\n        // if (EXT_texture_filter_anisotropic)\n        // {\n        //     this.context.anisotropy = EXT_texture_filter_anisotropic.TEXTURE_MAX_ANISOTROPY_EXT;\n        //     this.context.maxAnisotropy = this.context.getParameter(EXT_texture_filter_anisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n        //     this.context.supports_EXT_texture_filter_anisotropic = true;\n        // }\n        // else\n        // {\n        //     this.context.supports_EXT_texture_filter_anisotropic = false;\n        // }\n    }\n\n    setTexture(loc, gltf, textureInfo, texSlot)\n    {\n        if (loc === -1)\n        {\n            return false;\n        }\n\n        let gltfTex = gltf.textures[textureInfo.index];\n\n        if (gltfTex === undefined)\n        {\n            console.warn(\"Texture is undefined: \" + textureInfo.index);\n            return false;\n        }\n\n        const image = gltf.images[gltfTex.source];\n        if (image.mimeType === ImageMimeType.KTX2 ||\n            image.mimeType === ImageMimeType.GLTEXTURE)\n        {\n            gltfTex.glTexture = image.image;\n            gltfTex.initialized = true;\n        }\n\n        if (gltfTex.glTexture === undefined)\n        {\n            gltfTex.glTexture = this.context.createTexture();\n        }\n\n        this.context.activeTexture(GL.TEXTURE0 + texSlot);\n        this.context.bindTexture(gltfTex.type, gltfTex.glTexture);\n\n        this.context.uniform1i(loc, texSlot);\n\n        if (!gltfTex.initialized)\n        {\n            const gltfSampler = gltf.samplers[gltfTex.sampler];\n\n            if (gltfSampler === undefined)\n            {\n                console.warn(\"Sampler is undefined for texture: \" + textureInfo.index);\n                return false;\n            }\n\n            this.context.pixelStorei(GL.UNPACK_FLIP_Y_WEBGL, false);\n\n            if (image === undefined)\n            {\n                console.warn(\"Image is undefined for texture: \" + gltfTex.source);\n                return false;\n            }\n            const internalformat = (textureInfo.linear || GL.SRGB8_ALPHA8 === undefined) ? GL.RGBA : GL.SRGB8_ALPHA8;\n            this.context.texImage2D(image.type, image.miplevel, internalformat, GL.RGBA, GL.UNSIGNED_BYTE, image.image);\n            const generateMips = image.shouldGenerateMips();\n\n            this.setSampler(gltfSampler, gltfTex.type, generateMips);\n\n            if (textureInfo.generateMips && generateMips)\n            {\n                // Until this point, images can be assumed to be power of two.\n                switch (gltfSampler.minFilter)\n                {\n                case GL.NEAREST_MIPMAP_NEAREST:\n                case GL.NEAREST_MIPMAP_LINEAR:\n                case GL.LINEAR_MIPMAP_NEAREST:\n                case GL.LINEAR_MIPMAP_LINEAR:\n                    this.context.generateMipmap(gltfTex.type);\n                    break;\n                default:\n                    break;\n                }\n            }\n\n            gltfTex.initialized = true;\n        }\n\n        return gltfTex.initialized;\n    }\n\n    setIndices(gltf, accessorIndex)\n    {\n        let gltfAccessor = gltf.accessors[accessorIndex];\n\n        if (gltfAccessor.glBuffer === undefined)\n        {\n            gltfAccessor.glBuffer = this.context.createBuffer();\n\n            let data = gltfAccessor.getTypedView(gltf);\n\n            if (data === undefined)\n            {\n                return false;\n            }\n\n            this.context.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, gltfAccessor.glBuffer);\n            this.context.bufferData(GL.ELEMENT_ARRAY_BUFFER, data, GL.STATIC_DRAW);\n        }\n        else\n        {\n            this.context.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, gltfAccessor.glBuffer);\n        }\n\n        return true;\n    }\n\n    enableAttribute(gltf, attributeLocation, gltfAccessor)\n    {\n        if (attributeLocation === -1)\n        {\n            console.warn(\"Tried to access unknown attribute\");\n            return false;\n        }\n\n        if(gltfAccessor.bufferView === undefined)\n        {\n            console.warn(\"Tried to access undefined bufferview\");\n            return true;\n        }\n\n        let gltfBufferView = gltf.bufferViews[gltfAccessor.bufferView];\n\n        if (gltfAccessor.glBuffer === undefined)\n        {\n            gltfAccessor.glBuffer = this.context.createBuffer();\n\n            let data = gltfAccessor.getTypedView(gltf);\n\n            if (data === undefined)\n            {\n                return false;\n            }\n\n            this.context.bindBuffer(GL.ARRAY_BUFFER, gltfAccessor.glBuffer);\n            this.context.bufferData(GL.ARRAY_BUFFER, data, GL.STATIC_DRAW);\n        }\n        else\n        {\n            this.context.bindBuffer(GL.ARRAY_BUFFER, gltfAccessor.glBuffer);\n        }\n\n        this.context.vertexAttribPointer(attributeLocation, gltfAccessor.getComponentCount(gltfAccessor.type), gltfAccessor.componentType, gltfAccessor.normalized, gltfBufferView.byteStride, 0);\n        this.context.enableVertexAttribArray(attributeLocation);\n\n        return true;\n    }\n\n    compileShader(shaderIdentifier, isVert, shaderSource)\n    {\n        const shader = this.context.createShader(isVert ? GL.VERTEX_SHADER : GL.FRAGMENT_SHADER);\n        this.context.shaderSource(shader, shaderSource);\n        this.context.compileShader(shader);\n        const compiled = this.context.getShaderParameter(shader, GL.COMPILE_STATUS);\n\n        if (!compiled)\n        {\n            // output surrounding source code\n            let info = \"\";\n            const messages = this.context.getShaderInfoLog(shader).split(\"\\n\");\n            for(const message of messages)\n            {\n                info += message + \"\\n\";\n                const matches = message.match(/(?:(?:WARNING)|(?:ERROR)): [0-9]*:([0-9]*).*/i);\n                if (matches && matches.length > 1)\n                {\n                    const lineNumber = parseInt(matches[1]) - 1;\n                    const lines = shaderSource.split(\"\\n\");\n\n                    for(let i = Math.max(0, lineNumber - 2); i < Math.min(lines.length, lineNumber + 3); i++)\n                    {\n                        if (lineNumber === i)\n                        {\n                            info += \"->\";\n                        }\n                        info += \"\\t\" + lines[i] + \"\\n\";\n                    }\n                }\n            }\n\n            throw new Error(\"Could not compile WebGL program '\" + shaderIdentifier + \"'. \\n\\n\" + info);\n        }\n\n        return shader;\n    }\n\n    linkProgram(vertex, fragment)\n    {\n        let program = this.context.createProgram();\n        this.context.attachShader(program, vertex);\n        this.context.attachShader(program, fragment);\n        this.context.linkProgram(program);\n\n        if (!this.context.getProgramParameter(program, GL.LINK_STATUS))\n        {\n            var info = this.context.getProgramInfoLog(program);\n            throw new Error('Could not link WebGL program. \\n\\n' + info);\n        }\n\n        return program;\n    }\n\n    //https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants\n    setSampler(gltfSamplerObj, type, generateMipmaps) // TEXTURE_2D\n    {\n        if (generateMipmaps)\n        {\n            this.context.texParameteri(type, GL.TEXTURE_WRAP_S, gltfSamplerObj.wrapS);\n            this.context.texParameteri(type, GL.TEXTURE_WRAP_T, gltfSamplerObj.wrapT);\n        }\n        else\n        {\n            this.context.texParameteri(type, GL.TEXTURE_WRAP_S, GL.CLAMP_TO_EDGE);\n            this.context.texParameteri(type, GL.TEXTURE_WRAP_T, GL.CLAMP_TO_EDGE);\n        }\n\n        // If not mip-mapped, force to non-mip-mapped sampler.\n        if (!generateMipmaps && (gltfSamplerObj.minFilter != GL.NEAREST) && (gltfSamplerObj.minFilter != GL.LINEAR))\n        {\n            if ((gltfSamplerObj.minFilter == GL.NEAREST_MIPMAP_NEAREST) || (gltfSamplerObj.minFilter == GL.NEAREST_MIPMAP_LINEAR))\n            {\n                this.context.texParameteri(type, GL.TEXTURE_MIN_FILTER, GL.NEAREST);\n            }\n            else\n            {\n                this.context.texParameteri(type, GL.TEXTURE_MIN_FILTER, GL.LINEAR);\n            }\n        }\n        else\n        {\n            this.context.texParameteri(type, GL.TEXTURE_MIN_FILTER, gltfSamplerObj.minFilter);\n        }\n        this.context.texParameteri(type, GL.TEXTURE_MAG_FILTER, gltfSamplerObj.magFilter);\n\n        if (this.context.supports_EXT_texture_filter_anisotropic)\n        {\n            this.context.texParameterf(type, this.context.anisotropy, this.context.maxAnisotropy); // => 16xAF\n        }\n    }\n}\n\nexport { gltfWebGl, GL };\n","import { GltfObject } from './gltf_object.js';\nimport { isPowerOf2 } from './math_utils.js';\nimport { AsyncFileReader } from '../ResourceLoader/async_file_reader.js';\nimport { GL } from \"../Renderer/webgl\";\nimport { ImageMimeType } from \"./image_mime_type.js\";\nimport * as jpeg  from \"jpeg-js\";\nimport * as png from 'fast-png';\n\nclass gltfImage extends GltfObject\n{\n    constructor(\n        uri = undefined,\n        type = GL.TEXTURE_2D,\n        miplevel = 0,\n        bufferView = undefined,\n        name = undefined,\n        mimeType = ImageMimeType.JPEG,\n        image = undefined)\n    {\n        super();\n        this.uri = uri;\n        this.bufferView = bufferView;\n        this.mimeType = mimeType;\n        this.image = image; // javascript image\n        this.name = name;\n        this.type = type; // nonstandard\n        this.miplevel = miplevel; // nonstandard\n    }\n\n    resolveRelativePath(basePath)\n    {\n        if (typeof this.uri === 'string' || this.uri instanceof String)\n        {\n            if (this.uri.startsWith('./'))\n            {\n                // Remove preceding './' from URI.\n                this.uri = this.uri.substr(2);\n            }\n            this.uri = basePath + this.uri;\n        }\n    }\n\n    async load(gltf, additionalFiles = undefined)\n    {\n        if (this.image !== undefined)\n        {\n            if (this.mimeType !== ImageMimeType.GLTEXTURE)\n            {\n                console.error(\"image has already been loaded\");\n            }\n            return;\n        }\n\n        if (!await this.setImageFromBufferView(gltf) &&\n            !await this.setImageFromFiles(additionalFiles, gltf) &&\n            !await this.setImageFromUri(gltf))\n        {\n            console.error(\"Was not able to resolve image with uri '%s'\", this.uri);\n            return;\n        }\n\n        return;\n    }\n\n    static loadHTMLImage(url)\n    {\n        return new Promise( (resolve, reject) => {\n            const image = new Image();\n            image.addEventListener('load', () => resolve(image) );\n            image.addEventListener('error', reject);\n            image.src = url;\n            image.crossOrigin = \"\";\n        });\n    }\n\n    async setImageFromUri(gltf)\n    {\n        if (this.uri === undefined)\n        {\n            return false;\n        }\n\n        if(this.mimeType === ImageMimeType.KTX2)\n        {\n            if (gltf.ktxDecoder !== undefined)\n            {\n                this.image = await gltf.ktxDecoder.loadKtxFromUri(this.uri);\n            }\n            else\n            {\n                console.warn('Loading of ktx images failed: KtxDecoder not initalized');\n            }\n        }\n        else if (typeof(Image) !== 'undefined' && (this.mimeType === ImageMimeType.JPEG || this.mimeType === ImageMimeType.PNG))\n        {\n            this.image = await gltfImage.loadHTMLImage(this.uri).catch( (error) => {\n                console.error(error);\n            });\n        }\n        else if(this.mimeType === ImageMimeType.JPEG && this.uri instanceof ArrayBuffer)\n        {\n            this.image = jpeg.decode(this.uri, {useTArray: true});\n        }\n        else if(this.mimeType === ImageMimeType.PNG && this.uri instanceof ArrayBuffer)\n        {\n            this.image = png.decode(this.uri);\n        }\n        else\n        {\n            console.error(\"Unsupported image type \" + this.mimeType);\n            return false;\n        }\n\n        return true;\n    }\n\n    async setImageFromBufferView(gltf)\n    {\n        const view = gltf.bufferViews[this.bufferView];\n        if (view === undefined)\n        {\n            return false;\n        }\n\n        const buffer = gltf.buffers[view.buffer].buffer;\n        const array = new Uint8Array(buffer, view.byteOffset, view.byteLength);\n        if (this.mimeType === ImageMimeType.KTX2)\n        {\n            if (gltf.ktxDecoder !== undefined)\n            {\n                this.image = await gltf.ktxDecoder.loadKtxFromBuffer(array);\n            }\n            else\n            {\n                console.warn('Loading of ktx images failed: KtxDecoder not initalized');\n            }\n        }\n        else if(typeof(Image) !== 'undefined' && (this.mimeType === ImageMimeType.JPEG || this.mimeType === ImageMimeType.PNG))\n        {\n            const blob = new Blob([array], { \"type\": this.mimeType });\n            const objectURL = URL.createObjectURL(blob);\n            this.image = await gltfImage.loadHTMLImage(objectURL).catch( () => {\n                console.error(\"Could not load image from buffer view\");\n            });\n        }\n        else if(this.mimeType === ImageMimeType.JPEG)\n        {\n            this.image = jpeg.decode(array, {useTArray: true});\n        }\n        else if(this.mimeType === ImageMimeType.PNG)\n        {\n            this.image = png.decode(array);\n        }\n        else\n        {\n            console.error(\"Unsupported image type \" + this.mimeType);\n            return false;\n        }\n\n        return true;\n    }\n\n    async setImageFromFiles(files, gltf)\n    {\n        if (this.uri === undefined || files === undefined)\n        {\n            return false;\n        }\n\n        let foundFile = files.find(function(file)\n        {\n            if (file.name === this.uri || file.fullPath === this.uri)\n            {\n                return true;\n            }\n        }, this);\n\n        if (foundFile === undefined)\n        {\n            return false;\n        }\n\n        if(this.mimeType === ImageMimeType.KTX2)\n        {\n            if (gltf.ktxDecoder !== undefined)\n            {\n                const data = new Uint8Array(await foundFile.arrayBuffer());\n                this.image = await gltf.ktxDecoder.loadKtxFromBuffer(data);\n            }\n            else\n            {\n                console.warn('Loading of ktx images failed: KtxDecoder not initalized');\n            }\n        }\n        else if (typeof(Image) !== 'undefined' && (this.mimeType === ImageMimeType.JPEG || this.mimeType === ImageMimeType.PNG))\n        {\n            const imageData = await AsyncFileReader.readAsDataURL(foundFile).catch( () => {\n                console.error(\"Could not load image with FileReader\");\n            });\n            this.image = await gltfImage.loadHTMLImage(imageData).catch( () => {\n                console.error(\"Could not create image from FileReader image data\");\n            });\n        }\n        else\n        {\n            console.error(\"Unsupported image type \" + this.mimeType);\n            return false;\n        }\n\n\n        return true;\n    }\n\n    shouldGenerateMips()\n    {\n        return (isPowerOf2(this.image.width) && isPowerOf2(this.image.height));\n    }\n}\n\nexport { gltfImage, ImageMimeType };\n\n","import { ImageMimeType } from \"../gltf/image\";\nimport { AnimationTimer } from \"../gltf/utils\";\n\nconst UserCameraIndex = \"orbit camera\";\n\nclass gltfRenderingParameters\n{\n    constructor(\n        environmentName = Object.keys(Environments)[0],\n        useIBL = true,\n        usePunctual = false,\n        exposure = 1.0,\n        clearColor = [50, 50, 50],\n        toneMap = ToneMaps.NONE,\n        debugOutput = DebugOutput.NONE)\n    {\n        this.environmentName = environmentName;\n        this.useIBL = useIBL;\n        this.usePunctual = usePunctual;\n        this.exposure = exposure;\n        this.clearColor = clearColor;\n        this.toneMap = toneMap;\n        this.debugOutput = debugOutput;\n        this.sceneIndex = 0;\n        this.cameraIndex = UserCameraIndex;\n        this.animationTimer = new AnimationTimer();\n        this.animationIndex = \"all\";\n        this.skinning = true;\n        this.morphing = true;\n    }\n\n    userCameraActive()\n    {\n        return this.cameraIndex === UserCameraIndex;\n    }\n}\n\nconst ToneMaps =\n{\n    NONE: \"None\",\n    ACES_FAST: \"ACES fast\",\n    ACES: \"ACES\"\n};\n\nconst DebugOutput =\n{\n    NONE: \"None\",\n    METALLIC: \"Metallic\",\n    ROUGHNESS: \"Roughness\",\n    NORMAL: \"Normal\",\n    WORLDSPACENORMAL: \"Worldspace Normal\",\n    GEOMETRYNORMAL: \"Geometry Normal\",\n    TANGENT: \"Tangent\",\n    BITANGENT: \"Bitangent\",\n    BASECOLOR: \"Base Color\",\n    OCCLUSION: \"Occlusion\",\n    EMISSIVE: \"Emissive\",\n    DIFFUSE: \"Diffuse\",\n    SPECULAR: \"Specular\",\n    CLEARCOAT: \"ClearCoat\",\n    SHEEN: \"Sheen\",\n    TRANSMISSION: \"Transmission\",\n    ALPHA: \"Alpha\",\n    F0: \"F0\"\n};\n\nconst Environments =\n{\n    \"Papermill Ruins E\": { folder: \"papermill\", mipLevel: 11, type: ImageMimeType.KTX2 },\n    \"Field\": { folder: \"field\", mipLevel: 11, type: ImageMimeType.KTX2 },\n    \"Courtyard of the Doge's palace\": { folder: \"doge2\", mipLevel: 11, type: ImageMimeType.KTX2 },\n    \"Pisa courtyard nearing sunset\": { folder: \"pisa\", mipLevel: 11, type: ImageMimeType.KTX2 },\n    \"Footprint Court\": { folder: \"footprint_court\", mipLevel: 11, type: ImageMimeType.KTX2 },\n    \"Helipad GoldenHour\": { folder: \"helipad\", mipLevel: 11, type: ImageMimeType.KTX2 },\n    \"Dining room of the Ennis-Brown House\": { folder: \"ennis\", mipLevel: 11, type: ImageMimeType.KTX2 },\n    \"Neutral\": { folder: \"neutral\", mipLevel: 11, type: ImageMimeType.KTX2 },\n    \"Directional\": { folder: \"directional\", mipLevel: 11, type: ImageMimeType.KTX2 },\n    \"Chromatic\": { folder: \"chromatic\", mipLevel: 11, type: ImageMimeType.KTX2 }\n};\n\nexport { UserCameraIndex, gltfRenderingParameters, Environments, ToneMaps, DebugOutput };\n","import { UserCamera } from '../gltf/user_camera.js';\nimport { ToneMaps, DebugOutput } from '../Renderer/rendering_parameters.js';\nimport { AnimationTimer } from '../gltf/utils.js';\n\nclass GltfState\n{\n    constructor()\n    {\n        this.gltf = undefined;\n        this.environment = undefined;\n        this.renderingParameters = {\n            morphing: true,\n            skinning: true,\n            clearColor: [58, 64, 74],\n            exposure: 1.0,\n            usePunctual: true,\n            useIBL: true,\n            toneMap: ToneMaps.LINEAR,\n            debugOutput: DebugOutput.NONE,\n            environmentBackground: false,\n            environmentRotation: 90.0 //+X = 0 +Z = 90 -X = 180 -Z = 270\n        };\n        this.userCamera = new UserCamera();\n        this.sceneIndex = 0;\n        this.cameraIndex = undefined;\n        this.animationIndices = [];\n        this.animationTimer = new AnimationTimer();\n        this.variant = undefined;\n    }\n}\n\nexport { GltfState };\n","import { UniformStruct } from '../gltf/utils.js';\nimport { GL } from './webgl.js';\n\nclass gltfShader\n{\n    constructor(program, hash, gl)\n    {\n        this.program = program;\n        this.hash = hash;\n        this.uniforms = new Map();\n        this.attributes = new Map();\n        this.unknownAttributes = [];\n        this.unknownUniforms = [];\n        this.gl = gl;\n\n        if(this.program !== undefined)\n        {\n            const uniformCount = this.gl.context.getProgramParameter(this.program, GL.ACTIVE_UNIFORMS);\n            for(let i = 0; i < uniformCount; ++i)\n            {\n                const info = this.gl.context.getActiveUniform(this.program, i);\n                const loc = this.gl.context.getUniformLocation(this.program, info.name);\n                this.uniforms.set(info.name, {type: info.type, loc: loc});\n            }\n\n            const attribCount = this.gl.context.getProgramParameter(this.program, GL.ACTIVE_ATTRIBUTES);\n            for(let i = 0; i < attribCount; ++i)\n            {\n                const info = this.gl.context.getActiveAttrib(this.program, i);\n                const loc = this.gl.context.getAttribLocation(this.program, info.name);\n                this.attributes.set(info.name, loc);\n            }\n        }\n    }\n\n    destroy()\n    {\n        if (this.program !== undefined)\n        {\n            this.deleteProgram(this.program);\n        }\n\n        this.program = undefined;\n    }\n\n    getAttributeLocation(name)\n    {\n        const loc = this.attributes.get(name);\n        if (loc === undefined)\n        {\n            if (this.unknownAttributes.find(n => n === name) === undefined)\n            {\n                console.log(\"Attribute '%s' does not exist\", name);\n                this.unknownAttributes.push(name);\n            }\n            return -1;\n        }\n        return loc;\n    }\n\n    getUniformLocation(name)\n    {\n        const uniform = this.uniforms.get(name);\n        if (uniform === undefined)\n        {\n            if (this.unknownUniforms.find(n => n === name) === undefined)\n            {\n                this.unknownUniforms.push(name);\n            }\n            return -1;\n        }\n        return uniform.loc;\n    }\n\n    updateUniform(objectName, object, log = true)\n    {\n        if (object instanceof UniformStruct)\n        {\n            this.updateUniformStruct(objectName, object, log);\n        }\n        else if (Array.isArray(object))\n        {\n            this.updateUniformArray(objectName, object, log);\n        }\n        else\n        {\n            this.updateUniformValue(objectName, object, log);\n        }\n    }\n\n    updateUniformArray(arrayName, array, log)\n    {\n        if(array[0] instanceof UniformStruct)\n        {\n            for (let i = 0; i < array.length; ++i)\n            {\n                let element = array[i];\n                let uniformName = arrayName + \"[\" + i + \"]\";\n                this.updateUniform(uniformName, element, log);\n            }\n        }else{\n            let uniformName = arrayName + \"[0]\";\n\n            let flat = [];\n\n            if(Array.isArray(array[0]) || array[0].length !== undefined)\n            {\n                for (let i = 0; i < array.length; ++i)\n                {\n                    flat.push.apply(flat, Array.from(array[i]));\n                }\n            }\n            else\n            {\n                flat = array;\n            }\n\n            if(flat.length === 0)\n            {\n                console.error(\"Failed to flatten uniform array \" + uniformName);\n                return;\n            }\n\n            this.updateUniformValue(uniformName, flat, log);\n        }\n    }\n\n    updateUniformStruct(structName, object, log)\n    {\n        let memberNames = Object.keys(object);\n        for (let memberName of memberNames)\n        {\n            let uniformName = structName + \".\" + memberName;\n            this.updateUniform(uniformName, object[memberName], log);\n        }\n    }\n\n    // upload the values of a uniform with the given name using type resolve to get correct function call\n    updateUniformValue(uniformName, value, log)\n    {\n        const uniform = this.uniforms.get(uniformName);\n\n        if(uniform !== undefined)\n        {\n            switch (uniform.type) {\n            case GL.FLOAT:\n            {\n                if(Array.isArray(value) || value instanceof Float32Array)\n                {\n                    this.gl.context.uniform1fv(uniform.loc, value);\n                }else{\n                    this.gl.context.uniform1f(uniform.loc, value);\n                }\n                break;\n            }\n            case GL.FLOAT_VEC2: this.gl.context.uniform2fv(uniform.loc, value); break;\n            case GL.FLOAT_VEC3: this.gl.context.uniform3fv(uniform.loc, value); break;\n            case GL.FLOAT_VEC4: this.gl.context.uniform4fv(uniform.loc, value); break;\n\n            case GL.INT:\n            {\n                if(Array.isArray(value) || value instanceof Uint32Array || value instanceof Int32Array)\n                {\n                    this.gl.context.uniform1iv(uniform.loc, value);\n                }else{\n                    this.gl.context.uniform1i(uniform.loc, value);\n                }\n                break;\n            }\n            case GL.INT_VEC2: this.gl.context.uniform2iv(uniform.loc, value); break;\n            case GL.INT_VEC3: this.gl.context.uniform3iv(uniform.loc, value); break;\n            case GL.INT_VEC4: this.gl.context.uniform4iv(uniform.loc, value); break;\n\n            case GL.FLOAT_MAT2: this.gl.context.uniformMatrix2fv(uniform.loc, false, value); break;\n            case GL.FLOAT_MAT3: this.gl.context.uniformMatrix3fv(uniform.loc, false, value); break;\n            case GL.FLOAT_MAT4: this.gl.context.uniformMatrix4fv(uniform.loc, false, value); break;\n            }\n        }\n        else if(log)\n        {\n            console.warn(\"Unkown uniform: \" + uniformName);\n        }\n    }\n}\n\nexport { gltfShader };\n","import { gltfShader } from './shader.js';\nimport { stringHash, combineHashes } from '../gltf/utils.js';\n\n// THis class generates and caches the shader source text for a given permutation\nclass ShaderCache\n{\n    constructor(sources, gl)\n    {\n        this.sources  = sources; // shader name -> source code\n        this.shaders  = new Map(); // name & permutations hashed -> compiled shader\n        this.programs = new Map(); // (vertex shader, fragment shader) -> program\n        this.gl = gl;\n\n        // resovle / expande sources (TODO: break include cycles)\n        for (let [key, src] of this.sources)\n        {\n            let changed = false;\n            for (let [includeName, includeSource] of this.sources)\n            {\n                //var pattern = RegExp(/#include</ + includeName + />/);\n                const pattern = \"#include <\" + includeName + \">\";\n\n                if(src.includes(pattern))\n                {\n                    // only replace the first occurance\n                    src = src.replace(pattern, includeSource);\n\n                    // remove the others\n                    while (src.includes(pattern))\n                    {\n                        src = src.replace(pattern, \"\");\n                    }\n\n                    changed = true;\n                }\n            }\n\n            if(changed)\n            {\n                this.sources.set(key, src);\n            }\n        }\n    }\n\n    destroy()\n    {\n        for (let [, shader] of this.shaders.entries())\n        {\n            this.gl.context.deleteShader(shader);\n            shader = undefined;\n        }\n\n        this.shaders.clear();\n\n        for (let [, program] of this.programs)\n        {\n            program.destroy();\n        }\n\n        this.programs.clear();\n    }\n\n    // example args: \"pbr.vert\", [\"NORMALS\", \"TANGENTS\"]\n    selectShader(shaderIdentifier, permutationDefines)\n    {\n        // first check shaders for the exact permutation\n        // if not present, check sources and compile it\n        // if not present, return null object\n\n        const src = this.sources.get(shaderIdentifier);\n        if(src === undefined)\n        {\n            console.log(\"Shader source for \" + shaderIdentifier + \" not found\");\n            return null;\n        }\n\n        const isVert = shaderIdentifier.endsWith(\".vert\");\n        let hash = stringHash(shaderIdentifier);\n\n        // console.log(shaderIdentifier);\n\n        let defines = \"#version 300 es\\n\";\n        for(let define of permutationDefines)\n        {\n            // console.log(define);\n            hash ^= stringHash(define);\n            defines += \"#define \" + define + \"\\n\";\n        }\n\n        let shader = this.shaders.get(hash);\n\n        if(shader === undefined)\n        {\n            // console.log(defines);\n            // compile this variant\n            shader = this.gl.compileShader(shaderIdentifier, isVert, defines + src);\n            this.shaders.set(hash, shader);\n        }\n\n        return hash;\n    }\n\n    getShaderProgram(vertexShaderHash, fragmentShaderHash)\n    {\n        const hash = combineHashes(vertexShaderHash, fragmentShaderHash);\n\n        let program = this.programs.get(hash);\n\n        if (program) // program already linked\n        {\n            return program;\n        }\n        else // link this shader program type!\n        {\n            let linkedProg = this.gl.linkProgram(this.shaders.get(vertexShaderHash), this.shaders.get(fragmentShaderHash));\n            if(linkedProg)\n            {\n                let program = new gltfShader(linkedProg, hash, this.gl);\n                this.programs.set(hash, program);\n                return program;\n            }\n        }\n\n        return undefined;\n    }\n}\n\nexport { ShaderCache };\n","import { mat4, mat3, vec3 } from 'gl-matrix';\nimport { ShaderCache } from './shader_cache.js';\nimport { ToneMaps, DebugOutput } from './rendering_parameters.js';\nimport { gltfWebGl, GL } from './webgl.js';\n\nimport pbrShader from './shaders/pbr.frag';\nimport brdfShader from './shaders/brdf.glsl';\nimport iblShader from './shaders/ibl.glsl';\nimport punctualShader from './shaders/punctual.glsl';\nimport primitiveShader from './shaders/primitive.vert';\nimport texturesShader from './shaders/textures.glsl';\nimport tonemappingShader from './shaders/tonemapping.glsl';\nimport shaderFunctions from './shaders/functions.glsl';\nimport animationShader from './shaders/animation.glsl';\n\nclass gltfRenderer\n{\n    constructor(context)\n    {\n        this.shader = undefined; // current shader\n\n        this.currentWidth = 0;\n        this.currentHeight = 0;\n\n        this.webGl = new gltfWebGl(context);\n\n        // create render target for non transmission materials\n        this.opaqueRenderTexture = 0;\n        this.opaqueFramebuffer = 0;\n        this.opaqueDepthTexture = 0;\n        this.opaqueFramebufferWidth = 1024;\n        this.opaqueFramebufferHeight = 1024;\n\n        const shaderSources = new Map();\n        shaderSources.set(\"primitive.vert\", primitiveShader);\n        shaderSources.set(\"pbr.frag\", pbrShader);\n        shaderSources.set(\"brdf.glsl\", brdfShader);\n        shaderSources.set(\"ibl.glsl\", iblShader);\n        shaderSources.set(\"punctual.glsl\", punctualShader);\n        shaderSources.set(\"tonemapping.glsl\", tonemappingShader);\n        shaderSources.set(\"textures.glsl\", texturesShader);\n        shaderSources.set(\"functions.glsl\", shaderFunctions);\n        shaderSources.set(\"animation.glsl\", animationShader);\n\n        this.shaderCache = new ShaderCache(shaderSources, this.webGl);\n\n        let requiredWebglExtensions = [\n            \"EXT_texture_filter_anisotropic\",\n            \"OES_texture_float_linear\"\n        ];\n\n        this.webGl.loadWebGlExtensions(requiredWebglExtensions);\n\n        this.visibleLights = [];\n\n        this.viewMatrix = mat4.create();\n        this.projMatrix = mat4.create();\n        this.viewProjectionMatrix = mat4.create();\n\n        this.currentCameraPosition = vec3.create();\n\n        this.init();\n    }\n\n    /////////////////////////////////////////////////////////////////////\n    // Render glTF scene graph\n    /////////////////////////////////////////////////////////////////////\n\n    // app state\n    init()\n    {\n        const context = this.webGl.context;\n        context.pixelStorei(GL.UNPACK_COLORSPACE_CONVERSION_WEBGL, GL.NONE);\n        context.enable(GL.DEPTH_TEST);\n        context.depthFunc(GL.LEQUAL);\n        context.colorMask(true, true, true, true);\n        context.clearDepth(1.0);\n\n        this.opaqueRenderTexture = context.createTexture();\n        context.bindTexture(context.TEXTURE_2D, this.opaqueRenderTexture);\n        context.texParameteri(context.TEXTURE_2D, context.TEXTURE_MIN_FILTER, context.LINEAR_MIPMAP_LINEAR);\n        context.texParameteri(context.TEXTURE_2D, context.TEXTURE_WRAP_S, context.CLAMP_TO_EDGE);\n        context.texParameteri(context.TEXTURE_2D, context.TEXTURE_WRAP_T, context.CLAMP_TO_EDGE);\n        context.texParameteri(context.TEXTURE_2D, context.TEXTURE_MAG_FILTER, context.NEAREST);\n        context.texImage2D( context.TEXTURE_2D,\n                            0,\n                            context.RGBA,\n                            this.opaqueFramebufferWidth,\n                            this.opaqueFramebufferHeight,\n                            0,\n                            context.RGBA,\n                            context.UNSIGNED_BYTE,\n                            null);\n        context.bindTexture(context.TEXTURE_2D, null);\n\n        this.opaqueDepthTexture = context.createTexture();\n        context.bindTexture(context.TEXTURE_2D, this.opaqueDepthTexture);\n        context.texParameteri(context.TEXTURE_2D, context.TEXTURE_MIN_FILTER, context.NEAREST);\n        context.texParameteri(context.TEXTURE_2D, context.TEXTURE_WRAP_S, context.CLAMP_TO_EDGE);\n        context.texParameteri(context.TEXTURE_2D, context.TEXTURE_WRAP_T, context.CLAMP_TO_EDGE);\n        context.texParameteri(context.TEXTURE_2D, context.TEXTURE_MAG_FILTER, context.NEAREST);\n        context.texImage2D( context.TEXTURE_2D,\n                            0,\n                            context.DEPTH_COMPONENT16,\n                            this.opaqueFramebufferWidth,\n                            this.opaqueFramebufferHeight,\n                            0,\n                            context.DEPTH_COMPONENT,\n                            context.UNSIGNED_SHORT,\n                            null);\n        context.bindTexture(context.TEXTURE_2D, null);\n\n        this.opaqueFramebuffer = context.createFramebuffer();\n        context.bindFramebuffer(context.FRAMEBUFFER, this.opaqueFramebuffer);\n        context.framebufferTexture2D(context.FRAMEBUFFER, context.COLOR_ATTACHMENT0, context.TEXTURE_2D, this.opaqueRenderTexture, 0);\n        context.framebufferTexture2D(context.FRAMEBUFFER, context.DEPTH_ATTACHMENT, context.TEXTURE_2D, this.opaqueDepthTexture, 0);\n        context.viewport(0, 0, this.currentWidth, this.currentHeight);\n        context.bindFramebuffer(context.FRAMEBUFFER, null);\n\n    }\n\n    resize(width, height)\n    {\n        if (this.currentWidth !== width || this.currentHeight !== height)\n        {\n            this.currentHeight = height;\n            this.currentWidth = width;\n            this.webGl.context.viewport(0, 0, width, height);\n        }\n    }\n\n    // frame state\n    clearFrame(clearColor)\n    {\n        this.webGl.context.bindFramebuffer(this.webGl.context.FRAMEBUFFER, null);\n        this.webGl.context.clearColor(clearColor[0] / 255.0, clearColor[1] / 255.0, clearColor[2] / 255.0, 1.0);\n        this.webGl.context.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n        this.webGl.context.bindFramebuffer(this.webGl.context.FRAMEBUFFER, this.opaqueFramebuffer);\n        this.webGl.context.clearColor(clearColor[0] / 255.0, clearColor[1] / 255.0, clearColor[2] / 255.0, 1.0);\n        this.webGl.context.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n        this.webGl.context.bindFramebuffer(this.webGl.context.FRAMEBUFFER, null);\n    }\n\n    // render complete gltf scene with given camera\n    drawScene(state, scene)\n    {\n        let currentCamera = undefined;\n\n        if (state.cameraIndex === undefined)\n        {\n            currentCamera = state.userCamera;\n        }\n        else\n        {\n            currentCamera = state.gltf.cameras[state.cameraIndex].clone();\n        }\n\n        currentCamera.aspectRatio = this.currentWidth / this.currentHeight;\n\n        this.projMatrix = currentCamera.getProjectionMatrix();\n        this.viewMatrix = currentCamera.getViewMatrix(state.gltf);\n        this.currentCameraPosition = currentCamera.getPosition(state.gltf);\n\n        this.visibleLights = this.getVisibleLights(state.gltf, scene);\n\n        mat4.multiply(this.viewProjectionMatrix, this.projMatrix, this.viewMatrix);\n\n        const nodes = scene.gatherNodes(state.gltf);\n\n        // Update skins.\n        for (const node of nodes)\n        {\n            if (node.mesh !== undefined && node.skin !== undefined)\n            {\n                this.updateSkin(state, node);\n            }\n        }\n\n        // collect drawables by essentially zipping primitives (for geometry and material)\n        // and nodes for the transform\n        const drawables = nodes\n            .filter(node => node.mesh !== undefined)\n            .reduce((acc, node) => acc.concat(state.gltf.meshes[node.mesh].primitives.map( primitive => {\n                return  {node: node, primitive: primitive};\n            })), [])\n            .filter(({node, primitive}) => primitive.material !== undefined);\n\n        // opaque drawables don't need sorting\n        const opaqueDrawables = drawables\n            .filter(({node, primitive}) => state.gltf.materials[primitive.material].alphaMode !== \"BLEND\"\n                && (state.gltf.materials[primitive.material].extensions === undefined\n                    || state.gltf.materials[primitive.material].extensions.KHR_materials_transmission === undefined));\n\n        // transparent drawables need sorting before they can be drawn\n        let transparentDrawables = drawables\n            .filter(({node, primitive}) => state.gltf.materials[primitive.material].alphaMode === \"BLEND\"\n                && (state.gltf.materials[primitive.material].extensions === undefined\n                    || state.gltf.materials[primitive.material].extensions.KHR_materials_transmission === undefined));\n        transparentDrawables = currentCamera.sortPrimitivesByDepth(state.gltf, transparentDrawables);\n\n        // Render transmission sample texture\n        this.webGl.context.bindFramebuffer(this.webGl.context.FRAMEBUFFER, this.opaqueFramebuffer);\n\n        this.webGl.context.viewport(0, 0, this.opaqueFramebufferWidth, this.opaqueFramebufferHeight);\n        for (const drawable of opaqueDrawables)\n        {\n            this.drawPrimitive(state, drawable.primitive, drawable.node, this.viewProjectionMatrix);\n        }\n        for (const drawable of transparentDrawables)\n        {\n            this.drawPrimitive(state, drawable.primitive, drawable.node, this.viewProjectionMatrix);\n        }\n\n        //Reset Viewport\n        this.webGl.context.viewport(0, 0,  this.currentWidth, this.currentHeight);\n\n        //Create Framebuffer Mipmaps\n        this.webGl.context.bindTexture(this.webGl.context.TEXTURE_2D, this.opaqueRenderTexture);\n        this.webGl.context.generateMipmap(this.webGl.context.TEXTURE_2D);\n\n        // Render to canvas\n        this.webGl.context.bindFramebuffer(this.webGl.context.FRAMEBUFFER, null);\n        for (const drawable of opaqueDrawables)\n        {\n            this.drawPrimitive(state, drawable.primitive, drawable.node, this.viewProjectionMatrix);\n        }\n        for (const drawable of transparentDrawables)\n        {\n            this.drawPrimitive(state, drawable.primitive, drawable.node, this.viewProjectionMatrix);\n        }\n\n        // filter materials with transmission extension\n        let transmissionDrawables = drawables\n            .filter(({node, primitive}) => state.gltf.materials[primitive.material].extensions !== undefined\n                && state.gltf.materials[primitive.material].extensions.KHR_materials_transmission !== undefined);\n        transmissionDrawables = currentCamera.sortPrimitivesByDepth(state.gltf, transmissionDrawables);\n        for (const drawable of transmissionDrawables)\n        {\n            this.drawPrimitive(state, drawable.primitive, drawable.node, this.viewProjectionMatrix, this.opaqueRenderTexture);\n        }\n    }\n\n    // vertices with given material\n    drawPrimitive(state, primitive, node, viewProjectionMatrix, transmissionSampleTexture)\n    {\n        if (primitive.skip) return;\n\n        let material;\n        if(primitive.mappings !== undefined && state.variant != \"default\")\n        {\n            const names = state.gltf.variants.map(obj => obj.name);\n            const idx = names.indexOf(state.variant);\n            let materialIdx = primitive.material;\n            primitive.mappings.forEach(element => {\n                if(element.variants.indexOf(idx) >= 0)\n                {\n                    materialIdx = element.material;\n                }\n            });\n            material = state.gltf.materials[materialIdx];\n        }\n        else\n        {\n            material = state.gltf.materials[primitive.material];\n        }\n\n        //select shader permutation, compile and link program.\n\n        let vertDefines = [];\n        this.pushVertParameterDefines(vertDefines, state.renderingParameters, state.gltf, node, primitive);\n        vertDefines = primitive.getDefines().concat(vertDefines);\n\n        let fragDefines = material.getDefines().concat(vertDefines);\n        this.pushFragParameterDefines(fragDefines, state);\n\n        const fragmentHash = this.shaderCache.selectShader(material.getShaderIdentifier(), fragDefines);\n        const vertexHash = this.shaderCache.selectShader(primitive.getShaderIdentifier(), vertDefines);\n\n        if (fragmentHash && vertexHash)\n        {\n            this.shader = this.shaderCache.getShaderProgram(fragmentHash, vertexHash);\n        }\n\n        if (this.shader === undefined)\n        {\n            return;\n        }\n\n        this.webGl.context.useProgram(this.shader.program);\n\n        if (state.renderingParameters.usePunctual)\n        {\n            this.applyLights(state.gltf);\n        }\n\n        // update model dependant matrices once per node\n        this.shader.updateUniform(\"u_ViewProjectionMatrix\", viewProjectionMatrix);\n        this.shader.updateUniform(\"u_ModelMatrix\", node.worldTransform);\n        this.shader.updateUniform(\"u_NormalMatrix\", node.normalMatrix, false);\n        this.shader.updateUniform(\"u_Exposure\", state.renderingParameters.exposure, false);\n        this.shader.updateUniform(\"u_Camera\", this.currentCameraPosition, false);\n\n        this.updateAnimationUniforms(state, node, primitive);\n\n        if (mat4.determinant(node.worldTransform) < 0.0)\n        {\n            this.webGl.context.frontFace(GL.CW);\n        }\n        else\n        {\n            this.webGl.context.frontFace(GL.CCW);\n        }\n\n        if (material.doubleSided)\n        {\n            this.webGl.context.disable(GL.CULL_FACE);\n        }\n        else\n        {\n            this.webGl.context.enable(GL.CULL_FACE);\n        }\n\n        if (material.alphaMode === 'BLEND')\n        {\n            this.webGl.context.enable(GL.BLEND);\n            this.webGl.context.blendFuncSeparate(GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA, GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA);\n            this.webGl.context.blendEquation(GL.FUNC_ADD);\n        }\n        else\n        {\n            this.webGl.context.disable(GL.BLEND);\n        }\n\n        const drawIndexed = primitive.indices !== undefined;\n        if (drawIndexed)\n        {\n            if (!this.webGl.setIndices(state.gltf, primitive.indices))\n            {\n                return;\n            }\n        }\n\n        let vertexCount = 0;\n        for (const attribute of primitive.glAttributes)\n        {\n            const gltfAccessor = state.gltf.accessors[attribute.accessor];\n            vertexCount = gltfAccessor.count;\n\n            const location = this.shader.getAttributeLocation(attribute.name);\n            if (location < 0)\n            {\n                continue; // only skip this attribute\n            }\n            if (!this.webGl.enableAttribute(state.gltf, location, gltfAccessor))\n            {\n                return; // skip this primitive\n            }\n        }\n\n        for (let [uniform, val] of material.getProperties().entries())\n        {\n            this.shader.updateUniform(uniform, val);\n        }\n\n        for (let i = 0; i < material.textures.length; ++i)\n        {\n            let info = material.textures[i];\n            const location = this.shader.getUniformLocation(info.samplerName);\n            if (location < 0)\n            {\n                continue; // only skip this texture\n            }\n            if (!this.webGl.setTexture(location, state.gltf, info, i)) // binds texture and sampler\n            {\n                return; // skip this material\n            }\n        }\n\n        let textureCount = material.textures.length;\n        if (state.renderingParameters.useIBL && state.environment !== undefined)\n        {\n            textureCount = this.applyEnvironmentMap(state, textureCount);\n        }\n\n        if (state.renderingParameters.usePunctual && state.environment !== undefined)\n        {\n            this.webGl.setTexture(this.shader.getUniformLocation(\"u_SheenELUT\"), state.gltf, state.environment.sheenELUT, textureCount++);\n        }\n\n        if(transmissionSampleTexture !== undefined && state.renderingParameters.useIBL && state.environment)\n        {\n            this.webGl.context.activeTexture(GL.TEXTURE0 + textureCount);\n            this.webGl.context.bindTexture(this.webGl.context.TEXTURE_2D, this.opaqueRenderTexture);\n            this.webGl.context.uniform1i(this.shader.getUniformLocation(\"u_TransmissionFramebufferSampler\"), textureCount);\n            textureCount++;\n\n            this.webGl.context.uniform2i(this.shader.getUniformLocation(\"u_ScreenSize\"), this.currentWidth, this.currentHeight);\n            this.webGl.context.uniform2i(this.shader.getUniformLocation(\"u_TransmissionFramebufferSize\"), this.opaqueFramebufferWidth, this.opaqueFramebufferHeight);\n        }\n\n        if (drawIndexed)\n        {\n            const indexAccessor = state.gltf.accessors[primitive.indices];\n            this.webGl.context.drawElements(primitive.mode, indexAccessor.count, indexAccessor.componentType, 0);\n        }\n        else\n        {\n            this.webGl.context.drawArrays(primitive.mode, 0, vertexCount);\n        }\n\n        for (const attribute of primitive.glAttributes)\n        {\n            const location = this.shader.getAttributeLocation(attribute.name);\n            if (location < 0)\n            {\n                continue; // skip this attribute\n            }\n            this.webGl.context.disableVertexAttribArray(location);\n        }\n    }\n\n    // returns all lights that are relevant for rendering or the default light if there are none\n    getVisibleLights(gltf, scene)\n    {\n        let lights = [];\n        for (let light of gltf.lights)\n        {\n            if (light.node !== undefined)\n            {\n                if (scene.includesNode(gltf, light.node))\n                {\n                    lights.push(light);\n                }\n            }\n        }\n        return lights;\n    }\n\n    updateSkin(state, node)\n    {\n        if (state.renderingParameters.skinning && state.gltf.skins !== undefined)\n        {\n            const skin = state.gltf.skins[node.skin];\n            skin.computeJoints(state.gltf, node);\n        }\n    }\n\n    pushVertParameterDefines(vertDefines, parameters, gltf, node, primitive)\n    {\n        // skinning\n        if (parameters.skinning && node.skin !== undefined && primitive.hasWeights && primitive.hasJoints)\n        {\n            const skin = gltf.skins[node.skin];\n\n            vertDefines.push(\"USE_SKINNING 1\");\n            vertDefines.push(\"JOINT_COUNT \" + skin.jointMatrices.length);\n        }\n\n        // morphing\n        if (parameters.morphing && node.mesh !== undefined && primitive.targets.length > 0)\n        {\n            const mesh = gltf.meshes[node.mesh];\n            if (mesh.weights !== undefined && mesh.weights.length > 0)\n            {\n                vertDefines.push(\"USE_MORPHING 1\");\n                vertDefines.push(\"WEIGHT_COUNT \" + Math.min(mesh.weights.length, 8));\n            }\n        }\n    }\n\n    updateAnimationUniforms(state, node, primitive)\n    {\n        if (state.renderingParameters.skinning && node.skin !== undefined && primitive.hasWeights && primitive.hasJoints)\n        {\n            const skin = state.gltf.skins[node.skin];\n\n            this.shader.updateUniform(\"u_jointMatrix\", skin.jointMatrices);\n            if(primitive.hasNormals)\n            {\n                this.shader.updateUniform(\"u_jointNormalMatrix\", skin.jointNormalMatrices);\n            }\n        }\n\n        if (state.renderingParameters.morphing && node.mesh !== undefined && primitive.targets.length > 0)\n        {\n            const mesh = state.gltf.meshes[node.mesh];\n            if (mesh.weights !== undefined && mesh.weights.length > 0)\n            {\n                this.shader.updateUniformArray(\"u_morphWeights\", mesh.weights);\n            }\n        }\n    }\n\n    pushFragParameterDefines(fragDefines, state)\n    {\n        if (state.renderingParameters.usePunctual)\n        {\n            fragDefines.push(\"USE_PUNCTUAL 1\");\n            fragDefines.push(\"LIGHT_COUNT \" + this.visibleLights.length);\n        }\n\n        if (state.renderingParameters.useIBL && state.environment)\n        {\n            fragDefines.push(\"USE_IBL 1\");\n        }\n\n        switch (state.renderingParameters.toneMap)\n        {\n        case (ToneMaps.ACES_FAST):\n            fragDefines.push(\"TONEMAP_ACES_FAST 1\");\n            break;\n        case (ToneMaps.ACES):\n            fragDefines.push(\"TONEMAP_ACES 1\");\n            break;\n        case (ToneMaps.NONE):\n        default:\n            break;\n        }\n\n        if (state.renderingParameters.debugOutput !== DebugOutput.NONE)\n        {\n            fragDefines.push(\"DEBUG_OUTPUT 1\");\n        }\n\n        switch (state.renderingParameters.debugOutput)\n        {\n        case (DebugOutput.METALLIC):\n            fragDefines.push(\"DEBUG_METALLIC 1\");\n            break;\n        case (DebugOutput.ROUGHNESS):\n            fragDefines.push(\"DEBUG_ROUGHNESS 1\");\n            break;\n        case (DebugOutput.NORMAL):\n            fragDefines.push(\"DEBUG_NORMAL 1\");\n            break;\n        case (DebugOutput.WORLDSPACENORMAL):\n            fragDefines.push(\"DEBUG_WORLDSPACE_NORMAL 1\");\n            break;\n        case (DebugOutput.GEOMETRYNORMAL):\n            fragDefines.push(\"DEBUG_GEOMETRY_NORMAL 1\");\n            break;\n        case (DebugOutput.TANGENT):\n            fragDefines.push(\"DEBUG_TANGENT 1\");\n            break;\n        case (DebugOutput.BITANGENT):\n            fragDefines.push(\"DEBUG_BITANGENT 1\");\n            break;\n        case (DebugOutput.BASECOLOR):\n            fragDefines.push(\"DEBUG_BASECOLOR 1\");\n            break;\n        case (DebugOutput.OCCLUSION):\n            fragDefines.push(\"DEBUG_OCCLUSION 1\");\n            break;\n        case (DebugOutput.EMISSIVE):\n            fragDefines.push(\"DEBUG_FEMISSIVE 1\");\n            break;\n        case (DebugOutput.SPECULAR):\n            fragDefines.push(\"DEBUG_FSPECULAR 1\");\n            break;\n        case (DebugOutput.DIFFUSE):\n            fragDefines.push(\"DEBUG_FDIFFUSE 1\");\n            break;\n        case (DebugOutput.THICKNESS):\n            fragDefines.push(\"DEBUG_THICKNESS 1\");\n            break;\n        case (DebugOutput.CLEARCOAT):\n            fragDefines.push(\"DEBUG_FCLEARCOAT 1\");\n            break;\n        case (DebugOutput.SHEEN):\n            fragDefines.push(\"DEBUG_FSHEEN 1\");\n            break;\n        case (DebugOutput.SUBSURFACE):\n            fragDefines.push(\"DEBUG_FSUBSURFACE 1\");\n            break;\n        case (DebugOutput.TRANSMISSION):\n            fragDefines.push(\"DEBUG_FTRANSMISSION 1\");\n            break;\n        case (DebugOutput.F0):\n            fragDefines.push(\"DEBUG_F0 1\");\n            break;\n        case (DebugOutput.ALPHA):\n            fragDefines.push(\"DEBUG_ALPHA 1\");\n            break;\n        }\n    }\n\n    applyLights(gltf)\n    {\n        let uniformLights = [];\n        for (let light of this.visibleLights)\n        {\n            uniformLights.push(light.toUniform(gltf));\n        }\n\n        if (uniformLights.length > 0)\n        {\n            this.shader.updateUniform(\"u_Lights\", uniformLights);\n        }\n    }\n\n    applyEnvironmentMap(state, texSlotOffset)\n    {\n        const environment = state.environment;\n        this.webGl.setTexture(this.shader.getUniformLocation(\"u_LambertianEnvSampler\"), environment, environment.diffuseEnvMap, texSlotOffset++);\n\n        this.webGl.setTexture(this.shader.getUniformLocation(\"u_GGXEnvSampler\"), environment, environment.specularEnvMap, texSlotOffset++);\n        this.webGl.setTexture(this.shader.getUniformLocation(\"u_GGXLUT\"), environment, environment.lut, texSlotOffset++);\n\n        this.webGl.setTexture(this.shader.getUniformLocation(\"u_CharlieEnvSampler\"), environment, environment.sheenEnvMap, texSlotOffset++);\n        this.webGl.setTexture(this.shader.getUniformLocation(\"u_CharlieLUT\"), environment, environment.sheenLUT, texSlotOffset++);\n\n        this.shader.updateUniform(\"u_MipCount\", environment.mipCount);\n\n        let rotMatrix4 = mat4.create();\n        mat4.rotateY(rotMatrix4, rotMatrix4,  state.renderingParameters.environmentRotation / 180.0 * Math.PI);\n        let rotMatrix3 = mat3.create();\n        mat3.fromMat4(rotMatrix3, rotMatrix4);\n        this.shader.updateUniform(\"u_envRotation\", rotMatrix3);\n\n        return texSlotOffset;\n    }\n\n    destroy()\n    {\n        this.shaderCache.destroy();\n    }\n}\n\nexport { gltfRenderer };\n","import { GL } from '../Renderer/webgl.js';\nimport { GltfObject } from './gltf_object.js';\n\nclass gltfAccessor extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.bufferView = undefined;\n        this.byteOffset = 0;\n        this.componentType = undefined;\n        this.normalized = false;\n        this.count = undefined;\n        this.type = undefined;\n        this.max = undefined;\n        this.min = undefined;\n        this.sparse = undefined;\n        this.name = undefined;\n\n        // non gltf\n        this.glBuffer = undefined;\n        this.typedView = undefined;\n        this.filteredView = undefined;\n    }\n\n    getTypedView(gltf)\n    {\n        if (this.typedView !== undefined)\n        {\n            return this.typedView;\n        }\n\n        if (this.bufferView !== undefined)\n        {\n            const bufferView = gltf.bufferViews[this.bufferView];\n            const buffer = gltf.buffers[bufferView.buffer];\n            const byteOffset = this.byteOffset + bufferView.byteOffset;\n\n            const componentSize = this.getComponentSize(this.componentType);\n            let componentCount = this.getComponentCount(this.type);\n\n            let arrayLength = 0;\n            if(bufferView.byteStride !== 0)\n            {\n                if (componentSize !== 0)\n                {\n                    arrayLength = bufferView.byteStride / componentSize * (this.count - 1) + componentCount;\n                }\n                else\n                {\n                    console.warn(\"Invalid component type in accessor '\" + (this.name ? this.name : \"\") + \"'\");\n                }\n            }\n            else\n            {\n                arrayLength = this.count * componentCount;\n            }\n\n            if (arrayLength * componentSize > buffer.buffer.byteLength - byteOffset)\n            {\n                arrayLength = (buffer.buffer.byteLength - byteOffset) / componentSize;\n                console.warn(\"Count in accessor '\" + (this.name ? this.name : \"\") + \"' is too large.\");\n            }\n\n            switch (this.componentType)\n            {\n            case GL.BYTE:\n                this.typedView = new Int8Array(buffer.buffer, byteOffset, arrayLength);\n                break;\n            case GL.UNSIGNED_BYTE:\n                this.typedView = new Uint8Array(buffer.buffer, byteOffset, arrayLength);\n                break;\n            case GL.SHORT:\n                this.typedView = new Int16Array(buffer.buffer, byteOffset, arrayLength);\n                break;\n            case GL.UNSIGNED_SHORT:\n                this.typedView = new Uint16Array(buffer.buffer, byteOffset, arrayLength);\n                break;\n            case GL.UNSIGNED_INT:\n                this.typedView = new Uint32Array(buffer.buffer, byteOffset, arrayLength);\n                break;\n            case GL.FLOAT:\n                this.typedView = new Float32Array(buffer.buffer, byteOffset, arrayLength);\n                break;\n            }\n        }\n\n        if (this.typedView === undefined)\n        {\n            console.warn(\"Failed to convert buffer view to typed view!: \" + this.bufferView);\n        }\n        else if (this.sparse !== undefined)\n        {\n            this.applySparse(gltf, this.typedView);\n        }\n\n        return this.typedView;\n    }\n\n    getDeinterlacedView(gltf)\n    {\n        if (this.filteredView !== undefined)\n        {\n            return this.filteredView;\n        }\n\n        if (this.bufferView !== undefined)\n        {\n            const bufferView = gltf.bufferViews[this.bufferView];\n            const buffer = gltf.buffers[bufferView.buffer];\n            const byteOffset = this.byteOffset + bufferView.byteOffset;\n\n            const componentSize = this.getComponentSize(this.componentType);\n            const componentCount = this.getComponentCount(this.type);\n            const arrayLength = this.count * componentCount;\n\n            let stride = bufferView.byteStride !== 0 ? bufferView.byteStride : componentCount * componentSize;\n            let dv = new DataView(buffer.buffer, byteOffset, this.count * stride);\n\n            let func = 'getFloat32';\n            switch (this.componentType)\n            {\n            case GL.BYTE:\n                this.filteredView = new Int8Array(arrayLength);\n                func = 'getInt8';\n                break;\n            case GL.UNSIGNED_BYTE:\n                this.filteredView = new Uint8Array(arrayLength);\n                func = 'getUint8';\n                break;\n            case GL.SHORT:\n                this.filteredView = new Int16Array(arrayLength);\n                func = 'getInt16';\n                break;\n            case GL.UNSIGNED_SHORT:\n                this.filteredView = new Uint16Array(arrayLength);\n                func = 'getUint16';\n                break;\n            case GL.UNSIGNED_INT:\n                this.filteredView = new Uint32Array(arrayLength);\n                func = 'getUint32';\n                break;\n            case GL.FLOAT:\n                this.filteredView = new Float32Array(arrayLength);\n                func = 'getFloat32';\n                break;\n            }\n\n            for(let i = 0; i < arrayLength; ++i)\n            {\n                let offset = Math.floor(i/componentCount) * stride + (i % componentCount) * componentSize;\n                this.filteredView[i] = dv[func](offset, true);\n            }\n        }\n\n        if (this.filteredView === undefined)\n        {\n            console.warn(\"Failed to convert buffer view to filtered view!: \" + this.bufferView);\n        }\n        else if (this.sparse !== undefined)\n        {\n            this.applySparse(gltf, this.filteredView);\n        }\n\n        return this.filteredView;\n    }\n\n    applySparse(gltf, view)\n    {\n        // Gather indices.\n\n        const indicesBufferView = gltf.bufferViews[this.sparse.indices.bufferView];\n        const indicesBuffer = gltf.buffers[indicesBufferView.buffer];\n        const indicesByteOffset = this.sparse.indices.byteOffset + indicesBufferView.byteOffset;\n\n        const indicesComponentSize = this.getComponentSize(this.sparse.indices.componentType);\n        let indicesComponentCount = 1;\n\n        if(indicesBufferView.byteStride !== 0)\n        {\n            indicesComponentCount = indicesBufferView.byteStride / indicesComponentSize;\n        }\n\n        const indicesArrayLength = this.sparse.count * indicesComponentCount;\n\n        let indicesTypedView;\n        switch (this.sparse.indices.componentType)\n        {\n        case GL.UNSIGNED_BYTE:\n            indicesTypedView = new Uint8Array(indicesBuffer.buffer, indicesByteOffset, indicesArrayLength);\n            break;\n        case GL.UNSIGNED_SHORT:\n            indicesTypedView = new Uint16Array(indicesBuffer.buffer, indicesByteOffset, indicesArrayLength);\n            break;\n        case GL.UNSIGNED_INT:\n            indicesTypedView = new Uint32Array(indicesBuffer.buffer, indicesByteOffset, indicesArrayLength);\n            break;\n        }\n\n        // Gather values.\n\n        const valuesBufferView = gltf.bufferViews[this.sparse.values.bufferView];\n        const valuesBuffer = gltf.buffers[valuesBufferView.buffer];\n        const valuesByteOffset = this.sparse.values.byteOffset + valuesBufferView.byteOffset;\n\n        const valuesComponentSize = this.getComponentSize(this.componentType);\n        let valuesComponentCount = this.getComponentCount(this.type);\n\n        if(valuesBufferView.byteStride !== 0)\n        {\n            valuesComponentCount = valuesBufferView.byteStride / valuesComponentSize;\n        }\n\n        const valuesArrayLength = this.sparse.count * valuesComponentCount;\n\n        let valuesTypedView;\n        switch (this.componentType)\n        {\n        case GL.BYTE:\n            valuesTypedView = new Int8Array(valuesBuffer.buffer, valuesByteOffset, valuesArrayLength);\n            break;\n        case GL.UNSIGNED_BYTE:\n            valuesTypedView = new Uint8Array(valuesBuffer.buffer, valuesByteOffset, valuesArrayLength);\n            break;\n        case GL.SHORT:\n            valuesTypedView = new Int16Array(valuesBuffer.buffer, valuesByteOffset, valuesArrayLength);\n            break;\n        case GL.UNSIGNED_SHORT:\n            valuesTypedView = new Uint16Array(valuesBuffer.buffer, valuesByteOffset, valuesArrayLength);\n            break;\n        case GL.UNSIGNED_INT:\n            valuesTypedView = new Uint32Array(valuesBuffer.buffer, valuesByteOffset, valuesArrayLength);\n            break;\n        case GL.FLOAT:\n            valuesTypedView = new Float32Array(valuesBuffer.buffer, valuesByteOffset, valuesArrayLength);\n            break;\n        }\n\n        // Overwrite values.\n\n        for(let i = 0; i < this.sparse.count; ++i)\n        {\n            for(let k = 0; k < valuesComponentCount; ++k)\n            {\n                view[indicesTypedView[i] * valuesComponentCount + k] = valuesTypedView[i * valuesComponentCount + k];\n            }\n        }\n    }\n\n    getComponentCount(type)\n    {\n        return CompononentCount.get(type);\n    }\n\n    getComponentSize(componentType)\n    {\n        switch (componentType)\n        {\n        case GL.BYTE:\n        case GL.UNSIGNED_BYTE:\n            return 1;\n        case GL.SHORT:\n        case GL.UNSIGNED_SHORT:\n            return 2;\n        case GL.UNSIGNED_INT:\n        case GL.FLOAT:\n            return 4;\n        default:\n            return 0;\n        }\n    }\n\n    destroy()\n    {\n        if (this.glBuffer !== undefined)\n        {\n            // TODO: this breaks the dependency direction\n            WebGl.context.deleteBuffer(this.glBuffer);\n        }\n\n        this.glBuffer = undefined;\n    }\n}\n\nconst CompononentCount = new Map(\n    [\n        [\"SCALAR\", 1],\n        [\"VEC2\", 2],\n        [\"VEC3\", 3],\n        [\"VEC4\", 4],\n        [\"MAT2\", 4],\n        [\"MAT3\", 9],\n        [\"MAT4\", 16]\n    ]\n);\n\nexport { gltfAccessor };\n","import axios from 'axios';\nimport { getContainingFolder } from './utils.js';\nimport { GltfObject } from './gltf_object.js';\n\nclass gltfBuffer extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.uri = undefined;\n        this.byteLength = undefined;\n        this.name = undefined;\n\n        // non gltf\n        this.buffer = undefined; // raw data blob\n    }\n\n    load(gltf, additionalFiles = undefined)\n    {\n        if (this.buffer !== undefined)\n        {\n            console.error(\"buffer has already been loaded\");\n            return;\n        }\n\n        const self = this;\n        return new Promise(function(resolve)\n        {\n            if (!self.setBufferFromFiles(additionalFiles, resolve) &&\n                !self.sefBufferFromUri(gltf, resolve))\n            {\n                console.error(\"Was not able to resolve buffer with uri '%s'\", self.uri);\n                resolve();\n            }\n        });\n    }\n\n    sefBufferFromUri(gltf, callback)\n    {\n        if (this.uri === undefined)\n        {\n            return false;\n        }\n\n        const self = this;\n        axios.get(getContainingFolder(gltf.path) + this.uri, { responseType: 'arraybuffer'})\n            .then(function(response)\n            {\n                self.buffer = response.data;\n                callback();\n            });\n        return true;\n    }\n\n    setBufferFromFiles(files, callback)\n    {\n        if (this.uri === undefined || files === undefined)\n        {\n            return false;\n        }\n\n        const foundFile = files.find(function(file)\n        {\n            if (file.name === this.uri || file.fullPath === this.uri)\n            {\n                return true;\n            }\n        }, this);\n\n        if (foundFile === undefined)\n        {\n            return false;\n        }\n\n        const self = this;\n        const reader = new FileReader();\n        reader.onloadend = function(event)\n        {\n            self.buffer = event.target.result;\n            callback();\n        };\n        reader.readAsArrayBuffer(foundFile);\n\n        return true;\n    }\n}\n\nexport { gltfBuffer };\n","import { GltfObject } from './gltf_object.js';\n\nclass gltfBufferView extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.buffer = undefined;\n        this.byteOffset = 0;\n        this.byteLength = undefined;\n        this.byteStride = 0;\n        this.target = undefined;\n        this.name = undefined;\n    }\n}\n\nexport { gltfBufferView };\n","import { mat4, vec3, quat } from 'gl-matrix';\nimport { jsToGl, UniformStruct } from './utils.js';\nimport { fromKeys } from './utils.js';\nimport { GltfObject } from './gltf_object.js';\n\nclass gltfLight extends GltfObject\n{\n    constructor(\n        type = \"directional\",\n        color = [1, 1, 1],\n        intensity = 1,\n        innerConeAngle = 0,\n        outerConeAngle = Math.PI / 4,\n        range = -1,\n        name = undefined,\n        node = undefined)\n    {\n        super();\n        this.type = type;\n        this.color = color;\n        this.intensity = intensity;\n        this.innerConeAngle = innerConeAngle;\n        this.outerConeAngle = outerConeAngle;\n        this.range = range;\n        this.name = name;\n        // non gltf\n        this.node = node;\n    }\n\n    initGl(gltf, webGlContext)\n    {\n        super.initGl(gltf, webGlContext);\n\n        for (let i = 0; i < gltf.nodes.length; i++)\n        {\n            const nodeExtensions = gltf.nodes[i].extensions;\n            if (nodeExtensions === undefined)\n            {\n                continue;\n            }\n\n            const lightsExtension = nodeExtensions.KHR_lights_punctual;\n            if (lightsExtension === undefined)\n            {\n                continue;\n            }\n\n            const lightIndex = lightsExtension.light;\n            if (gltf.lights[lightIndex] === this)\n            {\n                this.node = i;\n                break;\n            }\n        }\n    }\n\n    fromJson(jsonLight)\n    {\n        super.fromJson(jsonLight);\n\n        if(jsonLight.spot !== undefined)\n        {\n            fromKeys(this, jsonLight.spot);\n        }\n    }\n\n    toUniform(gltf)\n    {\n        const uLight = new UniformLight();\n\n        if (this.node !== undefined)\n        {\n            const matrix = gltf.nodes[this.node].worldTransform;\n\n            var scale = vec3.fromValues(1, 1, 1);\n            mat4.getScaling(scale, matrix);\n\n            // To extract a correct rotation, the scaling component must be eliminated.\n            const mn = mat4.create();\n            for(const col of [0, 1, 2])\n            {\n                mn[col] = matrix[col] / scale[0];\n                mn[col + 4] = matrix[col + 4] / scale[1];\n                mn[col + 8] = matrix[col + 8] / scale[2];\n            }\n            var rotation = quat.create();\n            mat4.getRotation(rotation, mn);\n            quat.normalize(rotation, rotation);\n\n            const alongNegativeZ = vec3.fromValues(0, 0, -1);\n            vec3.transformQuat(uLight.direction, alongNegativeZ, rotation);\n\n            var translation = vec3.fromValues(0, 0, 0);\n            mat4.getTranslation(translation, matrix);\n            uLight.position = translation;\n        }\n\n        uLight.range = this.range;\n        uLight.color = jsToGl(this.color);\n        uLight.intensity = this.intensity;\n\n        uLight.innerConeCos = Math.cos(this.innerConeAngle);\n        uLight.outerConeCos = Math.cos(this.outerConeAngle);\n\n        switch(this.type)\n        {\n        case \"spot\":\n            uLight.type = Type_Spot;\n            break;\n        case \"point\":\n            uLight.type = Type_Point;\n            break;\n        case \"directional\":\n        default:\n            uLight.type = Type_Directional;\n            break;\n        }\n\n        return uLight;\n    }\n}\n\nconst Type_Directional = 0;\nconst Type_Point = 1;\nconst Type_Spot = 2;\n\nclass UniformLight extends UniformStruct\n{\n    constructor()\n    {\n        super();\n\n        const defaultDirection = vec3.fromValues(-0.7399, -0.6428, -0.1983);\n        this.direction = defaultDirection;\n        this.range = -1;\n\n        this.color = jsToGl([1, 1, 1]);\n        this.intensity = 1;\n\n        this.position = jsToGl([0, 0, 0]);\n        this.innerConeCos = 0.0;\n\n        this.outerConeCos = Math.PI / 4;\n        this.type = Type_Directional;\n        this.padding1 = 0.0;\n        this.padding2 = 0.0;\n    }\n}\n\nexport { gltfLight };\n","import { jsToGl } from './utils.js';\nimport { GltfObject } from './gltf_object.js';\nimport { GL } from \"../Renderer/webgl\";\n\n// https://github.com/KhronosGroup/glTF/blob/khr_ktx2_ibl/extensions/2.0/Khronos/KHR_lights_image_based/schema/imageBasedLight.schema.json\n\nclass ImageBasedLight extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.rotation = jsToGl([0, 0, 0, 1]);\n        this.brightnessFactor = 1;\n        this.brightnessOffset = 0;\n        this.specularEnvironmentTexture = undefined;\n        this.diffuseEnvironmentTexture = undefined;\n        this.sheenEnvironmentTexture = undefined;\n\n        // non-gltf\n        this.levelCount = 1;\n    }\n\n    fromJson(jsonIBL)\n    {\n        super.fromJson(jsonIBL);\n\n        if(jsonIBL.extensions !== undefined)\n        {\n            this.fromJsonExtensions(jsonIBL.extensions);\n        }\n    }\n\n    fromJsonExtensions(extensions)\n    {\n        if (extensions.KHR_materials_sheen !== undefined)\n        {\n            this.sheenEnvironmentTexture = extensions.KHR_materials_sheen.sheenEnvironmentTexture;\n        }\n    }\n\n    initGl(gltf, webGlContext)\n    {\n        if (this.diffuseEnvironmentTexture !== undefined)\n        {\n            const textureObject = gltf.textures[this.diffuseEnvironmentTexture];\n            textureObject.type = GL.TEXTURE_CUBE_MAP;\n        }\n        if (this.specularEnvironmentTexture !== undefined)\n        {\n            const textureObject = gltf.textures[this.specularEnvironmentTexture];\n            textureObject.type = GL.TEXTURE_CUBE_MAP;\n\n            const imageObject = gltf.images[textureObject.source];\n            this.levelCount = imageObject.image.levelCount;\n        }\n        if(this.sheenEnvironmentTexture !== undefined)\n        {\n            const textureObject = gltf.textures[this.sheenEnvironmentTexture];\n            textureObject.type = GL.TEXTURE_CUBE_MAP;\n\n            const imageObject = gltf.images[textureObject.source];\n            if (this.levelCount !== imageObject.image.levelCount)\n            {\n                console.error(\"Specular and sheen do not have same level count\");\n            }\n        }\n    }\n}\n\nexport { ImageBasedLight };\n","import { fromKeys, initGlForMembers } from './utils.js';\nimport { GL } from '../Renderer/webgl.js';\nimport { GltfObject } from './gltf_object.js';\n\nclass gltfTexture extends GltfObject\n{\n    constructor(sampler = undefined, source = undefined, type = GL.TEXTURE_2D, texture = undefined)\n    {\n        super();\n        this.sampler = sampler; // index to gltfSampler, default sampler ?\n        this.source = source; // index to gltfImage\n\n        // non gltf\n        this.glTexture = texture;\n        this.type = type;\n        this.initialized = false;\n        this.mipLevelCount = 0;\n    }\n\n    initGl(gltf, webGlContext)\n    {\n        if (this.sampler === undefined)\n        {\n            this.sampler = gltf.samplers.length - 1;\n        }\n\n        initGlForMembers(this, gltf, webGlContext);\n    }\n\n    fromJson(jsonTexture)\n    {\n        super.fromJson(jsonTexture);\n        if (jsonTexture.extensions !== undefined &&\n            jsonTexture.extensions.KHR_texture_basisu !== undefined &&\n            jsonTexture.extensions.KHR_texture_basisu.source !== undefined)\n        {\n            this.source = jsonTexture.extensions.KHR_texture_basisu.source;\n        }\n    }\n\n    destroy()\n    {\n        if (this.glTexture !== undefined)\n        {\n            // TODO: this breaks the dependency direction\n            WebGl.context.deleteTexture(this.glTexture);\n        }\n\n        this.glTexture = undefined;\n    }\n}\n\nclass gltfTextureInfo\n{\n    constructor(index = undefined, texCoord = 0, linear = true, samplerName = \"\", generateMips = true) // linear by default\n    {\n        this.index = index; // reference to gltfTexture\n        this.texCoord = texCoord; // which UV set to use\n        this.linear = linear;\n        this.samplerName = samplerName;\n        this.strength = 1.0; // occlusion\n        this.scale = 1.0; // normal\n        this.generateMips = generateMips;\n\n        this.extensions = undefined;\n    }\n\n    initGl(gltf, webGlContext)\n    {\n        initGlForMembers(this, gltf, webGlContext);\n    }\n\n    fromJson(jsonTextureInfo)\n    {\n        fromKeys(this, jsonTextureInfo);\n    }\n}\n\nexport { gltfTexture, gltfTextureInfo };\n","import { mat3, vec3, vec4 } from 'gl-matrix';\nimport { gltfTextureInfo } from './texture.js';\nimport { jsToGl, initGlForMembers } from './utils.js';\nimport { GltfObject } from './gltf_object.js';\n\nclass gltfMaterial extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.name = undefined;\n        this.pbrMetallicRoughness = undefined;\n        this.normalTexture = undefined;\n        this.occlusionTexture = undefined;\n        this.emissiveTexture = undefined;\n        this.emissiveFactor = vec3.fromValues(0, 0, 0);\n        this.alphaMode = \"OPAQUE\";\n        this.alphaCutoff = 0.5;\n        this.doubleSided = false;\n\n        // non gltf properties\n        this.type = \"unlit\";\n        this.textures = [];\n        this.properties = new Map();\n        this.defines = [];\n    }\n\n    static createDefault()\n    {\n        const defaultMaterial = new gltfMaterial();\n        defaultMaterial.type = \"MR\";\n        defaultMaterial.name = \"Default Material\";\n        defaultMaterial.defines.push(\"MATERIAL_METALLICROUGHNESS 1\");\n        const baseColorFactor = vec4.fromValues(1, 1, 1, 1);\n        const metallicFactor = 1;\n        const roughnessFactor = 1;\n        defaultMaterial.properties.set(\"u_BaseColorFactor\", baseColorFactor);\n        defaultMaterial.properties.set(\"u_MetallicFactor\", metallicFactor);\n        defaultMaterial.properties.set(\"u_RoughnessFactor\", roughnessFactor);\n\n        return defaultMaterial;\n    }\n\n    getShaderIdentifier()\n    {\n        switch (this.type)\n        {\n        default:\n        case \"SG\": // fall through till we sparate shaders\n        case \"MR\": return \"pbr.frag\";\n            //case \"SG\": return \"specular-glossiness.frag\" ;\n        }\n    }\n\n    getDefines()\n    {\n        return this.defines;\n    }\n\n    getProperties()\n    {\n        return this.properties;\n    }\n\n    getTextures()\n    {\n        return this.textures;\n    }\n\n    parseTextureInfoExtensions(textureInfo, textureKey)\n    {\n        if(textureInfo.extensions === undefined)\n        {\n            return;\n        }\n\n        if(textureInfo.extensions.KHR_texture_transform !== undefined)\n        {\n            const uvTransform = textureInfo.extensions.KHR_texture_transform;\n\n            // override uvset\n            if(uvTransform.texCoord !== undefined)\n            {\n                textureInfo.texCoord = uvTransform.texCoord;\n            }\n\n            let rotation = mat3.create();\n            let scale = mat3.create();\n            let translation = mat3.create();\n\n            if(uvTransform.rotation !== undefined)\n            {\n                const s =  Math.sin(uvTransform.rotation);\n                const c =  Math.cos(uvTransform.rotation);\n\n                rotation = jsToGl([\n                    c, s, 0.0,\n                    -s, c, 0.0,\n                    0.0, 0.0, 1.0]);\n            }\n\n            if(uvTransform.scale !== undefined)\n            {\n                scale = jsToGl([uvTransform.scale[0], 0, 0, 0, uvTransform.scale[1], 0, 0, 0, 1]);\n            }\n\n            if(uvTransform.offset !== undefined)\n            {\n                translation = jsToGl([1, 0, uvTransform.offset[0], 0, 1, uvTransform.offset[1], 0, 0, 1]);\n            }\n\n            let uvMatrix = mat3.create();\n            mat3.multiply(uvMatrix, rotation, scale);\n            mat3.multiply(uvMatrix, uvMatrix, translation);\n\n            this.defines.push(\"HAS_\" + textureKey.toUpperCase() + \"_UV_TRANSFORM 1\");\n            this.properties.set(\"u_\" + textureKey + \"UVTransform\", uvMatrix);\n        }\n    }\n\n    initGl(gltf, webGlContext)\n    {\n        if (this.normalTexture !== undefined)\n        {\n            this.normalTexture.samplerName = \"u_NormalSampler\";\n            this.parseTextureInfoExtensions(this.normalTexture, \"Normal\");\n            this.textures.push(this.normalTexture);\n            this.defines.push(\"HAS_NORMAL_MAP 1\");\n            this.properties.set(\"u_NormalScale\", this.normalTexture.scale);\n            this.properties.set(\"u_NormalUVSet\", this.normalTexture.texCoord);\n        }\n\n        if (this.occlusionTexture !== undefined)\n        {\n            this.occlusionTexture.samplerName = \"u_OcclusionSampler\";\n            this.parseTextureInfoExtensions(this.occlusionTexture, \"Occlusion\");\n            this.textures.push(this.occlusionTexture);\n            this.defines.push(\"HAS_OCCLUSION_MAP 1\");\n            this.properties.set(\"u_OcclusionStrength\", this.occlusionTexture.strength);\n            this.properties.set(\"u_OcclusionUVSet\", this.occlusionTexture.texCoord);\n        }\n\n        this.properties.set(\"u_EmissiveFactor\", this.emissiveFactor);\n        if (this.emissiveTexture !== undefined)\n        {\n            this.emissiveTexture.samplerName = \"u_EmissiveSampler\";\n            this.parseTextureInfoExtensions(this.emissiveTexture, \"Emissive\");\n            this.textures.push(this.emissiveTexture);\n            this.defines.push(\"HAS_EMISSIVE_MAP 1\");\n            this.properties.set(\"u_EmissiveUVSet\", this.emissiveTexture.texCoord);\n        }\n\n        if (this.baseColorTexture !== undefined)\n        {\n            this.baseColorTexture.samplerName = \"u_BaseColorSampler\";\n            this.parseTextureInfoExtensions(this.baseColorTexture, \"BaseColor\");\n            this.textures.push(this.baseColorTexture);\n            this.defines.push(\"HAS_BASE_COLOR_MAP 1\");\n            this.properties.set(\"u_BaseColorUVSet\", this.baseColorTexture.texCoord);\n        }\n\n        if (this.metallicRoughnessTexture !== undefined)\n        {\n            this.metallicRoughnessTexture.samplerName = \"u_MetallicRoughnessSampler\";\n            this.parseTextureInfoExtensions(this.metallicRoughnessTexture, \"MetallicRoughness\");\n            this.textures.push(this.metallicRoughnessTexture);\n            this.defines.push(\"HAS_METALLIC_ROUGHNESS_MAP 1\");\n            this.properties.set(\"u_MetallicRoughnessUVSet\", this.metallicRoughnessTexture.texCoord);\n        }\n\n        if (this.diffuseTexture !== undefined)\n        {\n            this.diffuseTexture.samplerName = \"u_DiffuseSampler\";\n            this.parseTextureInfoExtensions(this.diffuseTexture, \"Diffuse\");\n            this.textures.push(this.diffuseTexture);\n            this.defines.push(\"HAS_DIFFUSE_MAP 1\");\n            this.properties.set(\"u_DiffuseUVSet\", this.diffuseTexture.texCoord);\n        }\n\n        if (this.specularGlossinessTexture !== undefined)\n        {\n            this.specularGlossinessTexture.samplerName = \"u_SpecularGlossinessSampler\";\n            this.parseTextureInfoExtensions(this.specularGlossinessTexture, \"SpecularGlossiness\");\n            this.textures.push(this.specularGlossinessTexture);\n            this.defines.push(\"HAS_SPECULAR_GLOSSINESS_MAP 1\");\n            this.properties.set(\"u_SpecularGlossinessUVSet\", this.specularGlossinessTexture.texCoord);\n        }\n\n        if(this.alphaMode === 'MASK') // only set cutoff value for mask material\n        {\n            this.defines.push(\"ALPHAMODE_MASK 1\");\n            this.properties.set(\"u_AlphaCutoff\", this.alphaCutoff);\n        }\n        else if (this.alphaMode === 'OPAQUE')\n        {\n            this.defines.push(\"ALPHAMODE_OPAQUE 1\");\n        }\n\n        if (this.pbrMetallicRoughness !== undefined && this.type !== \"SG\")\n        {\n            this.defines.push(\"MATERIAL_METALLICROUGHNESS 1\");\n\n            let baseColorFactor = vec4.fromValues(1, 1, 1, 1);\n            let metallicFactor = 1;\n            let roughnessFactor = 1;\n\n            if (this.pbrMetallicRoughness.baseColorFactor !== undefined)\n            {\n                baseColorFactor = jsToGl(this.pbrMetallicRoughness.baseColorFactor);\n            }\n\n            if (this.pbrMetallicRoughness.metallicFactor !== undefined)\n            {\n                metallicFactor = this.pbrMetallicRoughness.metallicFactor;\n            }\n\n            if (this.pbrMetallicRoughness.roughnessFactor !== undefined)\n            {\n                roughnessFactor = this.pbrMetallicRoughness.roughnessFactor;\n            }\n\n            this.properties.set(\"u_BaseColorFactor\", baseColorFactor);\n            this.properties.set(\"u_MetallicFactor\", metallicFactor);\n            this.properties.set(\"u_RoughnessFactor\", roughnessFactor);\n        }\n\n        if (this.extensions !== undefined)\n        {\n            if (this.extensions.KHR_materials_unlit !== undefined)\n            {\n                this.defines.push(\"MATERIAL_UNLIT 1\");\n            }\n\n            if (this.extensions.KHR_materials_pbrSpecularGlossiness !== undefined)\n            {\n                this.defines.push(\"MATERIAL_SPECULARGLOSSINESS 1\");\n\n                let diffuseFactor = vec4.fromValues(1, 1, 1, 1);\n                let specularFactor = vec3.fromValues(1, 1, 1);\n                let glossinessFactor = 1;\n\n                if (this.extensions.KHR_materials_pbrSpecularGlossiness.diffuseFactor !== undefined)\n                {\n                    diffuseFactor = jsToGl(this.extensions.KHR_materials_pbrSpecularGlossiness.diffuseFactor);\n                }\n\n                if (this.extensions.KHR_materials_pbrSpecularGlossiness.specularFactor !== undefined)\n                {\n                    specularFactor = jsToGl(this.extensions.KHR_materials_pbrSpecularGlossiness.specularFactor);\n                }\n\n                if (this.extensions.KHR_materials_pbrSpecularGlossiness.glossinessFactor !== undefined)\n                {\n                    glossinessFactor = this.extensions.KHR_materials_pbrSpecularGlossiness.glossinessFactor;\n                }\n\n                this.properties.set(\"u_DiffuseFactor\", diffuseFactor);\n                this.properties.set(\"u_SpecularFactor\", specularFactor);\n                this.properties.set(\"u_GlossinessFactor\", glossinessFactor);\n            }\n\n            // Clearcoat is part of the default metallic-roughness shader\n            if(this.extensions.KHR_materials_clearcoat !== undefined)\n            {\n                let clearcoatFactor = 0.0;\n                let clearcoatRoughnessFactor = 0.0;\n\n                this.defines.push(\"MATERIAL_CLEARCOAT 1\");\n\n                if(this.extensions.KHR_materials_clearcoat.clearcoatFactor !== undefined)\n                {\n                    clearcoatFactor = this.extensions.KHR_materials_clearcoat.clearcoatFactor;\n                }\n                if(this.extensions.KHR_materials_clearcoat.clearcoatRoughnessFactor !== undefined)\n                {\n                    clearcoatRoughnessFactor = this.extensions.KHR_materials_clearcoat.clearcoatRoughnessFactor;\n                }\n\n                if (this.clearcoatTexture !== undefined)\n                {\n                    this.clearcoatTexture.samplerName = \"u_ClearcoatSampler\";\n                    this.parseTextureInfoExtensions(this.clearcoatTexture, \"Clearcoat\");\n                    this.textures.push(this.clearcoatTexture);\n                    this.defines.push(\"HAS_CLEARCOAT_TEXTURE_MAP 1\");\n                    this.properties.set(\"u_ClearcoatUVSet\", this.clearcoatTexture.texCoord);\n                }\n                if (this.clearcoatRoughnessTexture !== undefined)\n                {\n                    this.clearcoatRoughnessTexture.samplerName = \"u_ClearcoatRoughnessSampler\";\n                    this.parseTextureInfoExtensions(this.clearcoatRoughnessTexture, \"ClearcoatRoughness\");\n                    this.textures.push(this.clearcoatRoughnessTexture);\n                    this.defines.push(\"HAS_CLEARCOAT_ROUGHNESS_MAP 1\");\n                    this.properties.set(\"u_ClearcoatRoughnessUVSet\", this.clearcoatRoughnessTexture.texCoord);\n                }\n                if (this.clearcoatNormalTexture !== undefined)\n                {\n                    this.clearcoatNormalTexture.samplerName = \"u_ClearcoatNormalSampler\";\n                    this.parseTextureInfoExtensions(this.clearcoatNormalTexture, \"ClearcoatNormal\");\n                    this.textures.push(this.clearcoatNormalTexture);\n                    this.defines.push(\"HAS_CLEARCOAT_NORMAL_MAP 1\");\n                    this.properties.set(\"u_ClearcoatNormalUVSet\", this.clearcoatNormalTexture.texCoord);\n                }\n                this.properties.set(\"u_ClearcoatFactor\", clearcoatFactor);\n                this.properties.set(\"u_ClearcoatRoughnessFactor\", clearcoatRoughnessFactor);\n            }\n\n            // Sheen material extension\n            // https://github.com/sebavan/glTF/tree/KHR_materials_sheen/extensions/2.0/Khronos/KHR_materials_sheen\n            if(this.extensions.KHR_materials_sheen !== undefined)\n            {\n                let sheenRoughnessFactor = 0.0;\n                let sheenColorFactor =  vec3.fromValues(1.0, 1.0, 1.0);\n\n                this.defines.push(\"MATERIAL_SHEEN 1\");\n\n                if(this.extensions.KHR_materials_sheen.sheenRoughnessFactor !== undefined)\n                {\n                    sheenRoughnessFactor = this.extensions.KHR_materials_sheen.sheenRoughnessFactor;\n                }\n                if(this.extensions.KHR_materials_sheen.sheenColorFactor !== undefined)\n                {\n                    sheenColorFactor = jsToGl(this.extensions.KHR_materials_sheen.sheenColorFactor);\n                }\n                if (this.sheenRoughnessTexture !== undefined)\n                {\n                    this.sheenRoughnessTexture.samplerName = \"u_sheenRoughnessSampler\";\n                    this.parseTextureInfoExtensions(this.sheenRoughnessTexture, \"SheenRoughness\");\n                    this.textures.push(this.sheenRoughnessTexture);\n                    this.defines.push(\"HAS_SHEEN_ROUGHNESS_MAP 1\");\n                    this.properties.set(\"u_SheenRoughnessUVSet\", this.sheenRoughnessTexture.texCoord);\n                }\n                if (this.sheenColorTexture !== undefined)\n                {\n                    this.sheenColorTexture.samplerName = \"u_SheenColorSampler\";\n                    this.parseTextureInfoExtensions(this.sheenColorTexture, \"SheenColor\");\n                    this.textures.push(this.sheenColorTexture);\n                    this.defines.push(\"HAS_SHEEN_COLOR_MAP 1\");\n                    this.properties.set(\"u_SheenColorUVSet\", this.sheenColorTexture.texCoord);\n                }\n\n                this.properties.set(\"u_SheenRoughnessFactor\", sheenRoughnessFactor);\n                this.properties.set(\"u_SheenColorFactor\", sheenColorFactor);\n            }\n\n            // KHR Extension: Transmission\n            if (this.extensions.KHR_materials_transmission !== undefined)\n            {\n                let transmissionFactor = 0.0;\n\n                this.defines.push(\"MATERIAL_TRANSMISSION 1\");\n\n                if (transmissionFactor !== undefined)\n                {\n                    transmissionFactor = this.extensions.KHR_materials_transmission.transmissionFactor;\n                }\n                if (this.transmissionTexture !== undefined)\n                {\n                    this.transmissionTexture.samplerName = \"u_TransmissionSampler\";\n                    this.parseTextureInfoExtensions(this.transmissionTexture, \"Transmission\");\n                    this.textures.push(this.transmissionTexture);\n                    this.defines.push(\"HAS_TRANSMISSION_MAP 1\");\n                    this.properties.set(\"u_TransmissionUVSet\", this.transmissionTexture.texCoord);\n                }\n\n                this.properties.set(\"u_TransmissionFactor\", transmissionFactor);\n            }\n        }\n\n        initGlForMembers(this, gltf, webGlContext);\n    }\n\n    fromJson(jsonMaterial)\n    {\n        super.fromJson(jsonMaterial);\n\n        if (jsonMaterial.emissiveFactor !== undefined)\n        {\n            this.emissiveFactor = jsToGl(jsonMaterial.emissiveFactor);\n        }\n\n        if (jsonMaterial.normalTexture !== undefined)\n        {\n            const normalTexture = new gltfTextureInfo();\n            normalTexture.fromJson(jsonMaterial.normalTexture);\n            this.normalTexture = normalTexture;\n        }\n\n        if (jsonMaterial.occlusionTexture !== undefined)\n        {\n            const occlusionTexture = new gltfTextureInfo();\n            occlusionTexture.fromJson(jsonMaterial.occlusionTexture);\n            this.occlusionTexture = occlusionTexture;\n        }\n\n        if (jsonMaterial.emissiveTexture !== undefined)\n        {\n            const emissiveTexture = new gltfTextureInfo(undefined, 0, false);\n            emissiveTexture.fromJson(jsonMaterial.emissiveTexture);\n            this.emissiveTexture = emissiveTexture;\n        }\n\n        if(jsonMaterial.extensions !== undefined)\n        {\n            this.fromJsonMaterialExtensions(jsonMaterial.extensions);\n        }\n\n        if (jsonMaterial.pbrMetallicRoughness !== undefined && this.type !== \"SG\")\n        {\n            this.type = \"MR\";\n            this.fromJsonMetallicRoughness(jsonMaterial.pbrMetallicRoughness);\n        }\n    }\n\n    fromJsonMaterialExtensions(jsonExtensions)\n    {\n        if (jsonExtensions.KHR_materials_pbrSpecularGlossiness !== undefined)\n        {\n            this.type = \"SG\";\n            this.fromJsonSpecularGlossiness(jsonExtensions.KHR_materials_pbrSpecularGlossiness);\n        }\n\n        if(jsonExtensions.KHR_materials_unlit !== undefined)\n        {\n            this.type = \"unlit\";\n        }\n\n        if(jsonExtensions.KHR_materials_clearcoat !== undefined)\n        {\n            this.fromJsonClearcoat(jsonExtensions.KHR_materials_clearcoat);\n        }\n\n        if(jsonExtensions.KHR_materials_sheen !== undefined)\n        {\n            this.fromJsonSheen(jsonExtensions.KHR_materials_sheen);\n        }\n\n        if(jsonExtensions.KHR_materials_transmission !== undefined)\n        {\n            this.fromJsonTransmission(jsonExtensions.KHR_materials_transmission);\n        }\n    }\n\n    fromJsonMetallicRoughness(jsonMetallicRoughness)\n    {\n        if (jsonMetallicRoughness.baseColorTexture !== undefined)\n        {\n            const baseColorTexture = new gltfTextureInfo(undefined, 0, false);\n            baseColorTexture.fromJson(jsonMetallicRoughness.baseColorTexture);\n            this.baseColorTexture = baseColorTexture;\n        }\n\n        if (jsonMetallicRoughness.metallicRoughnessTexture !== undefined)\n        {\n            const metallicRoughnessTexture = new gltfTextureInfo();\n            metallicRoughnessTexture.fromJson(jsonMetallicRoughness.metallicRoughnessTexture);\n            this.metallicRoughnessTexture = metallicRoughnessTexture;\n        }\n    }\n\n    fromJsonSpecularGlossiness(jsonSpecularGlossiness)\n    {\n        if (jsonSpecularGlossiness.diffuseTexture !== undefined)\n        {\n            const diffuseTexture = new gltfTextureInfo(undefined, 0, false);\n            diffuseTexture.fromJson(jsonSpecularGlossiness.diffuseTexture);\n            this.diffuseTexture = diffuseTexture;\n        }\n\n        if (jsonSpecularGlossiness.specularGlossinessTexture !== undefined)\n        {\n            const specularGlossinessTexture = new gltfTextureInfo();\n            specularGlossinessTexture.fromJson(jsonSpecularGlossiness.specularGlossinessTexture);\n            this.specularGlossinessTexture = specularGlossinessTexture;\n        }\n    }\n\n    fromJsonClearcoat(jsonClearcoat)\n    {\n        if(jsonClearcoat.clearcoatTexture !== undefined)\n        {\n            const clearcoatTexture = new gltfTextureInfo();\n            clearcoatTexture.fromJson(jsonClearcoat.clearcoatTexture);\n            this.clearcoatTexture = clearcoatTexture;\n        }\n\n        if(jsonClearcoat.clearcoatRoughnessTexture !== undefined)\n        {\n            const clearcoatRoughnessTexture =  new gltfTextureInfo();\n            clearcoatRoughnessTexture.fromJson(jsonClearcoat.clearcoatRoughnessTexture);\n            this.clearcoatRoughnessTexture = clearcoatRoughnessTexture;\n        }\n\n        if(jsonClearcoat.clearcoatNormalTexture !== undefined)\n        {\n            const clearcoatNormalTexture =  new gltfTextureInfo();\n            clearcoatNormalTexture.fromJson(jsonClearcoat.clearcoatNormalTexture);\n            this.clearcoatNormalTexture = clearcoatNormalTexture;\n        }\n    }\n\n    fromJsonSheen(jsonSheen)\n    {\n        if(jsonSheen.sheenColorTexture !== undefined)\n        {\n            const sheenColorTexture = new gltfTextureInfo();\n            sheenColorTexture.fromJson(jsonSheen.sheenColorTexture);\n            this.sheenColorTexture = sheenColorTexture;\n        }\n        if(jsonSheen.sheenRoughnessTexture !== undefined)\n        {\n            const sheenRoughnessTexture = new gltfTextureInfo();\n            sheenRoughnessTexture.fromJson(jsonSheen.sheenRoughnessTexture);\n            this.sheenRoughnessTexture = sheenRoughnessTexture;\n        }\n    }\n\n    fromJsonTransmission(jsonTransmission)\n    {\n        if(jsonTransmission.transmissionTexture !== undefined)\n        {\n            const transmissionTexture = new gltfTextureInfo();\n            transmissionTexture.fromJson(jsonTransmission.transmissionTexture);\n            this.transmissionTexture = transmissionTexture;\n        }\n    }\n}\n\nexport { gltfMaterial };\n","class DracoDecoder {\n\n    constructor(dracoLib) {\n        if (!DracoDecoder.instance && dracoLib === undefined)\n        {\n            if (DracoDecoderModule === undefined)\n            {\n                console.error('Failed to initalize DracoDecoder: draco library undefined');\n                return undefined;\n            }\n            else\n            {\n                dracoLib = DracoDecoderModule;\n            }\n        }\n        if (!DracoDecoder.instance)\n        {\n            DracoDecoder.instance = this;\n            this.module = null;\n\n            this.initializingPromise = new Promise(resolve => {\n                let dracoDecoderType = {};\n                dracoDecoderType['onModuleLoaded'] = dracoDecoderModule => {\n                    this.module = dracoDecoderModule;\n                    resolve();\n                };\n                dracoLib(dracoDecoderType);\n            });\n        }\n        return DracoDecoder.instance;\n    }\n\n    async ready() {\n        await this.initializingPromise;\n        Object.freeze(DracoDecoder.instance);\n    }\n\n}\n\nexport { DracoDecoder };\n","import { initGlForMembers } from './utils.js';\nimport { GltfObject } from './gltf_object.js';\nimport { gltfBuffer } from './buffer.js';\nimport { gltfBufferView } from './buffer_view.js';\nimport { DracoDecoder } from '../ResourceLoader/draco.js';\nimport { GL  } from '../Renderer/webgl.js';\n\nclass gltfPrimitive extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.attributes = [];\n        this.targets = [];\n        this.indices = undefined;\n        this.material = undefined;\n        this.mode = GL.TRIANGLES;\n\n        // non gltf\n        this.glAttributes = [];\n        this.defines = [];\n        this.skip = true;\n        this.hasWeights = false;\n        this.hasJoints = false;\n        this.hasNormals = false;\n        this.hasTangents = false;\n        this.hasTexcoord = false;\n        this.hasColor = false;\n\n        // The primitive centroid is used for depth sorting.\n        this.centroid = undefined;\n    }\n\n    initGl(gltf, webGlContext)\n    {\n        // Use the default glTF material.\n        if (this.material === undefined)\n        {\n            this.material = gltf.materials.length - 1;\n        }\n\n        initGlForMembers(this, gltf, webGlContext);\n\n        const maxAttributes = webGlContext.getParameter(GL.MAX_VERTEX_ATTRIBS);\n\n        // https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes\n\n        if (this.extensions !== undefined)\n        {\n            if (this.extensions.KHR_draco_mesh_compression !== undefined)\n            {\n                const dracoDecoder = new DracoDecoder();\n                if (dracoDecoder !== undefined && Object.isFrozen(dracoDecoder))\n                {\n                    let dracoGeometry = this.decodeDracoBufferToIntermediate(\n                        this.extensions.KHR_draco_mesh_compression, gltf);\n                    this.copyDataFromDecodedGeometry(gltf, dracoGeometry, this.attributes);\n                }\n                else\n                {\n                    console.warn('Failed to load draco compressed mesh: DracoDecoder not initialized');\n                }\n            }\n        }\n\n        // VERTEX ATTRIBUTES\n        for (const attribute of Object.keys(this.attributes))\n        {\n            if(this.glAttributes.length >= maxAttributes)\n            {\n                console.error(\"To many vertex attributes for this primitive, skipping \" + attribute);\n                break;\n            }\n\n            const idx = this.attributes[attribute];\n            switch (attribute)\n            {\n            case \"POSITION\":\n                this.skip = false;\n                this.glAttributes.push({ attribute: attribute, name: \"a_Position\", accessor: idx });\n                break;\n            case \"NORMAL\":\n                this.hasNormals = true;\n                this.defines.push(\"HAS_NORMALS 1\");\n                this.glAttributes.push({ attribute: attribute, name: \"a_Normal\", accessor: idx });\n                break;\n            case \"TANGENT\":\n                this.hasTangents = true;\n                this.defines.push(\"HAS_TANGENTS 1\");\n                this.glAttributes.push({ attribute: attribute, name: \"a_Tangent\", accessor: idx });\n                break;\n            case \"TEXCOORD_0\":\n                this.hasTexcoord = true;\n                this.defines.push(\"HAS_UV_SET1 1\");\n                this.glAttributes.push({ attribute: attribute, name: \"a_UV1\", accessor: idx });\n                break;\n            case \"TEXCOORD_1\":\n                this.hasTexcoord = true;\n                this.defines.push(\"HAS_UV_SET2 1\");\n                this.glAttributes.push({ attribute: attribute, name: \"a_UV2\", accessor: idx });\n                break;\n            case \"COLOR_0\":\n                this.hasColor = true;\n                const accessor = gltf.accessors[idx];\n                this.defines.push(\"HAS_VERTEX_COLOR_\" + accessor.type + \" 1\");\n                this.glAttributes.push({ attribute: attribute, name: \"a_Color\", accessor: idx });\n                break;\n            case \"JOINTS_0\":\n                this.hasJoints = true;\n                this.defines.push(\"HAS_JOINT_SET1 1\");\n                this.glAttributes.push({ attribute: attribute, name: \"a_Joint1\", accessor: idx });\n                break;\n            case \"WEIGHTS_0\":\n                this.hasWeights = true;\n                this.defines.push(\"HAS_WEIGHT_SET1 1\");\n                this.glAttributes.push({ attribute: attribute, name: \"a_Weight1\", accessor: idx });\n                break;\n            case \"JOINTS_1\":\n                this.hasJoints = true;\n                this.defines.push(\"HAS_JOINT_SET2 1\");\n                this.glAttributes.push({ attribute: attribute, name: \"a_Joint2\", accessor: idx });\n                break;\n            case \"WEIGHTS_1\":\n                this.hasWeights = true;\n                this.defines.push(\"HAS_WEIGHT_SET2 1\");\n                this.glAttributes.push({ attribute: attribute, name: \"a_Weight2\", accessor: idx });\n                break;\n            default:\n                console.log(\"Unknown attribute: \" + attribute);\n            }\n        }\n\n        // MORPH TARGETS\n        if (this.targets !== undefined)\n        {\n            let i = 0;\n            for (const target of this.targets)\n            {\n                if(this.glAttributes.length + 3 > maxAttributes)\n                {\n                    console.error(\"To many vertex attributes for this primitive, skipping target \" + i);\n                    break;\n                }\n\n                for (const attribute of Object.keys(target))\n                {\n                    const idx = target[attribute];\n\n                    switch (attribute)\n                    {\n                    case \"POSITION\":\n                        this.defines.push(\"HAS_TARGET_POSITION\" + i + \" 1\");\n                        this.glAttributes.push({ attribute: attribute, name: \"a_Target_Position\" + i, accessor: idx });\n                        break;\n                    case \"NORMAL\":\n                        this.defines.push(\"HAS_TARGET_NORMAL\" + i + \" 1\");\n                        this.glAttributes.push({ attribute: attribute, name: \"a_Target_Normal\" + i, accessor: idx });\n                        break;\n                    case \"TANGENT\":\n                        this.defines.push(\"HAS_TARGET_TANGENT\" + i + \" 1\");\n                        this.glAttributes.push({ attribute: attribute, name: \"a_Target_Tangent\" + i, accessor: idx });\n                        break;\n                    }\n                }\n\n                ++i;\n            }\n        }\n    }\n\n    getShaderIdentifier()\n    {\n        return \"primitive.vert\";\n    }\n\n    getDefines()\n    {\n        return this.defines;\n    }\n\n    setCentroid(centroid)\n    {\n        this.centroid = centroid;\n    }\n\n    fromJson(jsonPrimitive)\n    {\n        super.fromJson(jsonPrimitive);\n\n        if(jsonPrimitive.extensions !== undefined)\n        {\n            this.fromJsonPrimitiveExtensions(jsonPrimitive.extensions);\n        }\n    }\n\n    fromJsonPrimitiveExtensions(jsonExtensions)\n    {\n        if(jsonExtensions.KHR_materials_variants !== undefined)\n        {\n            this.fromJsonVariants(jsonExtensions.KHR_materials_variants);\n        }\n    }\n\n    fromJsonVariants(jsonVariants)\n    {\n        if(jsonVariants.mappings !== undefined)\n        {\n            this.mappings = jsonVariants.mappings;\n        }\n    }\n\n    copyDataFromDecodedGeometry(gltf, dracoGeometry, primitiveAttributes)\n    {\n        // indices\n        let indexBuffer = dracoGeometry.index.array;\n        this.loadBufferIntoGltf(indexBuffer, gltf, this.indices, 34963,\n            \"index buffer view\");\n\n        // Position\n        if(dracoGeometry.attributes.POSITION !== undefined)\n        {\n            let positionBuffer = this.loadArrayIntoArrayBuffer(dracoGeometry.attributes.POSITION.array,\n                dracoGeometry.attributes.POSITION.componentType);\n            this.loadBufferIntoGltf(positionBuffer, gltf, primitiveAttributes[\"POSITION\"], 34962,\n                \"position buffer view\");\n        }\n\n        // Normal\n        if(dracoGeometry.attributes.NORMAL !== undefined)\n        {\n            let normalBuffer = this.loadArrayIntoArrayBuffer(dracoGeometry.attributes.NORMAL.array,\n                dracoGeometry.attributes.NORMAL.componentType);\n            this.loadBufferIntoGltf(normalBuffer, gltf, primitiveAttributes[\"NORMAL\"], 34962,\n                \"normal buffer view\");\n        }\n\n        // TEXCOORD_0\n        if(dracoGeometry.attributes.TEXCOORD_0 !== undefined)\n        {\n            let uvBuffer = this.loadArrayIntoArrayBuffer(dracoGeometry.attributes.TEXCOORD_0.array,\n                dracoGeometry.attributes.TEXCOORD_0.componentType);\n            this.loadBufferIntoGltf(uvBuffer, gltf, primitiveAttributes[\"TEXCOORD_0\"], 34962,\n                \"TEXCOORD_0 buffer view\");\n        }\n\n        // TEXCOORD_1\n        if(dracoGeometry.attributes.TEXCOORD_1 !== undefined)\n        {\n            let uvBuffer = this.loadArrayIntoArrayBuffer(dracoGeometry.attributes.TEXCOORD_1.array,\n                dracoGeometry.attributes.TEXCOORD_1.componentType);\n            this.loadBufferIntoGltf(uvBuffer, gltf, primitiveAttributes[\"TEXCOORD_1\"], 34962,\n                \"TEXCOORD_1 buffer view\");\n        }\n\n        // Tangent\n        if(dracoGeometry.attributes.TANGENT !== undefined)\n        {\n            let tangentBuffer = this.loadArrayIntoArrayBuffer(dracoGeometry.attributes.TANGENT.array,\n                dracoGeometry.attributes.TANGENT.componentType);\n            this.loadBufferIntoGltf(tangentBuffer, gltf, primitiveAttributes[\"TANGENT\"], 34962,\n                \"Tangent buffer view\");\n        }\n\n        // Color\n        if(dracoGeometry.attributes.COLOR_0 !== undefined)\n        {\n            let colorBuffer = this.loadArrayIntoArrayBuffer(dracoGeometry.attributes.COLOR_0.array,\n                dracoGeometry.attributes.COLOR_0.componentType);\n            this.loadBufferIntoGltf(colorBuffer, gltf, primitiveAttributes[\"COLOR_0\"], 34962,\n                \"color buffer view\");\n        }\n\n        // JOINTS_0\n        if(dracoGeometry.attributes.JOINTS_0 !== undefined)\n        {\n            let jointsBuffer = this.loadArrayIntoArrayBuffer(dracoGeometry.attributes.JOINTS_0.array,\n                dracoGeometry.attributes.JOINTS_0.componentType);\n            this.loadBufferIntoGltf(jointsBuffer, gltf, primitiveAttributes[\"JOINTS_0\"], 34963,\n                \"JOINTS_0 buffer view\");\n        }\n\n        // WEIGHTS_0\n        if(dracoGeometry.attributes.WEIGHTS_0 !== undefined)\n        {\n            let weightsBuffer = this.loadArrayIntoArrayBuffer(dracoGeometry.attributes.WEIGHTS_0.array,\n                dracoGeometry.attributes.WEIGHTS_0.componentType);\n            this.loadBufferIntoGltf(weightsBuffer, gltf, primitiveAttributes[\"WEIGHTS_0\"], 34963,\n                \"WEIGHTS_0 buffer view\");\n        }\n\n        // JOINTS_1\n        if(dracoGeometry.attributes.JOINTS_1 !== undefined)\n        {\n            let jointsBuffer = this.loadArrayIntoArrayBuffer(dracoGeometry.attributes.JOINTS_1.array,\n                dracoGeometry.attributes.JOINTS_1.componentType);\n            this.loadBufferIntoGltf(jointsBuffer, gltf, primitiveAttributes[\"JOINTS_1\"], 34963,\n                \"JOINTS_1 buffer view\");\n        }\n\n        // WEIGHTS_1\n        if(dracoGeometry.attributes.WEIGHTS_1 !== undefined)\n        {\n            let weightsBuffer = this.loadArrayIntoArrayBuffer(dracoGeometry.attributes.WEIGHTS_1.array,\n                dracoGeometry.attributes.WEIGHTS_1.componentType);\n            this.loadBufferIntoGltf(weightsBuffer, gltf, primitiveAttributes[\"WEIGHTS_1\"], 34963,\n                \"WEIGHTS_1 buffer view\");\n        }\n    }\n\n    loadBufferIntoGltf(buffer, gltf, gltfAccessorIndex, gltfBufferViewTarget, gltfBufferViewName)\n    {\n        const gltfBufferObj = new gltfBuffer();\n        gltfBufferObj.byteLength = buffer.byteLength;\n        gltfBufferObj.buffer = buffer;\n        gltf.buffers.push(gltfBufferObj);\n\n        const gltfBufferViewObj = new gltfBufferView();\n        gltfBufferViewObj.buffer = gltf.buffers.length - 1;\n        gltfBufferViewObj.byteLength = buffer.byteLength;\n        if(gltfBufferViewName !== undefined)\n        {\n            gltfBufferViewObj.name = gltfBufferViewName;\n        }\n        gltfBufferViewObj.target = gltfBufferViewTarget;\n        gltf.bufferViews.push(gltfBufferViewObj);\n\n        gltf.accessors[gltfAccessorIndex].byteOffset = 0;\n        gltf.accessors[gltfAccessorIndex].bufferView = gltf.bufferViews.length - 1;\n    }\n\n    loadArrayIntoArrayBuffer(arrayData, componentType)\n    {\n        let arrayBuffer;\n        switch (componentType)\n        {\n        case \"Int8Array\":\n            arrayBuffer = new ArrayBuffer(arrayData.length);\n            let int8Array = new Int8Array(arrayBuffer);\n            int8Array.set(arrayData);\n            break;\n        case \"Uint8Array\":\n            arrayBuffer = new ArrayBuffer(arrayData.length);\n            let uint8Array = new Uint8Array(arrayBuffer);\n            uint8Array.set(arrayData);\n            break;\n        case \"Int16Array\":\n            arrayBuffer = new ArrayBuffer(arrayData.length * 2);\n            let int16Array = new Int16Array(arrayBuffer);\n            int16Array.set(arrayData);\n            break;\n        case \"Uint16Array\":\n            arrayBuffer = new ArrayBuffer(arrayData.length * 2);\n            let uint16Array = new Uint16Array(arrayBuffer);\n            uint16Array.set(arrayData);\n            break;\n        case \"Int32Array\":\n            arrayBuffer = new ArrayBuffer(arrayData.length * 4);\n            let int32Array = new Int32Array(arrayBuffer);\n            int32Array.set(arrayData);\n            break;\n        case \"Uint32Array\":\n            arrayBuffer = new ArrayBuffer(arrayData.length * 4);\n            let uint32Array = new Uint32Array(arrayBuffer);\n            uint32Array.set(arrayData);\n            break;\n        default:\n        case \"Float32Array\":\n            arrayBuffer = new ArrayBuffer(arrayData.length * 4);\n            let floatArray = new Float32Array(arrayBuffer);\n            floatArray.set(arrayData);\n            break;\n        }\n\n\n        return arrayBuffer;\n    }\n\n    decodeDracoBufferToIntermediate(dracoExtension, gltf)\n    {\n        let dracoBufferViewIDX = dracoExtension.bufferView;\n\n        const origGltfDrBufViewObj = gltf.bufferViews[dracoBufferViewIDX];\n        const origGltfDracoBuffer = gltf.buffers[origGltfDrBufViewObj.buffer];\n\n        const totalBuffer = new Int8Array( origGltfDracoBuffer.buffer );\n        const actualBuffer = totalBuffer.slice(origGltfDrBufViewObj.byteOffset,\n            origGltfDrBufViewObj.byteOffset + origGltfDrBufViewObj.byteLength);\n\n        // decode draco buffer to geometry intermediate\n        let dracoDecoder = new DracoDecoder();\n        let draco = dracoDecoder.module;\n        let decoder = new draco.Decoder();\n        let decoderBuffer = new draco.DecoderBuffer();\n        decoderBuffer.Init(actualBuffer, origGltfDrBufViewObj.byteLength);\n        let geometry = this.decodeGeometry( draco, decoder, decoderBuffer, dracoExtension.attributes, gltf );\n\n        draco.destroy( decoderBuffer );\n\n        return geometry;\n    }\n\n    getDracoArrayTypeFromComponentType(componentType)\n    {\n        switch (componentType)\n        {\n        case GL.BYTE:\n            return \"Int8Array\";\n        case GL.UNSIGNED_BYTE:\n            return \"Uint8Array\";\n        case GL.SHORT:\n            return \"Int16Array\";\n        case GL.UNSIGNED_SHORT:\n            return \"Uint16Array\";\n        case GL.INT:\n            return \"Int32Array\";\n        case GL.UNSIGNED_INT:\n            return \"Uint32Array\";\n        case GL.FLOAT:\n            return \"Float32Array\";\n        default:\n            return \"Float32Array\";\n        }\n    }\n\n    decodeGeometry(draco, decoder, decoderBuffer, gltfDracoAttributes, gltf) {\n        let dracoGeometry;\n        let decodingStatus;\n\n        // decode mesh in draco decoder\n        let geometryType = decoder.GetEncodedGeometryType( decoderBuffer );\n        if ( geometryType === draco.TRIANGULAR_MESH ) {\n            dracoGeometry = new draco.Mesh();\n            decodingStatus = decoder.DecodeBufferToMesh( decoderBuffer, dracoGeometry );\n        }\n        else\n        {\n            throw new Error( 'DRACOLoader: Unexpected geometry type.' );\n        }\n\n        if ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n            throw new Error( 'DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n        }\n\n        let geometry = { index: null, attributes: {} };\n        let vertexCount = dracoGeometry.num_points();\n\n        // Gather all vertex attributes.\n        for(let dracoAttr in gltfDracoAttributes)\n        {\n            let componentType = GL.BYTE;\n            let accessotVertexCount;\n            // find gltf accessor for this draco attribute\n            for (const [key, value] of Object.entries(this.attributes))\n            {\n                if(key === dracoAttr)\n                {\n                    componentType = gltf.accessors[value].componentType;\n                    accessotVertexCount = gltf.accessors[value].count;\n                    break;\n                }\n            }\n\n            // check if vertex count matches\n            if(vertexCount !== accessotVertexCount)\n            {\n                throw new Error(`DRACOLoader: Accessor vertex count ${accessotVertexCount} does not match draco decoder vertex count  ${vertexCount}`);\n            }\n            componentType = this.getDracoArrayTypeFromComponentType(componentType);\n\n            let dracoAttribute = decoder.GetAttributeByUniqueId( dracoGeometry, gltfDracoAttributes[dracoAttr]);\n            var tmpObj = this.decodeAttribute( draco, decoder,\n                dracoGeometry, dracoAttr, dracoAttribute, componentType);\n            geometry.attributes[tmpObj.name] = tmpObj;\n        }\n\n        // Add index buffer\n        if ( geometryType === draco.TRIANGULAR_MESH ) {\n\n            // Generate mesh faces.\n            let numFaces = dracoGeometry.num_faces();\n            let numIndices = numFaces * 3;\n            let dataSize = numIndices * 4;\n            let ptr = draco._malloc( dataSize );\n            decoder.GetTrianglesUInt32Array( dracoGeometry, dataSize, ptr );\n            let index = new Uint32Array( draco.HEAPU32.buffer, ptr, numIndices ).slice();\n            draco._free( ptr );\n\n            geometry.index = { array: index, itemSize: 1 };\n\n        }\n\n        draco.destroy( dracoGeometry );\n        return geometry;\n    }\n\n    decodeAttribute( draco, decoder, dracoGeometry, attributeName, attribute, attributeType) {\n        let numComponents = attribute.num_components();\n        let numPoints = dracoGeometry.num_points();\n        let numValues = numPoints * numComponents;\n\n        let ptr;\n        let array;\n\n        let dataSize;\n        switch ( attributeType ) {\n        case \"Float32Array\":\n            dataSize = numValues * 4;\n            ptr = draco._malloc( dataSize );\n            decoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, draco.DT_FLOAT32, dataSize, ptr );\n            array = new Float32Array( draco.HEAPF32.buffer, ptr, numValues ).slice();\n            draco._free( ptr );\n            break;\n\n        case \"Int8Array\":\n            ptr = draco._malloc( numValues );\n            decoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, draco.DT_INT8, numValues, ptr );\n            array = new Int8Array( draco.HEAP8.buffer, ptr, numValues ).slice();\n            draco._free( ptr );\n            break;\n\n        case \"Int16Array\":\n            dataSize = numValues * 2;\n            ptr = draco._malloc( dataSize );\n            decoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, draco.DT_INT16, dataSize, ptr );\n            array = new Int16Array( draco.HEAP16.buffer, ptr, numValues ).slice();\n            draco._free( ptr );\n            break;\n\n        case \"Int32Array\":\n            dataSize = numValues * 4;\n            ptr = draco._malloc( dataSize );\n            decoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, draco.DT_INT32, dataSize, ptr );\n            array = new Int32Array( draco.HEAP32.buffer, ptr, numValues ).slice();\n            draco._free( ptr );\n            break;\n\n        case \"Uint8Array\":\n            ptr = draco._malloc( numValues );\n            decoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, draco.DT_UINT8, numValues, ptr );\n            array = new Uint8Array( draco.HEAPU8.buffer, ptr, numValues ).slice();\n            draco._free( ptr );\n            break;\n\n        case \"Uint16Array\":\n            dataSize = numValues * 2;\n            ptr = draco._malloc( dataSize );\n            decoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, draco.DT_UINT16, dataSize, ptr );\n            array = new Uint16Array( draco.HEAPU16.buffer, ptr, numValues ).slice();\n            draco._free( ptr );\n            break;\n\n        case \"Uint32Array\":\n            dataSize = numValues * 4;\n            ptr = draco._malloc( dataSize );\n            decoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, draco.DT_UINT32, dataSize, ptr );\n            array = new Uint32Array( draco.HEAPU32.buffer, ptr, numValues ).slice();\n            draco._free( ptr );\n            break;\n\n        default:\n            throw new Error( 'DRACOLoader: Unexpected attribute type.' );\n        }\n\n        return {\n            name: attributeName,\n            array: array,\n            itemSize: numComponents,\n            componentType: attributeType\n        };\n\n    }\n}\n\nexport { gltfPrimitive };\n\n","import { gltfPrimitive } from './primitive.js';\nimport { objectsFromJsons } from './utils.js';\nimport { GltfObject } from './gltf_object.js';\n\nclass gltfMesh extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.primitives = [];\n        this.name = undefined;\n        this.weights = [];\n    }\n\n    fromJson(jsonMesh)\n    {\n        super.fromJson(jsonMesh);\n\n        if (jsonMesh.name !== undefined)\n        {\n            this.name = jsonMesh.name;\n        }\n\n        this.primitives = objectsFromJsons(jsonMesh.primitives, gltfPrimitive);\n\n        if(jsonMesh.weights !== undefined)\n        {\n            this.weights = jsonMesh.weights;\n        }\n    }\n}\n\nexport { gltfMesh };\n","import { mat4, quat } from 'gl-matrix';\nimport { jsToGl } from './utils.js';\nimport { GltfObject } from './gltf_object.js';\n\n// contain:\n// transform\n// child indices (reference to scene array of nodes)\n\nclass gltfNode extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.camera = undefined;\n        this.children = [];\n        this.matrix = undefined;\n        this.rotation = jsToGl([0, 0, 0, 1]);\n        this.scale = jsToGl([1, 1, 1]);\n        this.translation = jsToGl([0, 0, 0]);\n        this.name = undefined;\n        this.mesh = undefined;\n        this.skin = undefined;\n\n        // non gltf\n        this.worldTransform = mat4.create();\n        this.inverseWorldTransform = mat4.create();\n        this.normalMatrix = mat4.create();\n        this.light = undefined;\n        this.changed = true;\n    }\n\n    initGl()\n    {\n        if (this.matrix !== undefined)\n        {\n            this.applyMatrix(this.matrix);\n        }\n        else\n        {\n            if (this.scale !== undefined)\n            {\n                this.scale = jsToGl(this.scale);\n            }\n\n            if (this.rotation !== undefined)\n            {\n                this.rotation = jsToGl(this.rotation);\n            }\n\n            if (this.translation !== undefined)\n            {\n                this.translation = jsToGl(this.translation);\n            }\n        }\n        this.changed = true;\n    }\n\n    applyMatrix(matrixData)\n    {\n        this.matrix = jsToGl(matrixData);\n\n        mat4.getScaling(this.scale, this.matrix);\n\n        // To extract a correct rotation, the scaling component must be eliminated.\n        const mn = mat4.create();\n        for(const col of [0, 1, 2])\n        {\n            mn[col] = this.matrix[col] / this.scale[0];\n            mn[col + 4] = this.matrix[col + 4] / this.scale[1];\n            mn[col + 8] = this.matrix[col + 8] / this.scale[2];\n        }\n        mat4.getRotation(this.rotation, mn);\n        quat.normalize(this.rotation, this.rotation);\n\n        mat4.getTranslation(this.translation, this.matrix);\n\n        this.changed = true;\n    }\n\n    // vec3\n    applyTranslation(translation)\n    {\n        this.translation = translation;\n        this.changed = true;\n    }\n\n    // quat\n    applyRotation(rotation)\n    {\n        this.rotation = rotation;\n        this.changed = true;\n    }\n\n    // vec3\n    applyScale(scale)\n    {\n        this.scale = scale;\n        this.changed = true;\n    }\n\n    resetTransform()\n    {\n        this.rotation = jsToGl([0, 0, 0, 1]);\n        this.scale = jsToGl([1, 1, 1]);\n        this.translation = jsToGl([0, 0, 0]);\n        this.changed = true;\n    }\n\n    getLocalTransform()\n    {\n        if(this.transform === undefined || this.changed)\n        {\n            this.transform = mat4.create();\n            mat4.fromRotationTranslationScale(this.transform, this.rotation, this.translation, this.scale);\n            this.changed = false;\n        }\n\n        return mat4.clone(this.transform);\n    }\n}\n\nexport { gltfNode };\n","import { GltfObject } from './gltf_object.js';\nimport { GL } from '../Renderer/webgl.js';\n\nclass gltfSampler extends GltfObject\n{\n    constructor(\n        magFilter = GL.LINEAR,\n        minFilter = GL.LINEAR_MIPMAP_LINEAR,\n        wrapS = GL.REPEAT,\n        wrapT = GL.REPEAT)\n    {\n        super();\n        this.magFilter = magFilter;\n        this.minFilter = minFilter;\n        this.wrapS = wrapS;\n        this.wrapT = wrapT;\n        this.name = undefined;\n    }\n\n    static createDefault()\n    {\n        return new gltfSampler();\n    }\n}\n\nexport { gltfSampler };\n","import { mat4 } from 'gl-matrix';\nimport { GltfObject } from './gltf_object';\n\nclass gltfScene extends GltfObject\n{\n    constructor(nodes = [], name = undefined)\n    {\n        super();\n        this.nodes = nodes;\n        this.name = name;\n\n        // non gltf\n        this.imageBasedLight = undefined;\n    }\n\n    initGl(gltf, webGlContext)\n    {\n        super.initGl(gltf, webGlContext);\n\n        if (this.extensions !== undefined &&\n            this.extensions.KHR_lights_image_based !== undefined)\n        {\n            const index = this.extensions.KHR_lights_image_based.imageBasedLight;\n            this.imageBasedLight = gltf.imageBasedLights[index];\n        }\n    }\n\n    applyTransformHierarchy(gltf, rootTransform = mat4.create())\n    {\n        function applyTransform(gltf, node, parentTransform)\n        {\n            mat4.multiply(node.worldTransform, parentTransform, node.getLocalTransform());\n            mat4.invert(node.inverseWorldTransform, node.worldTransform);\n            mat4.transpose(node.normalMatrix, node.inverseWorldTransform);\n\n            for (const child of node.children)\n            {\n                applyTransform(gltf, gltf.nodes[child], node.worldTransform);\n            }\n        }\n\n        for (const node of this.nodes)\n        {\n            applyTransform(gltf, gltf.nodes[node], rootTransform);\n        }\n    }\n\n    gatherNodes(gltf)\n    {\n        const nodes = [];\n\n        function gatherNode(nodeIndex)\n        {\n            const node = gltf.nodes[nodeIndex];\n            nodes.push(node);\n\n            // recurse into children\n            for(const child of node.children)\n            {\n                gatherNode(child);\n            }\n        }\n\n        for (const node of this.nodes)\n        {\n            gatherNode(node);\n        }\n\n        return nodes;\n    }\n\n    includesNode(gltf, nodeIndex)\n    {\n        let children = [...this.nodes];\n        while(children.length > 0)\n        {\n            const childIndex = children.pop();\n\n            if (childIndex === nodeIndex)\n            {\n                return true;\n            }\n\n            children = children.concat(gltf.nodes[childIndex].children);\n        }\n\n        return false;\n    }\n}\n\nexport { gltfScene };\n","import { GltfObject } from \"./gltf_object\";\n\nclass gltfAsset extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.copyright = undefined;\n        this.generator = undefined;\n        this.version = undefined;\n        this.minVersion = undefined;\n    }\n}\n\nexport { gltfAsset as gltfAsset };\n","import { GltfObject } from './gltf_object.js';\n\nclass gltfAnimationChannel extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.target = {node: undefined, path: undefined};\n        this.sampler = undefined;\n    }\n}\n\nconst InterpolationPath =\n{\n    TRANSLATION: \"translation\",\n    ROTATION: \"rotation\",\n    SCALE: \"scale\",\n    WEIGHTS: \"weights\"\n};\n\nexport { gltfAnimationChannel, InterpolationPath };\n","import { GltfObject } from './gltf_object.js';\n\nclass gltfAnimationSampler extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.input = undefined;\n        this.interpolation = undefined;\n        this.output = undefined;\n    }\n}\n\nconst InterpolationModes =\n{\n    LINEAR: \"LINEAR\",\n    STEP: \"STEP\",\n    CUBICSPLINE: \"CUBICSPLINE\"\n};\n\nexport { gltfAnimationSampler, InterpolationModes };\n","import { InterpolationModes } from './animation_sampler.js';\nimport { InterpolationPath } from './channel.js';\nimport { clamp, jsToGlSlice } from './utils.js';\nimport { quat, glMatrix } from 'gl-matrix';\n\nclass gltfInterpolator\n{\n    constructor()\n    {\n        this.prevKey = 0;\n        this.prevT = 0.0;\n    }\n\n    slerpQuat(q1, q2, t)\n    {\n        const qn1 = quat.create();\n        const qn2 = quat.create();\n\n        quat.normalize(qn1, q1);\n        quat.normalize(qn2, q2);\n\n        const quatResult = quat.create();\n\n        quat.slerp(quatResult, qn1, qn2, t);\n        quat.normalize(quatResult, quatResult);\n\n        return quatResult;\n    }\n\n    step(prevKey, output, stride)\n    {\n        const result = new glMatrix.ARRAY_TYPE(stride);\n\n        for(let i = 0; i < stride; ++i)\n        {\n            result[i] = output[prevKey * stride + i];\n        }\n\n        return result;\n    }\n\n    linear(prevKey, nextKey, output, t, stride)\n    {\n        const result = new glMatrix.ARRAY_TYPE(stride);\n\n        for(let i = 0; i < stride; ++i)\n        {\n            result[i] = output[prevKey * stride + i] * (1-t) + output[nextKey * stride + i] * t;\n        }\n\n        return result;\n    }\n\n    cubicSpline(prevKey, nextKey, output, keyDelta, t, stride)\n    {\n        // stride: Count of components (4 in a quaternion).\n        // Scale by 3, because each output entry consist of two tangents and one data-point.\n        const prevIndex = prevKey * stride * 3;\n        const nextIndex = nextKey * stride * 3;\n        const A = 0;\n        const V = 1 * stride;\n        const B = 2 * stride;\n\n        const result = new glMatrix.ARRAY_TYPE(stride);\n        const tSq = t ** 2;\n        const tCub = t ** 3;\n\n        // We assume that the components in output are laid out like this: in-tangent, point, out-tangent.\n        // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#appendix-c-spline-interpolation\n        for(let i = 0; i < stride; ++i)\n        {\n            const v0 = output[prevIndex + i + V];\n            const a = keyDelta * output[nextIndex + i + A];\n            const b = keyDelta * output[prevIndex + i + B];\n            const v1 = output[nextIndex + i + V];\n\n            result[i] = ((2*tCub - 3*tSq + 1) * v0) + ((tCub - 2*tSq + t) * b) + ((-2*tCub + 3*tSq) * v1) + ((tCub - tSq) * a);\n        }\n\n        return result;\n    }\n\n    resetKey()\n    {\n        this.prevKey = 0;\n    }\n\n    interpolate(gltf, channel, sampler, t, stride, maxTime)\n    {\n        const input = gltf.accessors[sampler.input].getDeinterlacedView(gltf);\n        const output = gltf.accessors[sampler.output].getDeinterlacedView(gltf);\n\n        if(output.length === stride) // no interpolation for single keyFrame animations\n        {\n            return jsToGlSlice(output, 0, stride);\n        }\n\n        // Wrap t around, so the animation loops.\n        // Make sure that t is never earlier than the first keyframe and never later then the last keyframe.\n        t = t % maxTime;\n        t = clamp(t, input[0], input[input.length - 1]);\n\n        if (this.prevT > t)\n        {\n            this.prevKey = 0;\n        }\n\n        this.prevT = t;\n\n        // Find next keyframe: min{ t of input | t > prevKey }\n        let nextKey = null;\n        for (let i = this.prevKey; i < input.length; ++i)\n        {\n            if (t <= input[i])\n            {\n                nextKey = clamp(i, 1, input.length - 1);\n                break;\n            }\n        }\n        this.prevKey = clamp(nextKey - 1, 0, nextKey);\n\n        const keyDelta = input[nextKey] - input[this.prevKey];\n\n        // Normalize t: [t0, t1] -> [0, 1]\n        const tn = (t - input[this.prevKey]) / keyDelta;\n\n        if(channel.target.path === InterpolationPath.ROTATION)\n        {\n\n            if(InterpolationModes.CUBICSPLINE === sampler.interpolation)\n            {\n                // GLTF requires cubic spline interpolation for quaternions.\n                // https://github.com/KhronosGroup/glTF/issues/1386\n                const result = this.cubicSpline(this.prevKey, nextKey, output, keyDelta, tn, 4);\n                quat.normalize(result, result);\n                return result;\n            }\n            else if(sampler.interpolation === InterpolationModes.LINEAR)\n            {\n                const q0 = this.getQuat(output, this.prevKey);\n                const q1 = this.getQuat(output, nextKey);\n                return this.slerpQuat(q0, q1, tn);\n            }\n            else if(sampler.interpolation === InterpolationModes.STEP)\n            {\n                return this.getQuat(output, this.prevKey);\n            }\n\n        }\n\n        switch(sampler.interpolation)\n        {\n        case InterpolationModes.STEP:\n            return this.step(this.prevKey, output, stride);\n        case InterpolationModes.CUBICSPLINE:\n            return this.cubicSpline(this.prevKey, nextKey, output, keyDelta, tn, stride);\n        default:\n            return this.linear(this.prevKey, nextKey, output, tn, stride);\n        }\n    }\n\n    getQuat(output, index)\n    {\n        const x = output[4 * index];\n        const y = output[4 * index + 1];\n        const z = output[4 * index + 2];\n        const w = output[4 * index + 3];\n        return quat.fromValues(x, y, z, w);\n    }\n}\n\nexport { gltfInterpolator };\n","import { GltfObject } from './gltf_object.js';\nimport { objectsFromJsons } from './utils.js';\nimport { gltfAnimationChannel, InterpolationPath } from './channel.js';\nimport { gltfAnimationSampler } from './animation_sampler.js';\nimport { gltfInterpolator } from './interpolator.js';\n\nclass gltfAnimation extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.channels = [];\n        this.samplers = [];\n        this.name = '';\n\n        // not gltf\n        this.interpolators = [];\n        this.maxTime = 0;\n    }\n\n    fromJson(jsonAnimation)\n    {\n        super.fromJson(jsonAnimation);\n\n        this.channels = objectsFromJsons(jsonAnimation.channels, gltfAnimationChannel);\n        this.samplers = objectsFromJsons(jsonAnimation.samplers, gltfAnimationSampler);\n        this.name = jsonAnimation.name;\n\n        if(this.channels === undefined)\n        {\n            console.error(\"No channel data found for skin\");\n            return;\n        }\n\n        for(let i = 0; i < this.channels.length; ++i)\n        {\n            this.interpolators.push(new gltfInterpolator());\n        }\n    }\n\n    advance(gltf, totalTime)\n    {\n        if(this.channels === undefined)\n        {\n            return;\n        }\n\n        if(this.maxTime == 0)\n        {\n            for(let i = 0; i < this.channels.length; ++i)\n            {\n                const channel = this.channels[i];\n                const sampler = this.samplers[channel.sampler];\n                const input = gltf.accessors[sampler.input].getDeinterlacedView(gltf);\n                const max = input[input.length - 1];\n                if(max > this.maxTime)\n                {\n                    this.maxTime = max;\n                }\n            }\n        }\n\n        for(let i = 0; i < this.interpolators.length; ++i)\n        {\n            const channel = this.channels[i];\n            const sampler = this.samplers[channel.sampler];\n            const interpolator = this.interpolators[i];\n\n            const node = gltf.nodes[channel.target.node];\n\n            switch(channel.target.path)\n            {\n            case InterpolationPath.TRANSLATION:\n                node.applyTranslation(interpolator.interpolate(gltf, channel, sampler, totalTime, 3, this.maxTime));\n                break;\n            case InterpolationPath.ROTATION:\n                node.applyRotation(interpolator.interpolate(gltf, channel, sampler, totalTime, 4, this.maxTime));\n                break;\n            case InterpolationPath.SCALE:\n                node.applyScale(interpolator.interpolate(gltf, channel, sampler, totalTime, 3, this.maxTime));\n                break;\n            case InterpolationPath.WEIGHTS:\n            {\n                const mesh = gltf.meshes[node.mesh];\n                mesh.weights = interpolator.interpolate(gltf, channel, sampler, totalTime, mesh.weights.length, this.maxTime);\n                break;\n            }\n            }\n        }\n    }\n}\n\nexport { gltfAnimation };\n","import { jsToGlSlice } from './utils.js';\nimport { GltfObject } from './gltf_object.js';\nimport { mat4 } from 'gl-matrix';\n\nclass gltfSkin extends GltfObject\n{\n    constructor()\n    {\n        super();\n\n        this.name = \"\";\n        this.inverseBindMatrices = undefined;\n        this.joints = [];\n        this.skeleton = undefined;\n\n        // not gltf\n        this.jointMatrices = [];\n        this.jointNormalMatrices = [];\n    }\n\n    computeJoints(gltf, parentNode)\n    {\n        const ibmAccessor = gltf.accessors[this.inverseBindMatrices].getDeinterlacedView(gltf);\n        this.jointMatrices = [];\n        this.jointNormalMatrices = [];\n\n        let i = 0;\n        for(const joint of this.joints)\n        {\n            const node = gltf.nodes[joint];\n\n            let jointMatrix = mat4.create();\n            let ibm = jsToGlSlice(ibmAccessor, i++ * 16, 16);\n            mat4.mul(jointMatrix, node.worldTransform, ibm);\n            mat4.mul(jointMatrix, parentNode.inverseWorldTransform, jointMatrix);\n            this.jointMatrices.push(jointMatrix);\n\n            let normalMatrix = mat4.create();\n            mat4.invert(normalMatrix, jointMatrix);\n            mat4.transpose(normalMatrix, normalMatrix);\n            this.jointNormalMatrices.push(normalMatrix);\n        }\n    }\n}\n\nexport { gltfSkin };\n","import { GltfObject } from './gltf_object.js';\n\nclass gltfVariant extends GltfObject\n{\n    constructor()\n    {\n        super();\n        this.name = undefined;\n    }\n\n    fromJson(jsonVariant)\n    {\n        if(jsonVariant.name !== undefined)\n        {\n            this.name = jsonVariant.name;\n        }\n    }\n}\n\nexport { gltfVariant as gltfVariant };\n","import { gltfAccessor } from './accessor.js';\nimport { gltfBuffer } from './buffer.js';\nimport { gltfBufferView } from './buffer_view.js';\nimport { gltfCamera } from './camera.js';\nimport { gltfImage } from './image.js';\nimport { gltfLight } from './light.js';\nimport { ImageBasedLight } from './image_based_light.js';\nimport { gltfMaterial } from './material.js';\nimport { gltfMesh } from './mesh.js';\nimport { gltfNode } from './node.js';\nimport { gltfSampler } from './sampler.js';\nimport { gltfScene } from './scene.js';\nimport { gltfTexture } from './texture.js';\nimport { initGlForMembers, objectsFromJsons, objectFromJson } from './utils';\nimport { gltfAsset } from './asset.js';\nimport { GltfObject } from './gltf_object.js';\nimport { gltfAnimation } from './animation.js';\nimport { gltfSkin } from './skin.js';\nimport { gltfVariant } from './variant.js';\n\nclass glTF extends GltfObject\n{\n    constructor(file)\n    {\n        super();\n        this.asset = undefined;\n        this.accessors = [];\n        this.nodes = [];\n        this.scene = undefined; // the default scene to show.\n        this.scenes = [];\n        this.cameras = [];\n        this.lights = [];\n        this.imageBasedLights = [];\n        this.textures = [];\n        this.images = [];\n        this.samplers = [];\n        this.meshes = [];\n        this.buffers = [];\n        this.bufferViews = [];\n        this.materials = [];\n        this.animations = [];\n        this.skins = [];\n        this.path = file;\n    }\n\n    initGl(webGlContext)\n    {\n        initGlForMembers(this, this, webGlContext);\n    }\n\n    fromJson(json)\n    {\n        super.fromJson(json);\n\n        this.asset = objectFromJson(json.asset, gltfAsset);\n        this.cameras = objectsFromJsons(json.cameras, gltfCamera);\n        this.accessors = objectsFromJsons(json.accessors, gltfAccessor);\n        this.meshes = objectsFromJsons(json.meshes, gltfMesh);\n        this.samplers = objectsFromJsons(json.samplers, gltfSampler);\n        this.materials = objectsFromJsons(json.materials, gltfMaterial);\n        this.buffers = objectsFromJsons(json.buffers, gltfBuffer);\n        this.bufferViews = objectsFromJsons(json.bufferViews, gltfBufferView);\n        this.scenes = objectsFromJsons(json.scenes, gltfScene);\n        this.textures = objectsFromJsons(json.textures, gltfTexture);\n        this.nodes = objectsFromJsons(json.nodes, gltfNode);\n        this.lights = objectsFromJsons(getJsonLightsFromExtensions(json.extensions), gltfLight);\n        this.imageBasedLights = objectsFromJsons(getJsonIBLsFromExtensions(json.extensions), ImageBasedLight);\n        this.images = objectsFromJsons(json.images, gltfImage);\n        this.animations = objectsFromJsons(json.animations, gltfAnimation);\n        this.skins = objectsFromJsons(json.skins, gltfSkin);\n        this.variants = objectsFromJsons(getJsonVariantsFromExtension(json.extensions), gltfVariant);\n        this.variants = enforceVariantsUniqueness(this.variants);\n\n        this.materials.push(gltfMaterial.createDefault());\n        this.samplers.push(gltfSampler.createDefault());\n\n        if (json.scenes !== undefined)\n        {\n            if (json.scene === undefined && json.scenes.length > 0)\n            {\n                this.scene = 0;\n            }\n            else\n            {\n                this.scene = json.scene;\n            }\n        }\n    }\n}\n\nfunction getJsonLightsFromExtensions(extensions)\n{\n    if (extensions === undefined)\n    {\n        return [];\n    }\n    if (extensions.KHR_lights_punctual === undefined)\n    {\n        return [];\n    }\n    return extensions.KHR_lights_punctual.lights;\n}\n\nfunction getJsonIBLsFromExtensions(extensions)\n{\n    if (extensions === undefined)\n    {\n        return [];\n    }\n    if (extensions.KHR_lights_image_based === undefined)\n    {\n        return [];\n    }\n    return extensions.KHR_lights_image_based.imageBasedLights;\n}\n\nfunction getJsonVariantsFromExtension(extensions)\n{\n    if (extensions === undefined)\n    {\n        return [];\n    }\n    if (extensions.KHR_materials_variants === undefined)\n    {\n        return [];\n    }\n    return extensions.KHR_materials_variants.variants;\n}\n\nfunction enforceVariantsUniqueness(variants)\n{\n    for(let i=0;i<variants.length;i++)\n    {\n        const name = variants[i].name;\n        for(let j=i+1;j<variants.length;j++)\n        {\n            if(variants[j].name == name)\n            {\n                variants[j].name += \"0\";  // Add random character to duplicates\n            }\n        }\n    }\n\n\n    return variants;\n}\n\nexport { glTF };\n","class GlbParser\n{\n    constructor(data)\n    {\n        this.data = data;\n        this.glbHeaderInts = 3;\n        this.glbChunkHeaderInts = 2;\n        this.glbMagic = 0x46546C67;\n        this.glbVersion = 2;\n        this.jsonChunkType = 0x4E4F534A;\n        this.binaryChunkType = 0x004E4942;\n    }\n\n    extractGlbData()\n    {\n        const glbInfo = this.getCheckedGlbInfo();\n        if (glbInfo === undefined)\n        {\n            return undefined;\n        }\n\n        let json = undefined;\n        let buffers = [];\n        const chunkInfos = this.getAllChunkInfos();\n        for (let chunkInfo of chunkInfos)\n        {\n            if (chunkInfo.type == this.jsonChunkType && !json)\n            {\n                json = this.getJsonFromChunk(chunkInfo);\n            }\n            else if (chunkInfo.type == this.binaryChunkType)\n            {\n                buffers.push(this.getBufferFromChunk(chunkInfo));\n            }\n        }\n\n        return { json: json, buffers: buffers };\n    }\n\n    getCheckedGlbInfo()\n    {\n        const header = new Uint32Array(this.data, 0, this.glbHeaderInts);\n        const magic = header[0];\n        const version = header[1];\n        const length = header[2];\n\n        if (!this.checkEquality(magic, this.glbMagic, \"glb magic\") ||\n            !this.checkEquality(version, this.glbVersion, \"glb header version\") ||\n            !this.checkEquality(length, this.data.byteLength, \"glb byte length\"))\n        {\n            return undefined;\n        }\n\n        return { \"magic\": magic, \"version\": version, \"length\": length };\n    }\n\n    getAllChunkInfos()\n    {\n        let infos = [];\n        let chunkStart = this.glbHeaderInts * 4;\n        while (chunkStart < this.data.byteLength)\n        {\n            const chunkInfo = this.getChunkInfo(chunkStart);\n            infos.push(chunkInfo);\n            chunkStart += chunkInfo.length + this.glbChunkHeaderInts * 4;\n        }\n        return infos;\n    }\n\n    getChunkInfo(headerStart)\n    {\n        const header = new Uint32Array(this.data, headerStart, this.glbChunkHeaderInts);\n        const chunkStart = headerStart + this.glbChunkHeaderInts * 4;\n        const chunkLength = header[0];\n        const chunkType = header[1];\n        return { \"start\": chunkStart, \"length\": chunkLength, \"type\": chunkType };\n    }\n\n    getJsonFromChunk(chunkInfo)\n    {\n        const chunkLength = chunkInfo.length;\n        const jsonStart = (this.glbHeaderInts + this.glbChunkHeaderInts) * 4;\n        const jsonSlice = new Uint8Array(this.data, jsonStart, chunkLength);\n        const stringBuffer = new TextDecoder(\"utf-8\").decode(jsonSlice);\n        return JSON.parse(stringBuffer);\n    }\n\n    getBufferFromChunk(chunkInfo)\n    {\n        return this.data.slice(chunkInfo.start, chunkInfo.start + chunkInfo.length);\n    }\n\n    checkEquality(actual, expected, name)\n    {\n        if (actual == expected)\n        {\n            return true;\n        }\n\n        console.error(\"Found invalid/unsupported \" + name + \", expected: \" + expected + \", but was: \" + actual);\n        return false;\n    }\n}\n\nexport { GlbParser };\n","\nclass gltfLoader\n{\n    static async load(gltf, webGlContext, appendix = undefined)\n    {\n        const buffers = gltfLoader.getBuffers(appendix);\n        const additionalFiles = gltfLoader.getAdditionalFiles(appendix);\n\n        const buffersPromise = gltfLoader.loadBuffers(gltf, buffers, additionalFiles);\n\n        await buffersPromise; // images might be stored in the buffers\n        const imagesPromise = gltfLoader.loadImages(gltf, additionalFiles);\n\n        return await Promise.all([buffersPromise, imagesPromise])\n            .then(() => gltf.initGl(webGlContext));\n    }\n\n    static unload(gltf)\n    {\n        for (let image of gltf.images)\n        {\n            image.image = undefined;\n        }\n        gltf.images = [];\n\n        for (let texture of gltf.textures)\n        {\n            texture.destroy();\n        }\n        gltf.textures = [];\n\n        for (let accessor of gltf.accessors)\n        {\n            accessor.destroy();\n        }\n        gltf.accessors = [];\n    }\n\n    static getBuffers(appendix)\n    {\n        return gltfLoader.getTypedAppendix(appendix, ArrayBuffer);\n    }\n\n    static getAdditionalFiles(appendix)\n    {\n        if(typeof(File) !== 'undefined')\n        {\n            return gltfLoader.getTypedAppendix(appendix, File);\n        }\n        else\n        {\n            return;\n        }\n    }\n\n    static getTypedAppendix(appendix, Type)\n    {\n        if (appendix && appendix.length > 0)\n        {\n            if (appendix[0] instanceof Type)\n            {\n                return appendix;\n            }\n        }\n    }\n\n    static loadBuffers(gltf, buffers, additionalFiles)\n    {\n        const promises = [];\n        if (buffers)\n        {\n            const count = Math.min(buffers.length, gltf.buffers.length);\n            for (let i = 0; i < count; ++i)\n            {\n                gltf.buffers[i].buffer = buffers[i];\n            }\n        }\n        else\n        {\n            for (const buffer of gltf.buffers)\n            {\n                promises.push(buffer.load(gltf, additionalFiles));\n            }\n        }\n        return Promise.all(promises);\n    }\n\n    static loadImages(gltf, additionalFiles)\n    {\n        const imagePromises = [];\n        for (let image of gltf.images)\n        {\n            imagePromises.push(image.load(gltf, additionalFiles));\n        }\n        return Promise.all(imagePromises);\n    }\n}\n\nexport { gltfLoader };\n","import { ShaderCache } from './Renderer/shader_cache.js';\n\n\nimport iblFiltering from './shaders/ibl_filtering.frag';\nimport panoramaToCubeMap from './shaders/panorama_to_cubemap.frag';\nimport debugOutput from './shaders/debug.frag';\nimport fullscreenShader from './shaders/fullscreen.vert';\n\n\n// How to use:\n// set canvas/context in constructor\n// init(input: panorama image)\n// filterAll()\n// fetch texture IDs\n\nclass iblSampler\n{\n    constructor(view)\n    {\n\n        this.gl = view.context;\n\n        this.textureSize = 256;\n        this.sampleCount = 64;\n        this.lodBias = 0.0;\n        this.mipmapCount = undefined;\n\n\n        this.lambertianTextureID = undefined;\n        this.ggxTextureID = undefined;\n        this.sheenTextureID = undefined;\n\n\n        this.inputTextureID = undefined;\n        this.cubemapTextureID = undefined;\n        this.framebuffer = undefined;\n\n        const shaderSources = new Map();\n\n        shaderSources.set(\"fullscreen.vert\", fullscreenShader);\n        shaderSources.set(\"panorama_to_cubemap.frag\", panoramaToCubeMap);\n        shaderSources.set(\"ibl_filtering.frag\", iblFiltering);\n        shaderSources.set(\"debug.frag\", debugOutput);\n\n        this.shaderCache = new ShaderCache(shaderSources, view.renderer.webGl);\n\n\n    }\n\n    /////////////////////////////////////////////////////////////////////\n\n\n    loadTextureHDR(image)\n    {\n\n        var texture = this.gl.createTexture();\n\n        this.gl.bindTexture( this.gl.TEXTURE_2D,  texture);\n\n        var internalFormat = this.gl.RGB32F;\n        var format = this.gl.RGB;\n        var type = this.gl.FLOAT;\n        var data = undefined;\n\n        if (image.dataFloat instanceof Float32Array && typeof(this.gl.RGB32F) !== 'undefined')\n        {\n            internalFormat = this.gl.RGB32F;\n            format = this.gl.RGB;\n            type = this.gl.FLOAT;\n            data = image.dataFloat;\n        }\n        else if(image.dataFloat instanceof Float32Array)\n        {\n            // workaround for node-gles not supporting RGB32F\n            internalFormat = this.gl.RGBA32F;\n            format = this.gl.RGBA;\n            type = this.gl.FLOAT;\n\n            const numPixels = image.dataFloat.length / 3;\n            data = new Float32Array(numPixels * 4);\n            for(let i = 0; i < numPixels; ++i)\n            {\n                // copy the pixels and padd the alpha channel\n                data[i] = image.dataFloat[i];\n                data[i+1] = image.dataFloat[i+1];\n                data[i+2] = image.dataFloat[i+2];\n                data[i+3] = 0;\n            }\n        }\n        else if (typeof(Image) !== 'undefined' && image instanceof Image)\n        {\n            internalFormat = this.gl.RGBA;\n            format = this.gl.RGBA;\n            type = this.gl.UNSIGNED_BYTE;\n            data = image;\n        }\n        else\n        {\n            console.error(\"loadTextureHDR failed, unsupported HDR image\");\n            return;\n        }\n\n\n        this.gl.texImage2D(\n            this.gl.TEXTURE_2D,\n            0, //level\n            internalFormat,\n            image.width,\n            image.height,\n            0, //border\n            format,\n            type,\n            data);\n\n        this.gl.texParameteri( this.gl.TEXTURE_2D,  this.gl.TEXTURE_WRAP_S,  this.gl.MIRRORED_REPEAT);\n        this.gl.texParameteri( this.gl.TEXTURE_2D,  this.gl.TEXTURE_WRAP_T,  this.gl.MIRRORED_REPEAT);\n        this.gl.texParameteri( this.gl.TEXTURE_2D,  this.gl.TEXTURE_MIN_FILTER,  this.gl.LINEAR);\n        this.gl.texParameteri( this.gl.TEXTURE_2D,  this.gl.TEXTURE_MAG_FILTER,  this.gl.LINEAR);\n\n        return texture;\n    }\n\n\n\n    createCubemapTexture(withMipmaps)\n    {\n        var targetTexture =  this.gl.createTexture();\n        this.gl.bindTexture( this.gl.TEXTURE_CUBE_MAP, targetTexture);\n\n\n        // define size and format of level 0\n        const level = 0;\n        const internalFormat = this.use8bit ? this.gl.RGBA8 : this.gl.RGBA32F;\n        const border = 0;\n        const format = this.gl.RGBA;\n        const type = this.use8bit ? this.gl.UNSIGNED_BYTE : this.gl.FLOAT;\n        const data = null;\n\n        for(var i = 0; i < 6; ++i)\n        {\n            this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level, internalFormat,\n                this.textureSize, this.textureSize, border,\n                format, type, data);\n\n        }\n\n        if(withMipmaps)\n        {\n            this.gl.texParameteri( this.gl.TEXTURE_CUBE_MAP,  this.gl.TEXTURE_MIN_FILTER,  this.gl.LINEAR_MIPMAP_LINEAR);\n        }\n        else\n        {\n            this.gl.texParameteri( this.gl.TEXTURE_CUBE_MAP,  this.gl.TEXTURE_MIN_FILTER,  this.gl.LINEAR);\n        }\n\n        this.gl.texParameteri( this.gl.TEXTURE_CUBE_MAP,  this.gl.TEXTURE_MAG_FILTER,  this.gl.LINEAR);\n        this.gl.texParameteri( this.gl.TEXTURE_CUBE_MAP,  this.gl.TEXTURE_WRAP_S,  this.gl.CLAMP_TO_EDGE);\n        this.gl.texParameteri( this.gl.TEXTURE_CUBE_MAP,  this.gl.TEXTURE_WRAP_T,  this.gl.CLAMP_TO_EDGE);\n\n        return targetTexture;\n    }\n\n    init(panoramaImage)\n    {\n        if (!this.gl.getExtension('EXT_color_buffer_float'))\n        {\n            this.use8bit = true;\n        }\n\n        this.inputTextureID = this.loadTextureHDR(panoramaImage);\n\n        this.cubemapTextureID = this.createCubemapTexture(true);\n\n        this.framebuffer = this.gl.createFramebuffer();\n\n        this.lambertianTextureID = this.createCubemapTexture(false);\n        this.ggxTextureID = this.createCubemapTexture(true);\n        this.sheenTextureID = this.createCubemapTexture(true);\n\n\n        this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP, this.ggxTextureID);\n        this.gl.generateMipmap(this.gl.TEXTURE_CUBE_MAP);\n\n        this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP, this.sheenTextureID);\n        this.gl.generateMipmap(this.gl.TEXTURE_CUBE_MAP);\n\n        this.mipmapLevels = Math.floor(Math.log2(this.textureSize))+1;\n    }\n\n    filterAll()\n    {\n        this.panoramaToCubeMap();\n        this.cubeMapToLambertian();\n        this.cubeMapToGGX();\n        this.cubeMapToSheen();\n\n        this.gl.bindFramebuffer(  this.gl.FRAMEBUFFER, null);\n    }\n\n\n\n\n    panoramaToCubeMap()\n    {\n        for(var i = 0; i < 6; ++i)\n        {\n            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.framebuffer);\n            var side = i;\n            this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+side, this.cubemapTextureID, 0);\n\n            this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP, this.cubemapTextureID);\n\n            this.gl.viewport(0, 0,  this.textureSize,  this.textureSize);\n\n            this.gl.clearColor(1.0, 0.0, 0.0, 0.0);\n            this.gl.clear(this.gl.COLOR_BUFFER_BIT| this.gl.DEPTH_BUFFER_BIT);\n\n            const vertexHash = this.shaderCache.selectShader(\"fullscreen.vert\", []);\n            const fragmentHash = this.shaderCache.selectShader(\"panorama_to_cubemap.frag\", []);\n\n            var shader = this.shaderCache.getShaderProgram(fragmentHash, vertexHash);\n            this.gl.useProgram(shader.program);\n\n            //  TEXTURE0 = active.\n            this.gl.activeTexture(this.gl.TEXTURE0+0);\n\n            // Bind texture ID to active texture\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.inputTextureID);\n\n            // map shader uniform to texture unit (TEXTURE0)\n            const location = this.gl.getUniformLocation(shader.program,\"u_panorama\");\n            this.gl.uniform1i(location, this.gl.TEXTURE0+0); // texture unit 0 (TEXTURE0)\n\n            shader.updateUniform(\"u_currentFace\", i);\n\n            //fullscreen triangle\n            this.gl.drawArrays(this.gl.TRIANGLES, 0, 3);\n        }\n\n        this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP, this.cubemapTextureID);\n        this.gl.generateMipmap(this.gl.TEXTURE_CUBE_MAP);\n\n    }\n\n\n    applyFilter(\n        distribution,\n        roughness,\n        targetMipLevel,\n        targetTexture)\n    {\n        var currentTextureSize =  this.textureSize>>(targetMipLevel);\n\n        for(var i = 0; i < 6; ++i)\n        {\n\n            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.framebuffer);\n            var side = i;\n            this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+side, targetTexture, targetMipLevel);\n\n            this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP, targetTexture);\n\n            this.gl.viewport(0, 0, currentTextureSize, currentTextureSize);\n\n            this.gl.clearColor(1.0, 0.0, 0.0, 0.0);\n            this.gl.clear(this.gl.COLOR_BUFFER_BIT| this.gl.DEPTH_BUFFER_BIT);\n\n\n            const vertexHash = this.shaderCache.selectShader(\"fullscreen.vert\", []);\n            const fragmentHash = this.shaderCache.selectShader(\"ibl_filtering.frag\", []);\n\n            var shader = this.shaderCache.getShaderProgram(fragmentHash, vertexHash);\n            this.gl.useProgram(shader.program);\n\n\n            //  TEXTURE0 = active.\n            this.gl.activeTexture(this.gl.TEXTURE0+0);\n\n            // Bind texture ID to active texture\n            this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP, this.cubemapTextureID);\n\n            // map shader uniform to texture unit (TEXTURE0)\n            const location = this.gl.getUniformLocation(shader.program,\"u_cubemapTexture\");\n            this.gl.uniform1i(location, 0); // texture unit 0\n\n\n            shader.updateUniform(\"u_roughness\", roughness);\n            shader.updateUniform(\"u_sampleCount\", this.sampleCount)\n            shader.updateUniform(\"u_width\", this.textureSize);\n            shader.updateUniform(\"u_lodBias\", this.lodBias);\n            shader.updateUniform(\"u_distribution\", distribution);\n            shader.updateUniform(\"u_currentFace\", i);\n\n\n            //fullscreen triangle\n            this.gl.drawArrays(this.gl.TRIANGLES, 0, 3);\n\n        }\n\n    }\n\n    cubeMapToLambertian()\n    {\n        this.applyFilter(\n            0,\n            0.0,\n            0,\n            this.lambertianTextureID);\n    }\n\n\n    cubeMapToGGX()\n    {\n        for(var currentMipLevel = 0; currentMipLevel < this.mipmapLevels; ++currentMipLevel)\n        {\n            const roughness =  (currentMipLevel) /  (this.mipmapLevels - 1);\n            this.applyFilter(\n                1,\n                roughness,\n                currentMipLevel,\n                this.ggxTextureID);\n        }\n    }\n\n    cubeMapToSheen()\n    {\n        for(var currentMipLevel = 0; currentMipLevel < this.mipmapLevels; ++currentMipLevel)\n        {\n            const roughness =  (currentMipLevel) /  (this.mipmapLevels - 1);\n            this.applyFilter(\n                2,\n                roughness,\n                currentMipLevel,\n                this.sheenTextureID);\n        }\n    }\n\n\n    destroy()\n    {\n        this.shaderCache.destroy();\n    }\n}\n\nexport { iblSampler };\n","class KtxDecoder {\n\n    constructor (context, externalKtxlib) {\n        this.gl = context;\n        this.libktx = null;\n        if (context !== undefined)\n        {\n            if (externalKtxlib === undefined && LIBKTX !== undefined)\n            {\n                externalKtxlib = LIBKTX;\n            }\n            if (externalKtxlib !== undefined)\n            {\n                this.initializied = this.init(context, externalKtxlib);\n            }\n            else\n            {\n                console.error('Failed to initalize KTXDecoder: ktx library undefined');\n                return undefined;\n            }\n        }\n        else\n        {\n            console.error('Failed to initalize KTXDecoder: WebGL context undefined');\n            return undefined;\n        }\n    }\n\n    async init(context, externalKtxlib) {\n        this.libktx = await externalKtxlib({preinitializedWebGLContext: context});\n        this.libktx.GL.makeContextCurrent(this.libktx.GL.createContext(null, { majorVersion: 2.0 }));\n    }\n\n    transcode(ktexture) {\n        if (ktexture.needsTranscoding) {\n            let format;\n\n            let astcSupported = false;\n            let etcSupported = false;\n            let dxtSupported = false;\n            let pvrtcSupported = false;\n\n            astcSupported = !!this.gl.getExtension('WEBGL_compressed_texture_astc');\n            etcSupported = !!this.gl.getExtension('WEBGL_compressed_texture_etc1');\n            dxtSupported = !!this.gl.getExtension('WEBGL_compressed_texture_s3tc');\n            pvrtcSupported = !!(this.gl.getExtension('WEBGL_compressed_texture_pvrtc')) || !!(this.gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'));\n\n            if (astcSupported) {\n                format = this.libktx.TranscodeTarget.ASTC_4x4_RGBA;\n            } else if (dxtSupported) {\n                format = this.libktx.TranscodeTarget.BC1_OR_3;\n            } else if (pvrtcSupported) {\n                format = this.libktx.TranscodeTarget.PVRTC1_4_RGBA;\n            } else if (etcSupported) {\n                format = this.libktx.TranscodeTarget.ETC;\n            } else {\n                format = this.libktx.TranscodeTarget.RGBA8888;\n            }\n            if (ktexture.transcodeBasis(format, 0) != this.libktx.ErrorCode.SUCCESS) {\n                console.warn('Texture transcode failed. See console for details.');\n            }\n        }\n    }\n\n    async loadKtxFromUri(uri) {\n        await this.initializied;\n        const response = await fetch(uri);\n        const data = new Uint8Array(await response.arrayBuffer());\n        const texture = new this.libktx.ktxTexture(data);\n        this.transcode(texture);\n        let uploadResult = texture.glUpload();\n        uploadResult.texture.levels = Math.log2(texture.baseWidth);\n        return uploadResult.texture;\n    }\n\n    async loadKtxFromBuffer(data) {\n        await this.initializied;\n        const texture = new this.libktx.ktxTexture(data);\n        this.transcode(texture);\n        const uploadResult = texture.glUpload();\n        return uploadResult.texture;\n    }\n}\n\nexport { KtxDecoder };\n","/**\n * hdrpng.js - Original code from Enki https://enkimute.github.io/hdrpng.js/\n *\n * Refactored and simplified.\n */\n\nimport { gltfImage } from \"../gltf/image\";\n\nfunction _rgbeToFloat(buffer)\n{\n    const length = buffer.byteLength >> 2;\n    const result = new Float32Array(length * 3);\n\n    for (let i = 0; i < length; i++)\n    {\n        const s = Math.pow(2, buffer[i * 4 + 3] - (128 + 8));\n\n        result[i * 3] = buffer[i * 4] * s;\n        result[i * 3 + 1] = buffer[i * 4 + 1] * s;\n        result[i * 3 + 2] = buffer[i * 4 + 2] * s;\n    }\n    return result;\n}\n\nasync function loadHDR(buffer)\n{\n    let header = '';\n    let pos = 0;\n    const d8 = buffer;\n    let format = undefined;\n    // read header.\n    while (!header.match(/\\n\\n[^\\n]+\\n/g)) header += String.fromCharCode(d8[pos++]);\n    // check format.\n    format = header.match(/FORMAT=(.*)$/m)[1];\n    if (format != '32-bit_rle_rgbe') return console.warn('unknown format : ' + format), this.onerror();\n    // parse resolution\n    const rez = header.split(/\\n/).reverse()[1].split(' '), width = rez[3] * 1, height = rez[1] * 1;\n    // Create image.\n    const img = new Uint8Array(width * height * 4)\n    let ipos = 0;\n    // Read all scanlines\n    for (let j = 0; j < height; j++)\n    {\n        const scanline = [];\n\n        const rgbe = d8.slice(pos, pos += 4);\n        const isNewRLE = (rgbe[0] == 2 && rgbe[1] == 2 && rgbe[2] == ((width >> 8) & 0xFF) && rgbe[3] == (width & 0xFF));\n\n        if (isNewRLE && (width >= 8) && (width < 32768))\n        {\n            for (let i = 0; i < 4; i++)\n            {\n                let ptr = i * width;\n                const ptr_end = (i + 1) * width;\n                let buf = undefined;\n                let count = undefined;\n                while (ptr < ptr_end)\n                {\n                    buf = d8.slice(pos, pos += 2);\n                    if (buf[0] > 128)\n                    {\n                        count = buf[0] - 128;\n                        while (count-- > 0) scanline[ptr++] = buf[1];\n                    }\n                    else\n                    {\n                        count = buf[0] - 1;\n                        scanline[ptr++] = buf[1];\n                        while (count-- > 0) scanline[ptr++] = d8[pos++];\n                    }\n                }\n            }\n\n            for (let i = 0; i < width; i++)\n            {\n                img[ipos++] = scanline[i + 0 * width];\n                img[ipos++] = scanline[i + 1 * width];\n                img[ipos++] = scanline[i + 2 * width];\n                img[ipos++] = scanline[i + 3 * width];\n            }\n        }\n        else\n        {\n            pos -= 4;\n\n            for (const i = 0; i < width; i++)\n            {\n                rgbe = d8.slice(pos, pos += 4);\n\n                img[ipos++] = rgbe[0];\n                img[ipos++] = rgbe[1];\n                img[ipos++] = rgbe[2];\n                img[ipos++] = rgbe[3];\n            }\n        }\n    }\n\n    const imageFloatBuffer = _rgbeToFloat(img);\n\n    return {\n        dataFloat: imageFloatBuffer,\n        width: width,\n        height: height\n    };\n}\n\nexport { loadHDR };\n","import { GltfState } from '../GltfState/gltf_state.js';\nimport { gltfRenderer } from '../Renderer/renderer.js';\nimport { GL } from '../Renderer/webgl.js';\n\nclass GltfView\n{\n    constructor(context, ui)\n    {\n        this.ui = ui;\n        this.context = context;\n        this.renderer = new gltfRenderer(this.context);\n    }\n\n    createState()\n    {\n        return new GltfState();\n    }\n\n    updateCanvas(canvas)\n    {\n        if(this.ui !== undefined)\n        {\n            canvas.width = window.innerWidth - this.ui.getBoundingClientRect().width;\n        }\n        else\n        {\n            canvas.width = canvas.clientWidth;\n        }\n        canvas.height = canvas.clientHeight;\n    }\n    \n    updateViewport(width, height)\n    {\n        this.renderer.resize(width, height);\n    }\n    \n    renderFrame(state)\n    {\n\n        this.renderer.clearFrame(state.renderingParameters.clearColor);\n\n        if(state.gltf === undefined)\n        {\n            return;\n        }\n\n        const scene = state.gltf.scenes[state.sceneIndex];\n\n        scene.applyTransformHierarchy(state.gltf);\n\n        this.renderer.drawScene(state, scene);\n    }\n    animate(state)\n    {\n        if(state.gltf === undefined)\n        {\n            return;\n        }\n\n        if(state.gltf.animations !== undefined && state.animationIndices !== undefined && !state.animationTimer.paused)\n        {\n            const t = state.animationTimer.elapsedSec();\n\n            const animations = state.animationIndices.map(index => {\n                return state.gltf.animations[index];\n            }).filter(animation => animation !== undefined);\n\n            for(const animation of animations)\n            {\n                animation.advance(state.gltf, t);\n            }\n        }\n    }\n\n    // gatherStatistics collects information about the GltfState such as the number of rendererd meshes or triangles\n    gatherStatistics(state)\n    {\n        if(state.gltf === undefined)\n        {\n            return;\n        }\n\n        // gather information from the active scene\n        const scene = state.gltf.scenes[state.sceneIndex];\n        const nodes = scene.gatherNodes(state.gltf);\n        const activeMeshes = nodes.filter(node => node.mesh !== undefined).map(node => state.gltf.meshes[node.mesh]);\n        const activePrimitives = activeMeshes\n            .reduce((acc, mesh) => acc.concat(mesh.primitives), [])\n            .filter(primitive => primitive.material !== undefined);\n        const activeMaterials = [... new Set(activePrimitives.map(primitive => state.gltf.materials[primitive.material]))];\n        const opaqueMaterials = activeMaterials.filter(material => material.alphaMode !== \"BLEND\");\n        const transparentMaterials = activeMaterials.filter(material => material.alphaMode === \"BLEND\");\n        const faceCount = activePrimitives\n            .map(primitive => {\n                const verticesCount = state.gltf.accessors[primitive.indices].count;\n                if (verticesCount === 0)\n                {\n                    return 0;\n                }\n\n                // convert vertex count to point, line or triangle count\n                switch (primitive.mode) {\n                case GL.POINTS:\n                    return verticesCount;\n                case GL.LINES:\n                    return verticesCount / 2;\n                case GL.LINE_LOOP:\n                    return verticesCount;\n                case GL.LINE_STRIP:\n                    return verticesCount - 1;\n                case GL.TRIANGLES:\n                    return verticesCount / 3;\n                case GL.TRIANGLE_STRIP:\n                case GL.TRIANGLE_FAN:\n                    return verticesCount - 2;\n                }\n            })\n            .reduce((acc, faceCount) => acc += faceCount);\n\n        // assemble statistics object\n        return {\n            meshCount: activeMeshes.length,\n            faceCount: faceCount,\n            opaqueMaterialsCount: opaqueMaterials.length,\n            transparentMaterialsCount: transparentMaterials.length\n        };\n    }\n\n    async startRendering(state, canvas)\n    {\n        const update = () =>\n        {\n            this.animate(state);\n            this.updateCanvas(canvas);\n            this.updateViewport(canvas.width, canvas.height);\n            this.renderFrame(state);\n            window.requestAnimationFrame(update);\n        };\n\n        // After this start executing render loop.\n        window.requestAnimationFrame(update);\n    }\n}\n\nexport { GltfView };\n","\nimport axios from 'axios';\nimport { glTF } from '../gltf/gltf.js';\nimport { getIsGlb, getContainingFolder } from '../gltf/utils.js';\nimport { GlbParser } from './glb_parser.js';\nimport { gltfLoader } from \"./loader.js\";\nimport { gltfImage, ImageMimeType } from \"../gltf/image.js\";\nimport { gltfTexture, gltfTextureInfo } from '../gltf/texture.js';\nimport { gltfSampler } from '../gltf/sampler.js';\nimport { GL } from '../Renderer/webgl.js';\nimport { iblSampler } from '../ibl_sampler.js';\n\n\nimport { AsyncFileReader } from './async_file_reader.js';\n\nimport { DracoDecoder } from './draco.js';\nimport { KtxDecoder } from './ktx.js';\n\nimport { loadHDR } from '../libs/hdrpng.js';\n\nfunction initKtxLib(view, ktxlib)\n{\n    view.ktxDecoder = new KtxDecoder(view.context, ktxlib);\n}\n\nasync function initDracoLib(dracolib)\n{\n    const dracoDecoder = new DracoDecoder(dracolib);\n    if (dracoDecoder !== undefined)\n    {\n        await dracoDecoder.ready();\n    }\n}\n\nasync function loadGltf(file, view, additionalFiles)\n{\n    let isGlb = undefined;\n    let buffers = undefined;\n    let json = undefined;\n    let data = undefined;\n    let filename = \"\";\n    if (typeof file === \"string\")\n    {\n        isGlb = getIsGlb(file);\n        let response = await axios.get(file, { responseType: isGlb ? \"arraybuffer\" : \"json\" });\n        json = response.data;\n        data = response.data;\n        filename = file;\n    }\n    else if (file instanceof ArrayBuffer)\n    {\n        isGlb = additionalFiles === undefined;\n        if (isGlb)\n        {\n            data = file;\n        }\n        else\n        {\n            // TODO\n        }\n    }\n    else if (typeof (File) !== 'undefined' && file instanceof File)\n    {\n        let fileContent = file;\n        filename = file.name;\n        isGlb = getIsGlb(filename);\n        if (isGlb)\n        {\n            data = await AsyncFileReader.readAsArrayBuffer(fileContent);\n        }\n        else\n        {\n            data = await AsyncFileReader.readAsText(fileContent);\n            json = JSON.parse(data);\n            buffers = additionalFiles;\n        }\n    }\n    else\n    {\n        console.error(\"Passed invalid type to loadGltf \" + typeof (file));\n    }\n\n    if (isGlb)\n    {\n        const glbParser = new GlbParser(data);\n        const glb = glbParser.extractGlbData();\n        json = glb.json;\n        buffers = glb.buffers;\n    }\n\n    const gltf = new glTF(filename);\n    gltf.ktxDecoder = view.ktxDecoder;\n    //Make sure draco decoder instance is ready\n    gltf.fromJson(json);\n\n    // because the gltf image paths are not relative\n    // to the gltf, we have to resolve all image paths before that\n    for (const image of gltf.images)\n    {\n        image.resolveRelativePath(getContainingFolder(gltf.path));\n    }\n\n    await gltfLoader.load(gltf, view.context, buffers);\n\n    return gltf;\n}\n\n\nasync function loadEnvironment(file, view, luts)\n{\n    let image = undefined;\n    if (typeof file === \"string\")\n    {\n        let response = await axios.get(file, { responseType: \"arraybuffer\" });\n\n        image = await loadHDR(new Uint8Array(response.data));\n    }\n    else if (file instanceof ArrayBuffer)\n    {\n        image = await loadHDR(new Uint8Array(file));\n    }\n    else\n    {\n        const imageData = await AsyncFileReader.readAsArrayBuffer(file).catch(() =>\n        {\n            console.error(\"Could not load image with FileReader\");\n        });\n        image = await loadHDR(new Uint8Array(imageData));\n    }\n    return loadEnvironmentFromImage(image, view, luts);\n}\n\n\nasync function loadEnvironmentFromImage(imageHDR, view, luts)\n{\n    // The environment uses the same type of samplers, textures and images as used in the glTF class\n    // so we just use it as a template\n    const environment = new glTF();\n\n    //\n    // Prepare samplers.\n    //\n\n    let samplerIdx = environment.samplers.length;\n\n    environment.samplers.push(new gltfSampler(GL.LINEAR, GL.LINEAR, GL.CLAMP_TO_EDGE, GL.CLAMP_TO_EDGE, \"DiffuseCubeMapSampler\"));\n    const diffuseCubeSamplerIdx = samplerIdx++;\n\n    environment.samplers.push(new gltfSampler(GL.LINEAR, GL.LINEAR_MIPMAP_LINEAR, GL.CLAMP_TO_EDGE, GL.CLAMP_TO_EDGE, \"SpecularCubeMapSampler\"));\n    const specularCubeSamplerIdx = samplerIdx++;\n\n    environment.samplers.push(new gltfSampler(GL.LINEAR, GL.LINEAR_MIPMAP_LINEAR, GL.CLAMP_TO_EDGE, GL.CLAMP_TO_EDGE, \"SheenCubeMapSampler\"));\n    const sheenCubeSamplerIdx = samplerIdx++;\n\n    environment.samplers.push(new gltfSampler(GL.LINEAR, GL.LINEAR, GL.CLAMP_TO_EDGE, GL.CLAMP_TO_EDGE, \"LUTSampler\"));\n    const lutSamplerIdx = samplerIdx++;\n\n    //\n    // Prepare images and textures.\n    //\n\n    let imageIdx = environment.images.length;\n\n    let environmentFiltering = new iblSampler(view);\n\n    environmentFiltering.init(imageHDR);\n    environmentFiltering.filterAll();\n\n    // Diffuse\n\n    const diffuseGltfImage = new gltfImage(\n        undefined,\n        GL.TEXTURE_CUBE_MAP,\n        0,\n        undefined,\n        \"Diffuse\",\n        ImageMimeType.GLTEXTURE,\n        environmentFiltering.lambertianTextureID\n    );\n\n    environment.images.push(diffuseGltfImage);\n\n    const diffuseTexture = new gltfTexture(\n        diffuseCubeSamplerIdx,\n        [imageIdx++],\n        GL.TEXTURE_CUBE_MAP,\n        environmentFiltering.lambertianTextureID);\n\n    environment.textures.push(diffuseTexture);\n\n    environment.diffuseEnvMap = new gltfTextureInfo(environment.textures.length - 1, 0, true);\n    environment.diffuseEnvMap.generateMips = false;\n\n\n\n    // Specular\n    const specularGltfImage = new gltfImage(\n        undefined,\n        GL.TEXTURE_CUBE_MAP,\n        0,\n        undefined,\n        \"Specular\",\n        ImageMimeType.GLTEXTURE,\n        environmentFiltering.ggxTextureID\n    );\n\n    environment.images.push(specularGltfImage);\n\n    const specularTexture = new gltfTexture(\n        specularCubeSamplerIdx,\n        [imageIdx++],\n        GL.TEXTURE_CUBE_MAP,\n        environmentFiltering.ggxTextureID);\n\n    environment.textures.push(specularTexture);\n\n    environment.specularEnvMap = new gltfTextureInfo(environment.textures.length - 1, 0, true);\n    environment.specularEnvMap.generateMips = false;\n\n\n    // Sheen\n    const sheenGltfImage = new gltfImage(\n        undefined,\n        GL.TEXTURE_CUBE_MAP,\n        0,\n        undefined,\n        \"Sheen\",\n        ImageMimeType.GLTEXTURE,\n        environmentFiltering.ggxTextureID\n    );\n\n    environment.images.push(sheenGltfImage);\n\n    const sheenTexture = new gltfTexture(\n        sheenCubeSamplerIdx,\n        [imageIdx++],\n        GL.TEXTURE_CUBE_MAP,\n        environmentFiltering.sheenTextureID);\n\n    environment.textures.push(sheenTexture);\n\n    environment.sheenEnvMap = new gltfTextureInfo(environment.textures.length - 1, 0, true);\n    environment.sheenEnvMap.generateMips = false;\n\n    /*\n        // Diffuse\n\n        const lambertian = new gltfImage(filteredEnvironmentsDirectoryPath + \"/lambertian/diffuse.ktx2\", GL.TEXTURE_CUBE_MAP);\n        lambertian.mimeType = ImageMimeType.KTX2;\n        environment.images.push(lambertian);\n        environment.textures.push(new gltfTexture(diffuseCubeSamplerIdx, [imageIdx++], GL.TEXTURE_CUBE_MAP));\n        environment.diffuseEnvMap = new gltfTextureInfo(environment.textures.length - 1, 0, true);\n        environment.diffuseEnvMap.generateMips = false;\n\n        // Specular\n\n        const specular = new gltfImage(filteredEnvironmentsDirectoryPath + \"/ggx/specular.ktx2\", GL.TEXTURE_CUBE_MAP);\n        specular.mimeType = ImageMimeType.KTX2;\n        environment.images.push(specular);\n        environment.textures.push(new gltfTexture(specularCubeSamplerIdx, [imageIdx++], GL.TEXTURE_CUBE_MAP));\n        environment.specularEnvMap = new gltfTextureInfo(environment.textures.length - 1, 0, true);\n        environment.specularEnvMap.generateMips = false;\n\n        const specularImage = environment.images[environment.textures[environment.textures.length - 1].source];\n\n        // Sheen\n\n        const sheen = new gltfImage(filteredEnvironmentsDirectoryPath + \"/charlie/sheen.ktx2\", GL.TEXTURE_CUBE_MAP);\n        sheen.mimeType = ImageMimeType.KTX2;\n        environment.images.push(sheen);\n        environment.textures.push(new gltfTexture(sheenCubeSamplerIdx, [imageIdx++], GL.TEXTURE_CUBE_MAP));\n        environment.sheenEnvMap = new gltfTextureInfo(environment.textures.length - 1, 0, true);\n        environment.sheenEnvMap.generateMips = false;*/\n\n    //\n    // Look Up Tables.\n    //\n\n    // GGX\n\n    if (luts === undefined)\n    {\n        luts = {\n            lut_ggx_file: \"assets/images/lut_ggx.png\",\n            lut_charlie_file: \"assets/images/lut_charlie.png\",\n            lut_sheen_E_file: \"assets/images/lut_sheen_E.png\",\n        };\n    }\n\n    environment.images.push(new gltfImage(luts.lut_ggx_file, GL.TEXTURE_2D, 0, undefined, undefined, ImageMimeType.PNG));\n    environment.textures.push(new gltfTexture(lutSamplerIdx, [imageIdx++], GL.TEXTURE_2D));\n\n    environment.lut = new gltfTextureInfo(environment.textures.length - 1);\n    environment.lut.generateMips = false;\n\n    // Sheen\n    // Charlie\n\n    environment.images.push(new gltfImage(luts.lut_charlie_file, GL.TEXTURE_2D, 0, undefined, undefined, ImageMimeType.PNG));\n    environment.textures.push(new gltfTexture(lutSamplerIdx, [imageIdx++], GL.TEXTURE_2D));\n\n    environment.sheenLUT = new gltfTextureInfo(environment.textures.length - 1);\n    environment.sheenLUT.generateMips = false;\n\n    // Sheen E LUT\n\n    environment.images.push(new gltfImage(luts.lut_sheen_E_file, GL.TEXTURE_2D, 0, undefined, undefined, ImageMimeType.PNG));\n    environment.textures.push(new gltfTexture(lutSamplerIdx, [imageIdx++], GL.TEXTURE_2D));\n\n    environment.sheenELUT = new gltfTextureInfo(environment.textures.length - 1);\n    environment.sheenELUT.generateMips = false;\n\n    await gltfLoader.loadImages(environment);\n\n    environment.initGl(view.context);\n\n    environment.mipCount = environmentFiltering.mipmapLevels;\n\n    return environment;\n}\n\nexport { loadGltf, loadEnvironment, initKtxLib, initDracoLib };\n"],"names":["jsToGl","array","tensor","glMatrix","ARRAY_TYPE","length","i","jsToGlSlice","offset","stride","initGlForMembers","gltfObj","gltf","webGlContext","name","Object","keys","member","undefined","initGl","Array","isArray","element","objectsFromJsons","jsonObjects","GltfType","objects","jsonObject","push","objectFromJson","object","fromJson","fromKeys","target","jsonObj","ignore","k","find","elem","replace","stringHash","str","seed","Math","imul","charCodeAt","clamp","number","min","max","getIsGlb","filename","getExtension","split","toLowerCase","getContainingFolder","filePath","substring","lastIndexOf","UniformStruct","AnimationTimer","[object Object]","this","startTime","paused","fixedTime","pausedTime","Date","getTime","unpause","pause","timeInSec","GltfObject","extensions","extras","json","gltfCamera","type","znear","zfar","Infinity","yfov","PI","aspectRatio","xmag","ymag","nodeIndex","super","node","cameraIndex","nodes","camera","cameras","console","error","jsonCamera","perspective","orthographic","drawables","drawable","modelView","mat4","create","multiply","getViewMatrix","worldTransform","pos","vec3","transformMat4","clone","primitive","centroid","depth","filter","a","sort","b","projection","view","position","getPosition","getTarget","lookAt","fromValues","lookDirection","getLookDirection","add","getNode","getTranslation","direction","rotation","getRotation","transformQuat","quat","ynear","mat","matrix","getExtentsFromAccessor","accessor","outMin","outMax","boxMin","boxMax","center","scale","centerToSurface","sub","radius","VecZero","UserCamera","yaw","pitch","distance","zoomFactor","orbitSpeed","panSpeed","sceneExtents","toGlobalOrientation","from","to","difference","subtract","projectedDifference","angle","value","fitCameraPlanesToExtents","x","y","yMax","left","up","longestDistance","fitDistanceToExtents","fitCameraTargetToExtents","sceneIndex","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","nodeIndices","scenes","slice","pop","concat","children","mesh","meshes","primitives","attribute","glAttributes","accessors","assetMin","assetMax","getSceneExtents","fitPanSpeedToScene","vector","rotateX","rotateY","maxAxisLength","xfov","yZoom","tan","xZoom","zNear","zFar","isPowerOf2","n","AsyncFileReader","path","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsArrayBuffer","readAsText","readAsDataURL","ImageMimeType","GL","gltfWebGl","context","webglExtensions","extension","warn","loc","textureInfo","texSlot","gltfTex","textures","index","image","images","source","mimeType","glTexture","initialized","createTexture","activeTexture","TEXTURE0","bindTexture","uniform1i","gltfSampler","samplers","sampler","pixelStorei","UNPACK_FLIP_Y_WEBGL","internalformat","linear","SRGB8_ALPHA8","RGBA","texImage2D","miplevel","UNSIGNED_BYTE","generateMips","shouldGenerateMips","setSampler","minFilter","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","generateMipmap","accessorIndex","gltfAccessor","glBuffer","createBuffer","data","getTypedView","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","STATIC_DRAW","attributeLocation","bufferView","gltfBufferView","bufferViews","ARRAY_BUFFER","vertexAttribPointer","getComponentCount","componentType","normalized","byteStride","enableVertexAttribArray","shaderIdentifier","isVert","shaderSource","shader","createShader","VERTEX_SHADER","FRAGMENT_SHADER","compileShader","getShaderParameter","COMPILE_STATUS","info","messages","getShaderInfoLog","message","matches","match","lineNumber","parseInt","lines","Error","vertex","fragment","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","gltfSamplerObj","generateMipmaps","texParameteri","TEXTURE_WRAP_S","wrapS","TEXTURE_WRAP_T","wrapT","CLAMP_TO_EDGE","NEAREST","LINEAR","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","magFilter","supports_EXT_texture_filter_anisotropic","texParameterf","anisotropy","maxAnisotropy","gltfImage","uri","TEXTURE_2D","basePath","String","startsWith","substr","additionalFiles","setImageFromBufferView","setImageFromFiles","setImageFromUri","url","Image","addEventListener","src","crossOrigin","ktxDecoder","loadKtxFromUri","ArrayBuffer","jpeg.decode","useTArray","png.decode","loadHTMLImage","catch","buffer","buffers","Uint8Array","byteOffset","byteLength","loadKtxFromBuffer","blob","Blob","objectURL","URL","createObjectURL","files","foundFile","file","fullPath","arrayBuffer","imageData","width","height","ToneMaps","NONE","ACES_FAST","ACES","DebugOutput","METALLIC","ROUGHNESS","NORMAL","WORLDSPACENORMAL","GEOMETRYNORMAL","TANGENT","BITANGENT","BASECOLOR","OCCLUSION","EMISSIVE","DIFFUSE","SPECULAR","CLEARCOAT","SHEEN","TRANSMISSION","ALPHA","F0","GltfState","environment","renderingParameters","morphing","skinning","clearColor","exposure","usePunctual","useIBL","toneMap","debugOutput","environmentBackground","environmentRotation","userCamera","animationIndices","animationTimer","variant","gltfShader","hash","gl","uniforms","Map","attributes","unknownAttributes","unknownUniforms","uniformCount","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","set","attribCount","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","deleteProgram","get","log","uniform","objectName","updateUniformStruct","updateUniformArray","updateUniformValue","arrayName","uniformName","updateUniform","flat","apply","structName","memberNames","memberName","FLOAT","Float32Array","uniform1fv","uniform1f","FLOAT_VEC2","uniform2fv","FLOAT_VEC3","uniform3fv","FLOAT_VEC4","uniform4fv","INT","Uint32Array","Int32Array","uniform1iv","INT_VEC2","uniform2iv","INT_VEC3","uniform3iv","INT_VEC4","uniform4iv","FLOAT_MAT2","uniformMatrix2fv","FLOAT_MAT3","uniformMatrix3fv","FLOAT_MAT4","uniformMatrix4fv","ShaderCache","sources","shaders","programs","key","changed","includeName","includeSource","pattern","includes","entries","deleteShader","clear","destroy","permutationDefines","endsWith","defines","define","vertexShaderHash","fragmentShaderHash","hash1","hash2","linkedProg","gltfRenderer","currentWidth","currentHeight","webGl","opaqueRenderTexture","opaqueFramebuffer","opaqueDepthTexture","opaqueFramebufferWidth","opaqueFramebufferHeight","shaderSources","shaderCache","loadWebGlExtensions","visibleLights","viewMatrix","projMatrix","viewProjectionMatrix","currentCameraPosition","init","UNPACK_COLORSPACE_CONVERSION_WEBGL","enable","DEPTH_TEST","depthFunc","LEQUAL","colorMask","clearDepth","DEPTH_COMPONENT16","DEPTH_COMPONENT","UNSIGNED_SHORT","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","DEPTH_ATTACHMENT","viewport","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","state","scene","currentCamera","getProjectionMatrix","getVisibleLights","gatherNodes","skin","updateSkin","reduce","acc","map","material","opaqueDrawables","materials","alphaMode","KHR_materials_transmission","transparentDrawables","sortPrimitivesByDepth","drawPrimitive","transmissionDrawables","transmissionSampleTexture","skip","mappings","idx","variants","obj","indexOf","materialIdx","forEach","vertDefines","pushVertParameterDefines","getDefines","fragDefines","pushFragParameterDefines","fragmentHash","selectShader","getShaderIdentifier","vertexHash","getShaderProgram","useProgram","applyLights","normalMatrix","updateAnimationUniforms","determinant","frontFace","CW","CCW","doubleSided","disable","CULL_FACE","BLEND","blendFuncSeparate","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","blendEquation","FUNC_ADD","drawIndexed","indices","setIndices","vertexCount","count","location","getAttributeLocation","enableAttribute","val","getProperties","samplerName","setTexture","textureCount","applyEnvironmentMap","sheenELUT","uniform2i","indexAccessor","drawElements","mode","drawArrays","disableVertexAttribArray","lights","light","includesNode","skins","computeJoints","parameters","hasWeights","hasJoints","jointMatrices","targets","weights","hasNormals","jointNormalMatrices","uniformLights","toUniform","texSlotOffset","diffuseEnvMap","specularEnvMap","lut","sheenEnvMap","sheenLUT","mipCount","rotMatrix4","rotMatrix3","mat3","fromMat4","sparse","typedView","filteredView","componentSize","getComponentSize","componentCount","arrayLength","BYTE","Int8Array","SHORT","Int16Array","Uint16Array","UNSIGNED_INT","applySparse","dv","DataView","func","floor","indicesBufferView","indicesBuffer","indicesByteOffset","indicesComponentSize","indicesComponentCount","indicesArrayLength","indicesTypedView","valuesBufferView","values","valuesBuffer","valuesByteOffset","valuesComponentSize","valuesComponentCount","valuesArrayLength","valuesTypedView","CompononentCount","WebGl","deleteBuffer","gltfBuffer","self","setBufferFromFiles","sefBufferFromUri","callback","axios","responseType","then","response","onloadend","event","gltfLight","color","intensity","innerConeAngle","outerConeAngle","range","nodeExtensions","lightsExtension","KHR_lights_punctual","lightIndex","jsonLight","spot","uLight","UniformLight","getScaling","mn","col","normalize","alongNegativeZ","translation","innerConeCos","cos","outerConeCos","Type_Spot","Type_Point","Type_Directional","defaultDirection","padding1","padding2","ImageBasedLight","brightnessFactor","brightnessOffset","specularEnvironmentTexture","diffuseEnvironmentTexture","sheenEnvironmentTexture","levelCount","jsonIBL","fromJsonExtensions","KHR_materials_sheen","TEXTURE_CUBE_MAP","textureObject","imageObject","gltfTexture","texture","mipLevelCount","jsonTexture","KHR_texture_basisu","deleteTexture","gltfTextureInfo","texCoord","strength","jsonTextureInfo","gltfMaterial","pbrMetallicRoughness","normalTexture","occlusionTexture","emissiveTexture","emissiveFactor","alphaCutoff","properties","defaultMaterial","baseColorFactor","vec4","textureKey","KHR_texture_transform","uvTransform","s","sin","c","uvMatrix","toUpperCase","parseTextureInfoExtensions","baseColorTexture","metallicRoughnessTexture","diffuseTexture","specularGlossinessTexture","metallicFactor","roughnessFactor","KHR_materials_unlit","KHR_materials_pbrSpecularGlossiness","diffuseFactor","specularFactor","glossinessFactor","KHR_materials_clearcoat","clearcoatFactor","clearcoatRoughnessFactor","clearcoatTexture","clearcoatRoughnessTexture","clearcoatNormalTexture","sheenRoughnessFactor","sheenColorFactor","sheenRoughnessTexture","sheenColorTexture","transmissionFactor","transmissionTexture","jsonMaterial","fromJsonMaterialExtensions","fromJsonMetallicRoughness","jsonExtensions","fromJsonSpecularGlossiness","fromJsonClearcoat","fromJsonSheen","fromJsonTransmission","jsonMetallicRoughness","jsonSpecularGlossiness","jsonClearcoat","jsonSheen","jsonTransmission","DracoDecoder","dracoLib","instance","DracoDecoderModule","module","initializingPromise","dracoDecoderType","dracoDecoderModule","freeze","gltfPrimitive","TRIANGLES","hasTangents","hasTexcoord","hasColor","maxAttributes","getParameter","MAX_VERTEX_ATTRIBS","KHR_draco_mesh_compression","dracoDecoder","isFrozen","dracoGeometry","decodeDracoBufferToIntermediate","copyDataFromDecodedGeometry","jsonPrimitive","fromJsonPrimitiveExtensions","KHR_materials_variants","fromJsonVariants","jsonVariants","primitiveAttributes","indexBuffer","loadBufferIntoGltf","POSITION","positionBuffer","loadArrayIntoArrayBuffer","normalBuffer","TEXCOORD_0","uvBuffer","TEXCOORD_1","tangentBuffer","COLOR_0","colorBuffer","JOINTS_0","jointsBuffer","WEIGHTS_0","weightsBuffer","JOINTS_1","WEIGHTS_1","gltfAccessorIndex","gltfBufferViewTarget","gltfBufferViewName","gltfBufferObj","gltfBufferViewObj","arrayData","dracoExtension","dracoBufferViewIDX","origGltfDrBufViewObj","origGltfDracoBuffer","actualBuffer","draco","decoder","Decoder","decoderBuffer","DecoderBuffer","Init","geometry","decodeGeometry","gltfDracoAttributes","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","Mesh","DecodeBufferToMesh","ok","ptr","error_msg","num_points","dracoAttr","accessotVertexCount","getDracoArrayTypeFromComponentType","dracoAttribute","GetAttributeByUniqueId","tmpObj","decodeAttribute","numIndices","num_faces","dataSize","_malloc","GetTrianglesUInt32Array","HEAPU32","_free","itemSize","attributeName","attributeType","numComponents","num_components","numValues","GetAttributeDataArrayForAllPoints","DT_FLOAT32","HEAPF32","DT_INT8","HEAP8","DT_INT16","HEAP16","DT_INT32","HEAP32","DT_UINT8","HEAPU8","DT_UINT16","HEAPU16","DT_UINT32","gltfMesh","jsonMesh","gltfNode","inverseWorldTransform","applyMatrix","matrixData","transform","fromRotationTranslationScale","REPEAT","gltfScene","imageBasedLight","KHR_lights_image_based","imageBasedLights","rootTransform","applyTransform","parentTransform","getLocalTransform","invert","transpose","child","gatherNode","childIndex","gltfAsset","copyright","generator","version","minVersion","gltfAnimationChannel","InterpolationPath","gltfAnimationSampler","input","interpolation","output","InterpolationModes","gltfInterpolator","prevKey","prevT","q1","q2","t","qn1","qn2","quatResult","slerp","nextKey","keyDelta","prevIndex","nextIndex","V","B","tSq","tCub","v0","v1","channel","maxTime","getDeinterlacedView","tn","cubicSpline","q0","getQuat","slerpQuat","step","z","w","gltfAnimation","channels","interpolators","jsonAnimation","totalTime","interpolator","applyTranslation","interpolate","applyRotation","applyScale","gltfSkin","inverseBindMatrices","joints","skeleton","parentNode","ibmAccessor","joint","jointMatrix","ibm","mul","gltfVariant","jsonVariant","glTF","asset","animations","getJsonLightsFromExtensions","getJsonIBLsFromExtensions","getJsonVariantsFromExtension","j","enforceVariantsUniqueness","createDefault","GlbParser","glbHeaderInts","glbChunkHeaderInts","glbMagic","glbVersion","jsonChunkType","binaryChunkType","getCheckedGlbInfo","chunkInfos","getAllChunkInfos","chunkInfo","getBufferFromChunk","getJsonFromChunk","header","magic","checkEquality","infos","chunkStart","getChunkInfo","headerStart","start","chunkLength","jsonStart","jsonSlice","stringBuffer","TextDecoder","decode","JSON","parse","actual","expected","gltfLoader","appendix","getBuffers","getAdditionalFiles","buffersPromise","loadBuffers","imagesPromise","loadImages","all","getTypedAppendix","File","Type","promises","load","imagePromises","iblSampler","textureSize","sampleCount","lodBias","mipmapCount","lambertianTextureID","ggxTextureID","sheenTextureID","inputTextureID","cubemapTextureID","framebuffer","renderer","internalFormat","RGB32F","format","RGB","dataFloat","RGBA32F","numPixels","MIRRORED_REPEAT","withMipmaps","targetTexture","use8bit","RGBA8","TEXTURE_CUBE_MAP_POSITIVE_X","panoramaImage","loadTextureHDR","createCubemapTexture","mipmapLevels","log2","panoramaToCubeMap","cubeMapToLambertian","cubeMapToGGX","cubeMapToSheen","side","distribution","roughness","targetMipLevel","currentTextureSize","applyFilter","currentMipLevel","KtxDecoder","externalKtxlib","libktx","LIBKTX","initializied","preinitializedWebGLContext","makeContextCurrent","createContext","majorVersion","ktexture","needsTranscoding","astcSupported","etcSupported","dxtSupported","pvrtcSupported","TranscodeTarget","ASTC_4x4_RGBA","BC1_OR_3","PVRTC1_4_RGBA","ETC","RGBA8888","transcodeBasis","ErrorCode","SUCCESS","fetch","ktxTexture","transcode","uploadResult","glUpload","levels","baseWidth","async","loadHDR","d8","fromCharCode","rez","reverse","img","ipos","scanline","rgbe","ptr_end","buf","pow","_rgbeToFloat","ui","canvas","window","innerWidth","getBoundingClientRect","clientWidth","clientHeight","resize","clearFrame","applyTransformHierarchy","drawScene","elapsedSec","animation","advance","activeMeshes","activePrimitives","activeMaterials","Set","opaqueMaterials","transparentMaterials","faceCount","verticesCount","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLE_STRIP","TRIANGLE_FAN","meshCount","opaqueMaterialsCount","transparentMaterialsCount","update","animate","updateCanvas","updateViewport","renderFrame","requestAnimationFrame","parts","arguments","join","positions","setCentroid","positionVectors","getFileName","dracolib","ready","ktxlib","luts","imageHDR","samplerIdx","diffuseCubeSamplerIdx","specularCubeSamplerIdx","sheenCubeSamplerIdx","lutSamplerIdx","imageIdx","environmentFiltering","filterAll","diffuseGltfImage","specularGltfImage","specularTexture","sheenGltfImage","sheenTexture","lut_ggx_file","lut_charlie_file","lut_sheen_E_file","loadEnvironmentFromImage","isGlb","fileContent","glb","extractGlbData","resolveRelativePath"],"mappings":"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"}